import sys

from PyQt5.QtWidgets import (QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
                             QTabWidget, QTableWidget, QTableWidgetItem,
                             QSplitter, QTextEdit, QPushButton, QLabel,
                             QComboBox, QMessageBox, QApplication, QHeaderView,
                             QCheckBox, QLineEdit,
                             QGroupBox, QFormLayout, QSpinBox, QMenu, QAction,
                             QToolBar)
from PyQt5.QtCore import Qt, QSize, QTimer
from PyQt5.QtGui import QColor, QCursor
import mysql.connector
from datetime import datetime
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
from reviews_manager.config import DB_TABLES
from PyQt5.QtCore import QThread, pyqtSignal

# –í –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ reviews_manager_app.py –¥–æ–±–∞–≤–∏—Ç—å:
try:
    from reviews_manager.config import DB_CONFIG, DB_TABLES, ADMIN_USERNAME, ADMIN_PASSWORD
except ImportError:
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤—Ä—É—á–Ω—É—é, –µ—Å–ª–∏ –∏–º–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è
    DB_CONFIG = {
        'host': 'mpsp.online',
        'user': 'u3054108_Mukam1',
        'password': 'vYL-f2w-cNk-fuJ',
        'database': 'u3054108_reviews_db',
        'charset': 'utf8mb4',
        'collation': 'utf8mb4_unicode_ci'
    }

    DB_TABLES = {
        'reviews': {
            'name': 'reviews',
        },
        'contacts': {
            'name': 'contacts',
        }
    }

    ADMIN_USERNAME = 'admin'
    ADMIN_PASSWORD = 'mpsp2023admin'

class DBConnectionThread(QThread):
    connection_success = pyqtSignal(object)  # –°–∏–≥–Ω–∞–ª —Å –æ–±—ä–µ–∫—Ç–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    connection_error = pyqtSignal(str)  # –°–∏–≥–Ω–∞–ª —Å —Ç–µ–∫—Å—Ç–æ–º –æ—à–∏–±–∫–∏

    def __init__(self, config):
        super().__init__()
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è MySQL 5.7
        self.config = config.copy()
        if 'collation' not in self.config:
            self.config['collation'] = 'utf8mb4_unicode_ci'

    def run(self):
        try:
            import mysql.connector

            # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            try:
                connection = mysql.connector.connect(**self.config)
                self.connection_success.emit(connection)
            except mysql.connector.errors.DatabaseError as e:
                # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∏–∑-–∑–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                if "Unknown collation" in str(e):
                    print("–ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è")
                    config_mod = self.config.copy()
                    config_mod['charset'] = 'utf8'  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π utf8
                    if 'collation' in config_mod:
                        del config_mod['collation']

                    connection = mysql.connector.connect(**config_mod)
                    self.connection_success.emit(connection)
                else:
                    raise e

        except Exception as e:
            self.connection_error.emit(str(e))

class ReviewsManagerApp(QMainWindow):
    """–û—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞–º–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏"""

    def __init__(self, parent=None):
        super().__init__(parent)

        # –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞
            self.setWindowTitle("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞–º–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏")
            self.setMinimumSize(1200, 800)

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI (–≤—ã–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –ë–î)
            self.setup_ui()

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î (—Ç–µ–ø–µ—Ä—å —É–∂–µ –ø–æ—Å–ª–µ UI)
            self.init_database()

            # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ë–î —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞)
            if hasattr(self, 'db_connection') and hasattr(self, 'cursor'):
                self.load_reviews()
                self.load_contacts()
            else:
                print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ë–î –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            self.update_timer = QTimer(self)
            self.update_timer.timeout.connect(self.check_for_updates)
            self.update_timer.start(60000)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ReviewsManagerApp: {e}")
            import traceback
            traceback.print_exc()
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–∑—ã–≤–æ–≤: {str(e)}"
            )

    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä —Ö–æ—Å—Ç–∞
            try:
                from reviews_manager.config import DB_CONFIG
                db_config = DB_CONFIG.copy()
            except ImportError:
                # –ï—Å–ª–∏ –∏–º–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è, —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤—Ä—É—á–Ω—É—é
                db_config = {
                    'host': 'mpsp.online',
                    'user': 'u3054108_Mukam1',
                    'password': 'vYL-f2w-cNk-fuJ',
                    'database': 'u3054108_reviews_db',
                    'charset': 'utf8mb4',
                    'collation': 'utf8mb4_unicode_ci'
                }

            print(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {db_config}")

            # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            self.connection_thread = DBConnectionThread(db_config)
            self.connection_thread.connection_success.connect(self.on_connection_success)
            self.connection_thread.connection_error.connect(self.on_connection_error)
            self.connection_thread.start()

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
            self.statusBar().showMessage("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            import traceback
            traceback.print_exc()

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏, —á—Ç–æ–±—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–ª–æ –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
            self.db_connection = None
            self.cursor = None
            self.statusBar().showMessage("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î. –†–∞–±–æ—Ç–∞ –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ.")


    def on_connection_success(self, connection):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
        self.db_connection = connection
        self.cursor = self.db_connection.cursor(dictionary=True)
        self.statusBar().showMessage("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self.load_reviews()
        self.load_contacts()

    def on_connection_error(self, error_message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
        from PyQt5.QtWidgets import QMessageBox
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {error_message}")

        QMessageBox.critical(
            self,
            "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {error_message}\n\n"
            "–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞–º–∏ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ."
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
        self.db_connection = None
        self.cursor = None
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)

        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QVBoxLayout(central_widget)

        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.tabs = QTabWidget()
        self.tabs.setTabPosition(QTabWidget.North)
        self.tabs.setDocumentMode(True)

        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫—É –æ—Ç–∑—ã–≤–æ–≤
        self.reviews_tab = self.create_reviews_tab()
        self.tabs.addTab(self.reviews_tab, "üåü –û—Ç–∑—ã–≤—ã")

        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫—É –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        self.contacts_tab = self.create_contacts_tab()
        self.tabs.addTab(self.contacts_tab, "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")

        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫—É SQL-–∑–∞–ø—Ä–æ—Å–æ–≤
        self.sql_tab = self.create_sql_tab()
        self.tabs.addTab(self.sql_tab, "üóÉÔ∏è SQL-–∑–∞–ø—Ä–æ—Å—ã")

        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.settings_tab = self.create_settings_tab()
        self.tabs.addTab(self.settings_tab, "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫–∏ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É layout
        main_layout.addWidget(self.tabs)

        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É
        self.statusBar().showMessage("–ì–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ")

        # –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.create_toolbar()

    def create_reviews_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞–º–∏"""
        tab = QWidget()
        layout = QHBoxLayout(tab)

        # –°–æ–∑–¥–∞–µ–º —Å–ø–ª–∏—Ç—Ç–µ—Ä –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏ –¥–µ—Ç–∞–ª–µ–π
        splitter = QSplitter(Qt.Horizontal)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤
        left_panel = QWidget()
        left_layout = QVBoxLayout(left_panel)

        # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        filter_group = QGroupBox("–§–∏–ª—å—Ç—Ä—ã")
        filter_layout = QHBoxLayout()

        self.status_filter = QComboBox()
        self.status_filter.addItems(["–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã", "–û–∂–∏–¥–∞–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏", "–û–¥–æ–±—Ä–µ–Ω–æ", "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ"])
        self.status_filter.currentIndexChanged.connect(self.apply_filters)

        self.rating_filter = QComboBox()
        self.rating_filter.addItems(["–í—Å–µ —Ä–µ–π—Ç–∏–Ω–≥–∏", "5 –∑–≤–µ–∑–¥", "4 –∑–≤–µ–∑–¥—ã", "3 –∑–≤–µ–∑–¥—ã", "2 –∑–≤–µ–∑–¥—ã", "1 –∑–≤–µ–∑–¥–∞"])
        self.rating_filter.currentIndexChanged.connect(self.apply_filters)

        filter_layout.addWidget(QLabel("–°—Ç–∞—Ç—É—Å:"))
        filter_layout.addWidget(self.status_filter)
        filter_layout.addWidget(QLabel("–†–µ–π—Ç–∏–Ω–≥:"))
        filter_layout.addWidget(self.rating_filter)
        filter_group.setLayout(filter_layout)

        left_layout.addWidget(filter_group)

        # –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
        search_layout = QHBoxLayout()
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText("–ü–æ–∏—Å–∫ –æ—Ç–∑—ã–≤–æ–≤...")
        self.search_input.textChanged.connect(self.search_reviews)
        search_button = QPushButton("üîç")
        search_button.clicked.connect(lambda: self.search_reviews(self.search_input.text()))

        search_layout.addWidget(self.search_input)
        search_layout.addWidget(search_button)
        left_layout.addLayout(search_layout)

        # –¢–∞–±–ª–∏—Ü–∞ –æ—Ç–∑—ã–≤–æ–≤
        self.reviews_table = QTableWidget()
        self.reviews_table.setColumnCount(5)
        self.reviews_table.setHorizontalHeaderLabels(["ID", "–ò–º—è", "–£—Å–ª—É–≥–∞", "–†–µ–π—Ç–∏–Ω–≥", "–°—Ç–∞—Ç—É—Å"])
        self.reviews_table.setSelectionBehavior(QTableWidget.SelectRows)
        self.reviews_table.setSelectionMode(QTableWidget.ExtendedSelection)
        self.reviews_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.reviews_table.clicked.connect(self.show_review_details)

        left_layout.addWidget(self.reviews_table)

        # –ö–Ω–æ–ø–∫–∏ –ø–∞–∫–µ—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        batch_group = QGroupBox("–ü–∞–∫–µ—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")
        batch_layout = QHBoxLayout()

        approve_batch_btn = QPushButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ")
        approve_batch_btn.clicked.connect(self.approve_selected_reviews)

        reject_batch_btn = QPushButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ")
        reject_batch_btn.clicked.connect(self.reject_selected_reviews)

        delete_batch_btn = QPushButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ")
        delete_batch_btn.clicked.connect(self.delete_selected_reviews)

        batch_layout.addWidget(approve_batch_btn)
        batch_layout.addWidget(reject_batch_btn)
        batch_layout.addWidget(delete_batch_btn)
        batch_group.setLayout(batch_layout)

        left_layout.addWidget(batch_group)

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –¥–µ—Ç–∞–ª–∏ –æ—Ç–∑—ã–≤–∞
        right_panel = QWidget()
        right_layout = QVBoxLayout(right_panel)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–µ—Ç–∞–ª–∏ –æ—Ç–∑—ã–≤–∞
        self.review_detail_title = QLabel("–î–µ—Ç–∞–ª–∏ –æ—Ç–∑—ã–≤–∞")
        self.review_detail_title.setStyleSheet("font-size: 16pt; font-weight: bold;")
        right_layout.addWidget(self.review_detail_title)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
        client_group = QGroupBox("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ")
        client_layout = QFormLayout()

        self.detail_client_name = QLabel("")
        self.detail_client_order = QLabel("")
        self.detail_service = QLabel("")
        self.detail_date = QLabel("")

        client_layout.addRow("–ò–º—è:", self.detail_client_name)
        client_layout.addRow("–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:", self.detail_client_order)
        client_layout.addRow("–£—Å–ª—É–≥–∞:", self.detail_service)
        client_layout.addRow("–î–∞—Ç–∞:", self.detail_date)

        client_group.setLayout(client_layout)
        right_layout.addWidget(client_group)

        # –¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞
        review_group = QGroupBox("–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞")
        review_layout = QVBoxLayout()

        self.detail_rating = QLabel("‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ")
        self.detail_rating.setStyleSheet("font-size: 24pt; color: gold;")

        self.detail_text = QTextEdit()
        self.detail_text.setReadOnly(True)

        review_layout.addWidget(self.detail_rating)
        review_layout.addWidget(self.detail_text)
        review_group.setLayout(review_layout)

        right_layout.addWidget(review_group)

        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–º
        management_group = QGroupBox("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–º")
        management_layout = QVBoxLayout()

        # –°—Ç–∞—Ç—É—Å
        status_layout = QHBoxLayout()
        status_layout.addWidget(QLabel("–°—Ç–∞—Ç—É—Å:"))

        self.detail_status = QComboBox()
        self.detail_status.addItems(["–û–∂–∏–¥–∞–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏", "–û–¥–æ–±—Ä–µ–Ω–æ", "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ"])
        status_layout.addWidget(self.detail_status)

        update_status_btn = QPushButton("–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
        update_status_btn.clicked.connect(self.update_review_status)
        status_layout.addWidget(update_status_btn)

        management_layout.addLayout(status_layout)

        # –û—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤
        response_layout = QVBoxLayout()
        response_layout.addWidget(QLabel("–û—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤:"))

        self.detail_response = QTextEdit()
        response_layout.addWidget(self.detail_response)

        # –®–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤
        templates_layout = QHBoxLayout()
        templates_layout.addWidget(QLabel("–®–∞–±–ª–æ–Ω:"))

        self.response_template = QComboBox()
        self.response_template.addItems([
            "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω",
            "–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∑–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤",
            "–û—Ç–≤–µ—Ç –Ω–∞ –∫—Ä–∏—Ç–∏–∫—É",
            "–ò–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –ø—Ä–æ–±–ª–µ–º—É",
            "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç"
        ])
        self.response_template.currentIndexChanged.connect(self.apply_response_template)

        templates_layout.addWidget(self.response_template)
        response_layout.addLayout(templates_layout)

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –æ—Ç–≤–µ—Ç–æ–º
        response_buttons = QHBoxLayout()

        save_response_btn = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç")
        save_response_btn.clicked.connect(self.save_review_response)

        send_response_btn = QPushButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç")
        send_response_btn.clicked.connect(self.send_review_response)

        response_buttons.addWidget(save_response_btn)
        response_buttons.addWidget(send_response_btn)
        response_layout.addLayout(response_buttons)

        management_layout.addLayout(response_layout)

        # –ö–Ω–æ–ø–∫–∏ —Ä–µ–∞–∫—Ü–∏–π –∏ —É–¥–∞–ª–µ–Ω–∏—è
        actions_layout = QHBoxLayout()

        like_btn = QPushButton("üëç Like")
        like_btn.clicked.connect(lambda: self.update_review_reaction(1, 0))

        dislike_btn = QPushButton("üëé Dislike")
        dislike_btn.clicked.connect(lambda: self.update_review_reaction(0, 1))

        delete_btn = QPushButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤")
        delete_btn.clicked.connect(self.delete_current_review)

        actions_layout.addWidget(like_btn)
        actions_layout.addWidget(dislike_btn)
        actions_layout.addWidget(delete_btn)
        management_layout.addLayout(actions_layout)

        management_group.setLayout(management_layout)
        right_layout.addWidget(management_group)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª–∏ –∫ —Å–ø–ª–∏—Ç—Ç–µ—Ä—É
        splitter.addWidget(left_panel)
        splitter.addWidget(right_panel)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å–ø–ª–∏—Ç—Ç–µ—Ä–∞ (40% / 60%)
        splitter.setSizes([400, 600])

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–ª–∏—Ç—Ç–µ—Ä –≤ layout –≤–∫–ª–∞–¥–∫–∏
        layout.addWidget(splitter)

        return tab

    def create_contacts_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏"""
        tab = QWidget()
        layout = QHBoxLayout(tab)

        # –°–æ–∑–¥–∞–µ–º —Å–ø–ª–∏—Ç—Ç–µ—Ä –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏ –¥–µ—Ç–∞–ª–µ–π
        splitter = QSplitter(Qt.Horizontal)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        left_panel = QWidget()
        left_layout = QVBoxLayout(left_panel)

        # –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        filter_group = QGroupBox("–§–∏–ª—å—Ç—Ä—ã")
        filter_layout = QHBoxLayout()

        self.contact_status_filter = QComboBox()
        self.contact_status_filter.addItems(["–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã", "–ù–æ–≤—ã–µ", "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ", "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ", "–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ"])
        self.contact_status_filter.currentIndexChanged.connect(self.apply_contact_filters)

        filter_layout.addWidget(QLabel("–°—Ç–∞—Ç—É—Å:"))
        filter_layout.addWidget(self.contact_status_filter)
        filter_group.setLayout(filter_layout)

        left_layout.addWidget(filter_group)

        # –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
        search_layout = QHBoxLayout()
        self.contact_search_input = QLineEdit()
        self.contact_search_input.setPlaceholderText("–ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...")
        self.contact_search_input.textChanged.connect(self.search_contacts)
        search_button = QPushButton("üîç")
        search_button.clicked.connect(lambda: self.search_contacts(self.contact_search_input.text()))

        search_layout.addWidget(self.contact_search_input)
        search_layout.addWidget(search_button)
        left_layout.addLayout(search_layout)

        # –¢–∞–±–ª–∏—Ü–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        self.contacts_table = QTableWidget()
        self.contacts_table.setColumnCount(5)
        self.contacts_table.setHorizontalHeaderLabels(["ID", "–ò–º—è", "Email", "–î–∞—Ç–∞", "–°—Ç–∞—Ç—É—Å"])
        self.contacts_table.setSelectionBehavior(QTableWidget.SelectRows)
        self.contacts_table.setSelectionMode(QTableWidget.ExtendedSelection)
        self.contacts_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.contacts_table.clicked.connect(self.show_contact_details)

        left_layout.addWidget(self.contacts_table)

        # –ö–Ω–æ–ø–∫–∏ –ø–∞–∫–µ—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        batch_group = QGroupBox("–ü–∞–∫–µ—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")
        batch_layout = QHBoxLayout()

        process_batch_btn = QPushButton("‚úÖ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ")
        process_batch_btn.clicked.connect(self.process_selected_contacts)

        reject_batch_btn = QPushButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ")
        reject_batch_btn.clicked.connect(self.reject_selected_contacts)

        delete_batch_btn = QPushButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ")
        delete_batch_btn.clicked.connect(self.delete_selected_contacts)

        batch_layout.addWidget(process_batch_btn)
        batch_layout.addWidget(reject_batch_btn)
        batch_layout.addWidget(delete_batch_btn)
        batch_group.setLayout(batch_layout)

        left_layout.addWidget(batch_group)

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        right_panel = QWidget()
        right_layout = QVBoxLayout(right_panel)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        self.contact_detail_title = QLabel("–î–µ—Ç–∞–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞")
        self.contact_detail_title.setStyleSheet("font-size: 16pt; font-weight: bold;")
        right_layout.addWidget(self.contact_detail_title)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ
        contact_group = QGroupBox("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        contact_layout = QFormLayout()

        self.detail_contact_name = QLabel("")
        self.detail_contact_email = QLabel("")
        self.detail_contact_phone = QLabel("")
        self.detail_contact_date = QLabel("")

        contact_layout.addRow("–ò–º—è:", self.detail_contact_name)
        contact_layout.addRow("Email:", self.detail_contact_email)
        contact_layout.addRow("–¢–µ–ª–µ—Ñ–æ–Ω:", self.detail_contact_phone)
        contact_layout.addRow("–î–∞—Ç–∞:", self.detail_contact_date)

        contact_group.setLayout(contact_layout)
        right_layout.addWidget(contact_group)

        # –°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        message_group = QGroupBox("–°–æ–æ–±—â–µ–Ω–∏–µ")
        message_layout = QVBoxLayout()

        self.detail_contact_message = QTextEdit()
        self.detail_contact_message.setReadOnly(True)

        message_layout.addWidget(self.detail_contact_message)
        message_group.setLayout(message_layout)

        right_layout.addWidget(message_group)

        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
        management_group = QGroupBox("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        management_layout = QVBoxLayout()

        # –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞
        status_layout = QHBoxLayout()
        status_layout.addWidget(QLabel("–°—Ç–∞—Ç—É—Å:"))

        self.detail_contact_status = QComboBox()
        self.detail_contact_status.addItems(["–ù–æ–≤—ã–π", "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ", "–ó–∞–≤–µ—Ä—à–µ–Ω", "–û—Ç–∫–ª–æ–Ω–µ–Ω"])
        status_layout.addWidget(self.detail_contact_status)

        update_status_btn = QPushButton("–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
        update_status_btn.clicked.connect(self.update_contact_status)
        status_layout.addWidget(update_status_btn)

        management_layout.addLayout(status_layout)

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        actions_layout = QHBoxLayout()

        email_btn = QPushButton("üìß –û—Ç–ø—Ä–∞–≤–∏—Ç—å Email")
        email_btn.clicked.connect(self.send_email_to_contact)

        delete_btn = QPushButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç")
        delete_btn.clicked.connect(self.delete_current_contact)

        actions_layout.addWidget(email_btn)
        actions_layout.addWidget(delete_btn)
        management_layout.addLayout(actions_layout)

        management_group.setLayout(management_layout)
        right_layout.addWidget(management_group)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª–∏ –∫ —Å–ø–ª–∏—Ç—Ç–µ—Ä—É
        splitter.addWidget(left_panel)
        splitter.addWidget(right_panel)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å–ø–ª–∏—Ç—Ç–µ—Ä–∞ (40% / 60%)
        splitter.setSizes([400, 600])

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–ª–∏—Ç—Ç–µ—Ä –≤ layout –≤–∫–ª–∞–¥–∫–∏
        layout.addWidget(splitter)

        return tab

    def create_sql_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–æ–≤"""
        tab = QWidget()
        layout = QVBoxLayout(tab)

        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å - –≤–≤–æ–¥ SQL –∑–∞–ø—Ä–æ—Å–∞
        query_group = QGroupBox("SQL-–∑–∞–ø—Ä–æ—Å")
        query_layout = QVBoxLayout()

        self.sql_query_edit = QTextEdit()
        self.sql_query_edit.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ SQL –∑–∞–ø—Ä–æ—Å...")
        query_layout.addWidget(self.sql_query_edit)

        # –ö–Ω–æ–ø–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ —à–∞–±–ª–æ–Ω–æ–≤
        buttons_layout = QHBoxLayout()

        execute_btn = QPushButton("‚ñ∂Ô∏è –í—ã–ø–æ–ª–Ω–∏—Ç—å")
        execute_btn.clicked.connect(self.execute_sql_query)

        clear_btn = QPushButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å")
        clear_btn.clicked.connect(self.clear_sql_query)

        templates_label = QLabel("–®–∞–±–ª–æ–Ω—ã:")

        self.sql_templates = QComboBox()
        self.sql_templates.addItems([
            "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω",
            "SELECT * FROM reviews LIMIT 100",
            "SELECT * FROM contacts LIMIT 100",
            "SELECT COUNT(*) FROM reviews GROUP BY status",
            "SELECT COUNT(*) FROM contacts GROUP BY status",
            "CREATE TABLE (–ø—Ä–∏–º–µ—Ä)"
        ])
        self.sql_templates.currentIndexChanged.connect(self.apply_sql_template)

        buttons_layout.addWidget(execute_btn)
        buttons_layout.addWidget(clear_btn)
        buttons_layout.addStretch()
        buttons_layout.addWidget(templates_label)
        buttons_layout.addWidget(self.sql_templates)

        query_layout.addLayout(buttons_layout)
        query_group.setLayout(query_layout)

        layout.addWidget(query_group)

        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞
        results_group = QGroupBox("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        results_layout = QVBoxLayout()

        self.sql_results_table = QTableWidget()
        self.sql_results_table.setSelectionBehavior(QTableWidget.SelectRows)

        self.sql_error_label = QLabel("")
        self.sql_error_label.setStyleSheet("color: red;")

        results_layout.addWidget(self.sql_results_table)
        results_layout.addWidget(self.sql_error_label)

        results_group.setLayout(results_layout)

        layout.addWidget(results_group)
        layout.setStretch(0, 1)  # 1/3 –¥–ª—è –≤–≤–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞
        layout.setStretch(1, 2)  # 2/3 –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

        return tab

    def create_settings_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        tab = QWidget()
        layout = QVBoxLayout(tab)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_group = QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        db_layout = QFormLayout()

        self.db_host = QLineEdit(DB_CONFIG['host'])
        self.db_user = QLineEdit(DB_CONFIG['user'])
        self.db_password = QLineEdit(DB_CONFIG['password'])
        self.db_password.setEchoMode(QLineEdit.Password)
        self.db_name = QLineEdit(DB_CONFIG['database'])

        db_layout.addRow("–•–æ—Å—Ç:", self.db_host)
        db_layout.addRow("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", self.db_user)
        db_layout.addRow("–ü–∞—Ä–æ–ª—å:", self.db_password)
        db_layout.addRow("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:", self.db_name)

        # –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        test_btn = QPushButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
        test_btn.clicked.connect(self.test_database_connection)
        db_layout.addRow("", test_btn)

        db_group.setLayout(db_layout)
        layout.addWidget(db_group)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        ui_group = QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
        ui_layout = QFormLayout()

        self.refresh_interval = QSpinBox()
        self.refresh_interval.setMinimum(10)
        self.refresh_interval.setMaximum(3600)
        self.refresh_interval.setValue(60)
        self.refresh_interval.setSuffix(" —Å–µ–∫")

        ui_layout.addRow("–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", self.refresh_interval)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.show_notifications = QCheckBox("–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–∞—Ö –∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö")
        self.show_notifications.setChecked(True)
        ui_layout.addRow("", self.show_notifications)

        # –ó–≤—É–∫–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        self.sound_notifications = QCheckBox("–í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        self.sound_notifications.setChecked(True)
        ui_layout.addRow("", self.sound_notifications)

        ui_group.setLayout(ui_layout)
        layout.addWidget(ui_group)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
        responses_group = QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤")
        responses_layout = QVBoxLayout()

        # –¢–∞–±–ª–∏—Ü–∞ —à–∞–±–ª–æ–Ω–æ–≤
        self.templates_table = QTableWidget()
        self.templates_table.setColumnCount(2)
        self.templates_table.setHorizontalHeaderLabels(["–ù–∞–∑–≤–∞–Ω–∏–µ", "–¢–µ–∫—Å—Ç"])
        self.templates_table.horizontalHeader().setSectionResizeMode(1, QHeaderView.Stretch)

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
        self.templates_table.setRowCount(4)

        templates = [
            ("–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∑–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤",
             "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤! –ú—ã –æ—á–µ–Ω—å —Ä–∞–¥—ã, —á—Ç–æ –≤—ã –æ—Å—Ç–∞–ª–∏—Å—å –¥–æ–≤–æ–ª—å–Ω—ã –Ω–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏. –ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞!"),
            ("–û—Ç–≤–µ—Ç –Ω–∞ –∫—Ä–∏—Ç–∏–∫—É",
             "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –æ—Ç–∑—ã–≤ –∏ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å. –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ –∏ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º –Ω–∞—à–∏—Ö —É—Å–ª—É–≥. –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞."),
            ("–ò–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –ø—Ä–æ–±–ª–µ–º—É",
             "–ü—Ä–∏–Ω–æ—Å–∏–º –∏—Å–∫—Ä–µ–Ω–Ω–∏–µ –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –≤–æ–∑–Ω–∏–∫—à–∏–µ –ø—Ä–æ–±–ª–µ–º—ã. –ú—ã —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è —Å —Å–∏—Ç—É–∞—Ü–∏–µ–π –∏ —Å–¥–µ–ª–∞–µ–º –≤—Å—ë –≤–æ–∑–º–æ–∂–Ω–æ–µ, —á—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å –≤–æ–ø—Ä–æ—Å –≤ –∫—Ä–∞—Ç—á–∞–π—à–∏–µ —Å—Ä–æ–∫–∏."),
            ("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç",
             "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ. –í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å. –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á—Ç–µ–º –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –≤ –Ω–∞—à–µ–π –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç–µ.")
        ]

        for i, (name, text) in enumerate(templates):
            self.templates_table.setItem(i, 0, QTableWidgetItem(name))
            self.templates_table.setItem(i, 1, QTableWidgetItem(text))

        responses_layout.addWidget(self.templates_table)

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞–º–∏
        templates_buttons = QHBoxLayout()

        add_template_btn = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω")
        add_template_btn.clicked.connect(self.add_response_template_row)

        delete_template_btn = QPushButton("‚ûñ –£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω")
        delete_template_btn.clicked.connect(self.delete_response_template_row)

        save_templates_btn = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω—ã")
        save_templates_btn.clicked.connect(self.save_response_templates)

        templates_buttons.addWidget(add_template_btn)
        templates_buttons.addWidget(delete_template_btn)
        templates_buttons.addWidget(save_templates_btn)

        responses_layout.addLayout(templates_buttons)
        responses_group.setLayout(responses_layout)

        layout.addWidget(responses_group)

        # –ö–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        buttons_layout = QHBoxLayout()

        save_settings_btn = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        save_settings_btn.clicked.connect(self.save_settings)

        reset_settings_btn = QPushButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        reset_settings_btn.clicked.connect(self.reset_settings)

        buttons_layout.addWidget(save_settings_btn)
        buttons_layout.addWidget(reset_settings_btn)

        layout.addLayout(buttons_layout)

        return tab

    def create_toolbar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        toolbar = QToolBar("–ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
        toolbar.setMovable(False)
        toolbar.setIconSize(QSize(24, 24))
        self.addToolBar(toolbar)

        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        refresh_action = QAction("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", self)
        refresh_action.triggered.connect(self.refresh_data)
        toolbar.addAction(refresh_action)

        toolbar.addSeparator()

        # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_action = QAction("üì§ –≠–∫—Å–ø–æ—Ä—Ç", self)
        export_action.triggered.connect(self.export_data)
        toolbar.addAction(export_action)

        # –ö–Ω–æ–ø–∫–∞ –∏–º–ø–æ—Ä—Ç–∞
        import_action = QAction("üì• –ò–º–ø–æ—Ä—Ç", self)
        import_action.triggered.connect(self.import_data)
        toolbar.addAction(import_action)

        toolbar.addSeparator()

        # –ö–Ω–æ–ø–∫–∞ —Å–ø—Ä–∞–≤–∫–∏
        help_action = QAction("‚ùì –°–ø—Ä–∞–≤–∫–∞", self)
        help_action.triggered.connect(self.show_help)
        toolbar.addAction(help_action)

    # === –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ç–∑—ã–≤–∞–º–∏ ===

    def load_reviews(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if not hasattr(self, 'cursor') or not self.db_connection.is_connected():
                self.init_database()

            # –ü–æ–ª—É—á–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –æ—Ç–∑—ã–≤–æ–≤
            reviews_table = DB_TABLES['reviews']['name']

            # –§–æ—Ä–º–∏—Ä—É–µ–º SQL-–∑–∞–ø—Ä–æ—Å
            query = f"SELECT * FROM {reviews_table} ORDER BY date DESC"

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            self.cursor.execute(query)
            reviews = self.cursor.fetchall()

            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            self.reviews_table.setRowCount(0)  # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É

            for row, review in enumerate(reviews):
                self.reviews_table.insertRow(row)

                # ID
                id_item = QTableWidgetItem(str(review['id']))
                id_item.setData(Qt.UserRole, review['id'])  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º
                self.reviews_table.setItem(row, 0, id_item)

                # –ò–º—è
                name_item = QTableWidgetItem(review['name'])
                self.reviews_table.setItem(row, 1, name_item)

                # –£—Å–ª—É–≥–∞
                service_item = QTableWidgetItem(review['service'])
                self.reviews_table.setItem(row, 2, service_item)

                # –†–µ–π—Ç–∏–Ω–≥ (–∑–≤–µ–∑–¥—ã)
                rating = review['rating']
                rating_item = QTableWidgetItem("‚òÖ" * rating + "‚òÜ" * (5 - rating))
                rating_item.setData(Qt.UserRole, rating)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                self.reviews_table.setItem(row, 3, rating_item)

                # –°—Ç–∞—Ç—É—Å
                status_item = QTableWidgetItem(review['status'])

                # –¶–≤–µ—Ç–æ–≤–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
                if review['status'] == 'approved' or review['status'] == '–û–¥–æ–±—Ä–µ–Ω–æ':
                    status_item.setBackground(QColor(200, 255, 200))  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π
                elif review['status'] == 'pending' or review['status'] == '–û–∂–∏–¥–∞–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏':
                    status_item.setBackground(QColor(255, 255, 200))  # –°–≤–µ—Ç–ª–æ-–∂–µ–ª—Ç—ã–π
                elif review['status'] == 'rejected' or review['status'] == '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ':
                    status_item.setBackground(QColor(255, 200, 200))  # –°–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π

                self.reviews_table.setItem(row, 4, status_item)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.reviews_table.resizeColumnsToContents()
            self.statusBar().showMessage(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(reviews)} –æ—Ç–∑—ã–≤–æ–≤")

        except mysql.connector.Error as e:
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–∑—ã–≤—ã: {e}"
            )

    def show_review_details(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
        row = self.reviews_table.currentRow()
        if row < 0:
            return

        # –ü–æ–ª—É—á–∞–µ–º ID –æ—Ç–∑—ã–≤–∞
        review_id = self.reviews_table.item(row, 0).data(Qt.UserRole)

        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤–∞ –∏–∑ –ë–î
            reviews_table = DB_TABLES['reviews']['name']
            query = f"SELECT * FROM {reviews_table} WHERE id = %s"
            self.cursor.execute(query, (review_id,))
            review = self.cursor.fetchone()

            if not review:
                return

            # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –¥–µ—Ç–∞–ª–µ–π
            self.review_detail_title.setText(f"–û—Ç–∑—ã–≤ #{review['id']}")
            self.detail_client_name.setText(review['name'])
            self.detail_client_order.setText(review['order_id'] if review['order_id'] else '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            self.detail_service.setText(review['service'])

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            if isinstance(review['date'], datetime):
                formatted_date = review['date'].strftime("%d.%m.%Y %H:%M:%S")
            else:
                formatted_date = str(review['date'])
            self.detail_date.setText(formatted_date)

            # –†–µ–π—Ç–∏–Ω–≥
            rating = review['rating']
            self.detail_rating.setText("‚òÖ" * rating + "‚òÜ" * (5 - rating))

            # –¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞
            self.detail_text.setText(review['text'] if review['text'] else '')

            # –°—Ç–∞—Ç—É—Å
            status_index = 0
            status = review['status']
            if status == 'approved' or status == '–û–¥–æ–±—Ä–µ–Ω–æ':
                status_index = 1
            elif status == 'rejected' or status == '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ':
                status_index = 2
            self.detail_status.setCurrentIndex(status_index)

            # –û—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤
            self.detail_response.setText(review['response'] if review['response'] else '')

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —à–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞
            self.response_template.setCurrentIndex(0)

        except mysql.connector.Error as e:
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –æ—Ç–∑—ã–≤–∞: {e}"
            )

    def apply_filters(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ —Å–ø–∏—Å–∫—É –æ—Ç–∑—ã–≤–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
            status_filter = self.status_filter.currentText()
            rating_filter = self.rating_filter.currentText()

            # –§–æ—Ä–º–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏—è SQL-–∑–∞–ø—Ä–æ—Å–∞
            conditions = []
            params = []

            if status_filter != "–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã":
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è SQL-–∑–∞–ø—Ä–æ—Å–∞
                status_map = {
                    "–û–∂–∏–¥–∞–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏": "pending",
                    "–û–¥–æ–±—Ä–µ–Ω–æ": "approved",
                    "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ": "rejected"
                }
                db_status = status_map.get(status_filter, status_filter)
                conditions.append("status = %s")
                params.append(db_status)

            if rating_filter != "–í—Å–µ —Ä–µ–π—Ç–∏–Ω–≥–∏":
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ "5 –∑–≤–µ–∑–¥"
                rating = int(rating_filter.split()[0])
                conditions.append("rating = %s")
                params.append(rating)

            # –§–æ—Ä–º–∏—Ä—É–µ–º SQL-–∑–∞–ø—Ä–æ—Å
            reviews_table = DB_TABLES['reviews']['name']
            query = f"SELECT * FROM {reviews_table}"

            if conditions:
                query += " WHERE " + " AND ".join(conditions)

            query += " ORDER BY date DESC"

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            self.cursor.execute(query, params)
            reviews = self.cursor.fetchall()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            self.reviews_table.setRowCount(0)

            for row, review in enumerate(reviews):
                self.reviews_table.insertRow(row)

                # ID
                id_item = QTableWidgetItem(str(review['id']))
                id_item.setData(Qt.UserRole, review['id'])
                self.reviews_table.setItem(row, 0, id_item)

                # –ò–º—è
                name_item = QTableWidgetItem(review['name'])
                self.reviews_table.setItem(row, 1, name_item)

                # –£—Å–ª—É–≥–∞
                service_item = QTableWidgetItem(review['service'])
                self.reviews_table.setItem(row, 2, service_item)

                # –†–µ–π—Ç–∏–Ω–≥
                rating = review['rating']
                rating_item = QTableWidgetItem("‚òÖ" * rating + "‚òÜ" * (5 - rating))
                rating_item.setData(Qt.UserRole, rating)
                self.reviews_table.setItem(row, 3, rating_item)

                # –°—Ç–∞—Ç—É—Å
                status_item = QTableWidgetItem(review['status'])

                # –¶–≤–µ—Ç–æ–≤–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
                if review['status'] == 'approved' or review['status'] == '–û–¥–æ–±—Ä–µ–Ω–æ':
                    status_item.setBackground(QColor(200, 255, 200))
                elif review['status'] == 'pending' or review['status'] == '–û–∂–∏–¥–∞–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏':
                    status_item.setBackground(QColor(255, 255, 200))
                elif review['status'] == 'rejected' or review['status'] == '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ':
                    status_item.setBackground(QColor(255, 200, 200))

                self.reviews_table.setItem(row, 4, status_item)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É
            self.statusBar().showMessage(f"–ù–∞–π–¥–µ–Ω–æ {len(reviews)} –æ—Ç–∑—ã–≤–æ–≤")

        except mysql.connector.Error as e:
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã: {e}"
            )

    def search_reviews(self, text):
        """–ü–æ–∏—Å–∫ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç—É"""
        try:
            if not text.strip():
                # –ï—Å–ª–∏ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç–æ–µ, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                self.load_reviews()
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º SQL-–∑–∞–ø—Ä–æ—Å —Å –ø–æ–∏—Å–∫–æ–º
            reviews_table = DB_TABLES['reviews']['name']
            search_pattern = f"%{text}%"

            query = f"""
                SELECT * FROM {reviews_table} 
                WHERE name LIKE %s 
                OR service LIKE %s 
                OR text LIKE %s 
                OR order_id LIKE %s
                ORDER BY date DESC
            """

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            self.cursor.execute(query, (search_pattern, search_pattern, search_pattern, search_pattern))
            reviews = self.cursor.fetchall()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            self.reviews_table.setRowCount(0)

            for row, review in enumerate(reviews):
                self.reviews_table.insertRow(row)

                # ID
                id_item = QTableWidgetItem(str(review['id']))
                id_item.setData(Qt.UserRole, review['id'])
                self.reviews_table.setItem(row, 0, id_item)

                # –ò–º—è
                name_item = QTableWidgetItem(review['name'])
                self.reviews_table.setItem(row, 1, name_item)

                # –£—Å–ª—É–≥–∞
                service_item = QTableWidgetItem(review['service'])
                self.reviews_table.setItem(row, 2, service_item)

                # –†–µ–π—Ç–∏–Ω–≥
                rating = review['rating']
                rating_item = QTableWidgetItem("‚òÖ" * rating + "‚òÜ" * (5 - rating))
                rating_item.setData(Qt.UserRole, rating)
                self.reviews_table.setItem(row, 3, rating_item)

                # –°—Ç–∞—Ç—É—Å
                status_item = QTableWidgetItem(review['status'])

                # –¶–≤–µ—Ç–æ–≤–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
                if review['status'] == 'approved' or review['status'] == '–û–¥–æ–±—Ä–µ–Ω–æ':
                    status_item.setBackground(QColor(200, 255, 200))
                elif review['status'] == 'pending' or review['status'] == '–û–∂–∏–¥–∞–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏':
                    status_item.setBackground(QColor(255, 255, 200))
                elif review['status'] == 'rejected' or review['status'] == '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ':
                    status_item.setBackground(QColor(255, 200, 200))

                self.reviews_table.setItem(row, 4, status_item)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É
            self.statusBar().showMessage(f"–ù–∞–π–¥–µ–Ω–æ {len(reviews)} –æ—Ç–∑—ã–≤–æ–≤")

        except mysql.connector.Error as e:
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫: {e}"
            )

    def apply_response_template(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –æ—Ç–≤–µ—Ç–∞"""
        template_index = self.response_template.currentIndex()
        if template_index == 0:
            return  # –ù–µ –≤—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞
        template_text = ""
        for row in range(self.templates_table.rowCount()):
            if self.templates_table.item(row, 0).text() == self.response_template.currentText():
                template_text = self.templates_table.item(row, 1).text()
                break

        # –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
        if not template_text:
            templates = [
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤! –ú—ã –æ—á–µ–Ω—å —Ä–∞–¥—ã, —á—Ç–æ –≤—ã –æ—Å—Ç–∞–ª–∏—Å—å –¥–æ–≤–æ–ª—å–Ω—ã –Ω–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏. –ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞!",
                "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –æ—Ç–∑—ã–≤ –∏ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å. –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ –∏ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º –Ω–∞—à–∏—Ö —É—Å–ª—É–≥. –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞.",
                "–ü—Ä–∏–Ω–æ—Å–∏–º –∏—Å–∫—Ä–µ–Ω–Ω–∏–µ –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –≤–æ–∑–Ω–∏–∫—à–∏–µ –ø—Ä–æ–±–ª–µ–º—ã. –ú—ã —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è —Å —Å–∏—Ç—É–∞—Ü–∏–µ–π –∏ —Å–¥–µ–ª–∞–µ–º –≤—Å—ë –≤–æ–∑–º–æ–∂–Ω–æ–µ, —á—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å –≤–æ–ø—Ä–æ—Å –≤ –∫—Ä–∞—Ç—á–∞–π—à–∏–µ —Å—Ä–æ–∫–∏.",
                "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ. –í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å. –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á—Ç–µ–º –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –≤ –Ω–∞—à–µ–π –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç–µ."
            ]

            if template_index <= len(templates):
                template_text = templates[template_index - 1]

        # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω
        client_name = self.detail_client_name.text().strip()
        if client_name:
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏
            if "!" in template_text and not template_text.startswith(f"{client_name},"):
                template_text = f"{client_name}, " + template_text[0].lower() + template_text[1:]
            else:
                template_text = f"{client_name}, " + template_text

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ –æ—Ç–≤–µ—Ç–∞
        self.detail_response.setText(template_text)

    def update_review_status(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–∑—ã–≤–∞"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
        row = self.reviews_table.currentRow()
        if row < 0:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–∑—ã–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
            return

        # –ü–æ–ª—É—á–∞–µ–º ID –æ—Ç–∑—ã–≤–∞
        review_id = self.reviews_table.item(row, 0).data(Qt.UserRole)

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        status_index = self.detail_status.currentIndex()
        status_map = ["pending", "approved", "rejected"]
        new_status = status_map[status_index]

        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
            reviews_table = DB_TABLES['reviews']['name']
            query = f"UPDATE {reviews_table} SET status = %s WHERE id = %s"
            self.cursor.execute(query, (new_status, review_id))
            self.db_connection.commit()

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
            status_item = QTableWidgetItem(new_status)

            # –¶–≤–µ—Ç–æ–≤–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
            if new_status == 'approved':
                status_item.setBackground(QColor(200, 255, 200))
            elif new_status == 'pending':
                status_item.setBackground(QColor(255, 255, 200))
            elif new_status == 'rejected':
                status_item.setBackground(QColor(255, 200, 200))

            self.reviews_table.setItem(row, 4, status_item)

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            self.statusBar().showMessage(f"–°—Ç–∞—Ç—É—Å –æ—Ç–∑—ã–≤–∞ #{review_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_status}")

        except mysql.connector.Error as e:
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç–∑—ã–≤–∞: {e}"
            )

    def save_review_response(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Ç–∑—ã–≤"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
        row = self.reviews_table.currentRow()
        if row < 0:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–∑—ã–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞")
            return

        # –ü–æ–ª—É—á–∞–µ–º ID –æ—Ç–∑—ã–≤–∞
        review_id = self.reviews_table.item(row, 0).data(Qt.UserRole)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        response_text = self.detail_response.toPlainText().strip()

        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –ë–î
            reviews_table = DB_TABLES['reviews']['name']
            query = f"UPDATE {reviews_table} SET response = %s WHERE id = %s"
            self.cursor.execute(query, (response_text, review_id))
            self.db_connection.commit()

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            self.statusBar().showMessage(f"–û—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤ #{review_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

        except mysql.connector.Error as e:
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤: {e}"
            )

    def send_review_response(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Ç–∑—ã–≤ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ + –æ—Ç–ø—Ä–∞–≤–∫–∞)"""
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        self.save_review_response()

        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
        row = self.reviews_table.currentRow()
        if row < 0:
            return

        # –ü–æ–ª—É—á–∞–µ–º ID –æ—Ç–∑—ã–≤–∞
        review_id = self.reviews_table.item(row, 0).data(Qt.UserRole)

        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–∑–æ–≤ API –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ email

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        QMessageBox.information(
            self,
            "–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞",
            f"–û—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤ #{review_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É"
        )

    def update_review_reaction(self, likes, dislikes):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–π (–ª–∞–π–∫–∏/–¥–∏–∑–ª–∞–π–∫–∏) –Ω–∞ –æ—Ç–∑—ã–≤"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
        row = self.reviews_table.currentRow()
        if row < 0:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–∑—ã–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–π")
            return

        # –ü–æ–ª—É—á–∞–µ–º ID –æ—Ç–∑—ã–≤–∞
        review_id = self.reviews_table.item(row, 0).data(Qt.UserRole)

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–π
            reviews_table = DB_TABLES['reviews']['name']
            query = f"SELECT likes, dislikes FROM {reviews_table} WHERE id = %s"
            self.cursor.execute(query, (review_id,))
            result = self.cursor.fetchone()

            if not result:
                return

            current_likes = result['likes'] or 0
            current_dislikes = result['dislikes'] or 0

            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
            new_likes = current_likes + likes
            new_dislikes = current_dislikes + dislikes

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
            query = f"UPDATE {reviews_table} SET likes = %s, dislikes = %s WHERE id = %s"
            self.cursor.execute(query, (new_likes, new_dislikes, review_id))
            self.db_connection.commit()

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            if likes > 0:
                self.statusBar().showMessage(f"–õ–∞–π–∫ –¥–æ–±–∞–≤–ª–µ–Ω –∫ –æ—Ç–∑—ã–≤—É #{review_id}. –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {new_likes}")
            else:
                self.statusBar().showMessage(
                    f"–î–∏–∑–ª–∞–π–∫ –¥–æ–±–∞–≤–ª–µ–Ω –∫ –æ—Ç–∑—ã–≤—É #{review_id}. –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {new_dislikes}")

        except mysql.connector.Error as e:
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏–∏: {e}"
            )

    def delete_current_review(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç–∑—ã–≤–∞"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
        row = self.reviews_table.currentRow()
        if row < 0:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–∑—ã–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        # –ü–æ–ª—É—á–∞–µ–º ID –æ—Ç–∑—ã–≤–∞
        review_id = self.reviews_table.item(row, 0).data(Qt.UserRole)

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        reply = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤ #{review_id}?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )

        if reply == QMessageBox.No:
            return

        try:
            # –£–¥–∞–ª—è–µ–º –æ—Ç–∑—ã–≤ –∏–∑ –ë–î
            reviews_table = DB_TABLES['reviews']['name']
            query = f"DELETE FROM {reviews_table} WHERE id = %s"
            self.cursor.execute(query, (review_id,))
            self.db_connection.commit()

            # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            self.reviews_table.removeRow(row)

            # –û—á–∏—â–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—Ç–∑—ã–≤–∞
            self.review_detail_title.setText("–î–µ—Ç–∞–ª–∏ –æ—Ç–∑—ã–≤–∞")
            self.detail_client_name.setText("")
            self.detail_client_order.setText("")
            self.detail_service.setText("")
            self.detail_date.setText("")
            self.detail_rating.setText("‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ")
            self.detail_text.setText("")
            self.detail_response.setText("")

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            self.statusBar().showMessage(f"–û—Ç–∑—ã–≤ #{review_id} —É–¥–∞–ª–µ–Ω")

        except mysql.connector.Error as e:
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤: {e}"
            )

    # === –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ ===

    def load_contacts(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if not hasattr(self, 'cursor') or not self.db_connection.is_connected():
                self.init_database()

            # –ü–æ–ª—É—á–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
            contacts_table = DB_TABLES['contacts']['name']

            # –§–æ—Ä–º–∏—Ä—É–µ–º SQL-–∑–∞–ø—Ä–æ—Å
            query = f"SELECT * FROM {contacts_table} ORDER BY date DESC"

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            self.cursor.execute(query)
            contacts = self.cursor.fetchall()

            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            self.contacts_table.setRowCount(0)  # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É

            for row, contact in enumerate(contacts):
                self.contacts_table.insertRow(row)

                # ID
                id_item = QTableWidgetItem(str(contact['id']))
                id_item.setData(Qt.UserRole, contact['id'])
                self.contacts_table.setItem(row, 0, id_item)

                # –ò–º—è
                name_item = QTableWidgetItem(contact['name'])
                self.contacts_table.setItem(row, 1, name_item)

                # Email
                email_item = QTableWidgetItem(contact['email'])
                self.contacts_table.setItem(row, 2, email_item)

                # –î–∞—Ç–∞
                if isinstance(contact['date'], datetime):
                    date_str = contact['date'].strftime("%d.%m.%Y %H:%M")
                else:
                    date_str = str(contact['date'])
                date_item = QTableWidgetItem(date_str)
                self.contacts_table.setItem(row, 3, date_item)

                # –°—Ç–∞—Ç—É—Å
                status_item = QTableWidgetItem(contact['status'])

                # –¶–≤–µ—Ç–æ–≤–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
                if contact['status'] == 'new' or contact['status'] == '–ù–æ–≤—ã–π':
                    status_item.setBackground(QColor(255, 255, 200))  # –°–≤–µ—Ç–ª–æ-–∂–µ–ª—Ç—ã–π
                elif contact['status'] == 'in_progress' or contact['status'] == '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ':
                    status_item.setBackground(QColor(200, 200, 255))  # –°–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π
                elif contact['status'] == 'completed' or contact['status'] == '–ó–∞–≤–µ—Ä—à–µ–Ω':
                    status_item.setBackground(QColor(200, 255, 200))  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π
                elif contact['status'] == 'rejected' or contact['status'] == '–û—Ç–∫–ª–æ–Ω–µ–Ω':
                    status_item.setBackground(QColor(255, 200, 200))  # –°–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π

                self.contacts_table.setItem(row, 4, status_item)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.contacts_table.resizeColumnsToContents()
            self.statusBar().showMessage(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(contacts)} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")

        except mysql.connector.Error as e:
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã: {e}"
            )

    def show_contact_details(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
        row = self.contacts_table.currentRow()
        if row < 0:
            return

        # –ü–æ–ª—É—á–∞–µ–º ID –∫–æ–Ω—Ç–∞–∫—Ç–∞
        contact_id = self.contacts_table.item(row, 0).data(Qt.UserRole)

        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–∑ –ë–î
            contacts_table = DB_TABLES['contacts']['name']
            query = f"SELECT * FROM {contacts_table} WHERE id = %s"
            self.cursor.execute(query, (contact_id,))
            contact = self.cursor.fetchone()

            if not contact:
                return

            # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –¥–µ—Ç–∞–ª–µ–π
            self.contact_detail_title.setText(f"–ö–æ–Ω—Ç–∞–∫—Ç #{contact['id']}")
            self.detail_contact_name.setText(contact['name'])
            self.detail_contact_email.setText(contact['email'])
            self.detail_contact_phone.setText(contact['phone'] if contact['phone'] else '–ù–µ —É–∫–∞–∑–∞–Ω–æ')

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            if isinstance(contact['date'], datetime):
                formatted_date = contact['date'].strftime("%d.%m.%Y %H:%M:%S")
            else:
                formatted_date = str(contact['date'])
            self.detail_contact_date.setText(formatted_date)

            # –°–æ–æ–±—â–µ–Ω–∏–µ
            self.detail_contact_message.setText(contact['message'] if contact['message'] else '')

            # –°—Ç–∞—Ç—É—Å
            status_index = 0
            status = contact['status']
            if status == 'in_progress' or status == '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ':
                status_index = 1
            elif status == 'completed' or status == '–ó–∞–≤–µ—Ä—à–µ–Ω':
                status_index = 2
            elif status == 'rejected' or status == '–û—Ç–∫–ª–æ–Ω–µ–Ω':
                status_index = 3
            self.detail_contact_status.setCurrentIndex(status_index)

        except mysql.connector.Error as e:
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}"
            )

    def apply_contact_filters(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ —Å–ø–∏—Å–∫—É –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
            status_filter = self.contact_status_filter.currentText()

            # –§–æ—Ä–º–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏—è SQL-–∑–∞–ø—Ä–æ—Å–∞
            conditions = []
            params = []

            if status_filter != "–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã":
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è SQL-–∑–∞–ø—Ä–æ—Å–∞
                status_map = {
                    "–ù–æ–≤—ã–µ": "new",
                    "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ": "in_progress",
                    "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ": "completed",
                    "–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ": "rejected"
                }
                db_status = status_map.get(status_filter, status_filter)
                conditions.append("status = %s")
                params.append(db_status)

            # –§–æ—Ä–º–∏—Ä—É–µ–º SQL-–∑–∞–ø—Ä–æ—Å
            contacts_table = DB_TABLES['contacts']['name']
            query = f"SELECT * FROM {contacts_table}"

            if conditions:
                query += " WHERE " + " AND ".join(conditions)

            query += " ORDER BY date DESC"

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            self.cursor.execute(query, params)
            contacts = self.cursor.fetchall()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            self.contacts_table.setRowCount(0)

            for row, contact in enumerate(contacts):
                self.contacts_table.insertRow(row)

                # ID
                id_item = QTableWidgetItem(str(contact['id']))
                id_item.setData(Qt.UserRole, contact['id'])
                self.contacts_table.setItem(row, 0, id_item)

                # –ò–º—è
                name_item = QTableWidgetItem(contact['name'])
                self.contacts_table.setItem(row, 1, name_item)

                # Email
                email_item = QTableWidgetItem(contact['email'])
                self.contacts_table.setItem(row, 2, email_item)

                # –î–∞—Ç–∞
                if isinstance(contact['date'], datetime):
                    date_str = contact['date'].strftime("%d.%m.%Y %H:%M")
                else:
                    date_str = str(contact['date'])
                date_item = QTableWidgetItem(date_str)
                self.contacts_table.setItem(row, 3, date_item)

                # –°—Ç–∞—Ç—É—Å
                status_item = QTableWidgetItem(contact['status'])

                # –¶–≤–µ—Ç–æ–≤–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
                if contact['status'] == 'new' or contact['status'] == '–ù–æ–≤—ã–π':
                    status_item.setBackground(QColor(255, 255, 200))
                elif contact['status'] == 'in_progress' or contact['status'] == '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ':
                    status_item.setBackground(QColor(200, 200, 255))
                elif contact['status'] == 'completed' or contact['status'] == '–ó–∞–≤–µ—Ä—à–µ–Ω':
                    status_item.setBackground(QColor(200, 255, 200))
                elif contact['status'] == 'rejected' or contact['status'] == '–û—Ç–∫–ª–æ–Ω–µ–Ω':
                    status_item.setBackground(QColor(255, 200, 200))

                self.contacts_table.setItem(row, 4, status_item)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É
            self.statusBar().showMessage(f"–ù–∞–π–¥–µ–Ω–æ {len(contacts)} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")

        except mysql.connector.Error as e:
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã: {e}"
            )

    def search_contacts(self, text):
        """–ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç—É"""
        try:
            if not text.strip():
                # –ï—Å–ª–∏ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç–æ–µ, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                self.load_contacts()
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º SQL-–∑–∞–ø—Ä–æ—Å —Å –ø–æ–∏—Å–∫–æ–º
            contacts_table = DB_TABLES['contacts']['name']
            search_pattern = f"%{text}%"

            query = f"""
                SELECT * FROM {contacts_table} 
                WHERE name LIKE %s 
                OR email LIKE %s 
                OR phone LIKE %s 
                OR message LIKE %s
                ORDER BY date DESC
            """

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            self.cursor.execute(query, (search_pattern, search_pattern, search_pattern, search_pattern))
            contacts = self.cursor.fetchall()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            self.contacts_table.setRowCount(0)

            for row, contact in enumerate(contacts):
                self.contacts_table.insertRow(row)

                # ID
                id_item = QTableWidgetItem(str(contact['id']))
                id_item.setData(Qt.UserRole, contact['id'])
                self.contacts_table.setItem(row, 0, id_item)

                # –ò–º—è
                name_item = QTableWidgetItem(contact['name'])
                self.contacts_table.setItem(row, 1, name_item)

                # Email
                email_item = QTableWidgetItem(contact['email'])
                self.contacts_table.setItem(row, 2, email_item)

                # –î–∞—Ç–∞
                if isinstance(contact['date'], datetime):
                    date_str = contact['date'].strftime("%d.%m.%Y %H:%M")
                else:
                    date_str = str(contact['date'])
                date_item = QTableWidgetItem(date_str)
                self.contacts_table.setItem(row, 3, date_item)

                # –°—Ç–∞—Ç—É—Å
                status_item = QTableWidgetItem(contact['status'])

                # –¶–≤–µ—Ç–æ–≤–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
                if contact['status'] == 'new' or contact['status'] == '–ù–æ–≤—ã–π':
                    status_item.setBackground(QColor(255, 255, 200))
                elif contact['status'] == 'in_progress' or contact['status'] == '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ':
                    status_item.setBackground(QColor(200, 200, 255))
                elif contact['status'] == 'completed' or contact['status'] == '–ó–∞–≤–µ—Ä—à–µ–Ω':
                    status_item.setBackground(QColor(200, 255, 200))
                elif contact['status'] == 'rejected' or contact['status'] == '–û—Ç–∫–ª–æ–Ω–µ–Ω':
                    status_item.setBackground(QColor(255, 200, 200))

                self.contacts_table.setItem(row, 4, status_item)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É
            self.statusBar().showMessage(f"–ù–∞–π–¥–µ–Ω–æ {len(contacts)} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")

        except mysql.connector.Error as e:
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫: {e}"
            )

    def update_contact_status(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
        row = self.contacts_table.currentRow()
        if row < 0:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
            return

        # –ü–æ–ª—É—á–∞–µ–º ID –∫–æ–Ω—Ç–∞–∫—Ç–∞
        contact_id = self.contacts_table.item(row, 0).data(Qt.UserRole)

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        status_index = self.detail_contact_status.currentIndex()
        status_map = ["new", "in_progress", "completed", "rejected"]
        new_status = status_map[status_index]

        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
            contacts_table = DB_TABLES['contacts']['name']
            query = f"UPDATE {contacts_table} SET status = %s WHERE id = %s"
            self.cursor.execute(query, (new_status, contact_id))
            self.db_connection.commit()

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
            status_item = QTableWidgetItem(new_status)

            # –¶–≤–µ—Ç–æ–≤–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
            if new_status == 'new':
                status_item.setBackground(QColor(255, 255, 200))
            elif new_status == 'in_progress':
                status_item.setBackground(QColor(200, 200, 255))
            elif new_status == 'completed':
                status_item.setBackground(QColor(200, 255, 200))
            elif new_status == 'rejected':
                status_item.setBackground(QColor(255, 200, 200))

            self.contacts_table.setItem(row, 4, status_item)

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            self.statusBar().showMessage(f"–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞ #{contact_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_status}")

        except mysql.connector.Error as e:
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}"
            )

    def send_email_to_contact(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç—É —á–µ—Ä–µ–∑ WhatsApp –∏–ª–∏ Email"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
        row = self.contacts_table.currentRow()
        if row < 0:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        email = self.detail_contact_email.text()
        phone = self.detail_contact_phone.text().replace(' ', '').replace('-', '').replace('+', '')
        name = self.detail_contact_name.text()

        if not email and not phone:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                                "–£ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç email –∏ —Ç–µ–ª–µ—Ñ–æ–Ω")
            return

        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ —Å–≤—è–∑–∏
        from PyQt5.QtWidgets import QDialog, QVBoxLayout, QPushButton, QLabel, QHBoxLayout
        from PyQt5.QtCore import Qt

        dialog = QDialog(self)
        dialog.setWindowTitle("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏")
        dialog.setFixedWidth(400)

        layout = QVBoxLayout(dialog)

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏ —Å –∫–ª–∏–µ–Ω—Ç–æ–º:")
        title.setAlignment(Qt.AlignCenter)
        title.setStyleSheet("font-size: 14px; font-weight: bold; margin-bottom: 15px;")
        layout.addWidget(title)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ
        contact_info = QLabel(f"–ò–º—è: {name}")
        layout.addWidget(contact_info)

        buttons_layout = QHBoxLayout()

        # –ö–Ω–æ–ø–∫–∞ WhatsApp
        whatsapp_btn = QPushButton("WhatsApp")
        whatsapp_btn.setStyleSheet("""
            QPushButton {
                background-color: #25D366;
                color: white;
                border-radius: 4px;
                padding: 10px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #128C7E;
            }
        """)

        # –ö–Ω–æ–ø–∫–∞ Email
        email_btn = QPushButton("Email")
        email_btn.setStyleSheet("""
            QPushButton {
                background-color: #4285F4;
                color: white;
                border-radius: 4px;
                padding: 10px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #0D47A1;
            }
        """)

        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        if not phone:
            whatsapp_btn.setEnabled(False)
            whatsapp_btn.setToolTip("–ù–µ—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")

        if not email:
            email_btn.setEnabled(False)
            email_btn.setToolTip("–ù–µ—Ç –∞–¥—Ä–µ—Å–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã")

        buttons_layout.addWidget(whatsapp_btn)
        buttons_layout.addWidget(email_btn)

        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        cancel_btn = QPushButton("–û—Ç–º–µ–Ω–∞")

        layout.addLayout(buttons_layout)
        layout.addWidget(cancel_btn)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        cancel_btn.clicked.connect(dialog.reject)

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ WhatsApp
        def open_whatsapp():
            try:
                import webbrowser

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                message = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}! –í—ã –æ—Å—Ç–∞–≤–ª—è–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ. –ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?"

                # –û—á–∏—â–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –æ—Ç –≤—Å–µ—Ö –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
                import re
                clean_phone = re.sub(r'\D', '', phone)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –µ—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è, –º–µ–Ω—è–µ–º –Ω–∞ 7
                if clean_phone.startswith('8') and len(clean_phone) == 11:
                    clean_phone = '7' + clean_phone[1:]

                # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è URL –¥–ª—è WhatsApp
                # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º URL-–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ç.–∫. WhatsApp Web API –º–æ–∂–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –µ–≥–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
                url = f"https://api.whatsapp.com/send?phone={clean_phone}&text={message}"

                # –í—ã–≤–æ–¥–∏–º URL –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                print(f"Opening WhatsApp URL: {url}")

                webbrowser.open(url)
                dialog.accept()
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å WhatsApp: {str(e)}")

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ Email
        def open_email():
            try:
                import webbrowser
                import urllib.parse

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–º—É –∏ —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ —Å –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å—å—é
                subject = "–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ"
                body = f"""–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}!

    –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ. –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É –∏ –≥–æ—Ç–æ–≤—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.

    –° —É–≤–∞–∂–µ–Ω–∏–µ–º,
    –ì—É—Ä–±–∞–Ω–º—ã—Ä–∞–¥–æ–≤ –ú—É–∫–∞–º –†–æ–≤—à–µ–Ω–æ–≤–∏—á –∏ –µ–≥–æ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –û–û–û MPSP 2017-2025"""

                # URL-encode —Ç–µ–º—ã –∏ —Ç–µ–∫—Å—Ç–∞
                encoded_subject = urllib.parse.quote(subject)
                encoded_body = urllib.parse.quote(body)

                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—á—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç —Å –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
                url = f"mailto:{email}?subject={encoded_subject}&body={encoded_body}"
                webbrowser.open(url)
                dialog.accept()
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–æ—á—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç: {str(e)}")

        # –°–≤—è–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        whatsapp_btn.clicked.connect(open_whatsapp)
        email_btn.clicked.connect(open_email)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
        dialog.exec_()
    def delete_current_contact(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
        row = self.contacts_table.currentRow()
        if row < 0:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        # –ü–æ–ª—É—á–∞–µ–º ID –∫–æ–Ω—Ç–∞–∫—Ç–∞
        contact_id = self.contacts_table.item(row, 0).data(Qt.UserRole)

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        reply = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç #{contact_id}?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )

        if reply == QMessageBox.No:
            return

        try:
            # –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –∏–∑ –ë–î
            contacts_table = DB_TABLES['contacts']['name']
            query = f"DELETE FROM {contacts_table} WHERE id = %s"
            self.cursor.execute(query, (contact_id,))
            self.db_connection.commit()

            # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            self.contacts_table.removeRow(row)

            # –û—á–∏—â–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
            self.contact_detail_title.setText("–î–µ—Ç–∞–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞")
            self.detail_contact_name.setText("")
            self.detail_contact_email.setText("")
            self.detail_contact_phone.setText("")
            self.detail_contact_date.setText("")
            self.detail_contact_message.setText("")

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            self.statusBar().showMessage(f"–ö–æ–Ω—Ç–∞–∫—Ç #{contact_id} —É–¥–∞–ª–µ–Ω")

        except mysql.connector.Error as e:
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç: {e}"
            )

    def process_selected_contacts(self):
        """–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ'"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        selected_rows = set()
        for item in self.contacts_table.selectedItems():
            selected_rows.add(item.row())

        if not selected_rows:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return

        try:
            contacts_table = DB_TABLES['contacts']['name']

            for row in selected_rows:
                # –ü–æ–ª—É—á–∞–µ–º ID –∫–æ–Ω—Ç–∞–∫—Ç–∞
                contact_id = self.contacts_table.item(row, 0).data(Qt.UserRole)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
                query = f"UPDATE {contacts_table} SET status = 'in_progress' WHERE id = %s"
                self.cursor.execute(query, (contact_id,))

                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
                status_item = QTableWidgetItem("in_progress")
                status_item.setBackground(QColor(200, 200, 255))
                self.contacts_table.setItem(row, 4, status_item)

            # –§–∏–∫—Å–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            self.db_connection.commit()

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            self.statusBar().showMessage(f"{len(selected_rows)} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ —Å—Ç–∞—Ç—É—Å '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ'")

        except mysql.connector.Error as e:
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {e}"
            )

    def reject_selected_contacts(self):
        """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        selected_rows = set()
        for item in self.contacts_table.selectedItems():
            selected_rows.add(item.row())

        if not selected_rows:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è")
            return

        try:
            contacts_table = DB_TABLES['contacts']['name']

            for row in selected_rows:
                # –ü–æ–ª—É—á–∞–µ–º ID –∫–æ–Ω—Ç–∞–∫—Ç–∞
                contact_id = self.contacts_table.item(row, 0).data(Qt.UserRole)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
                query = f"UPDATE {contacts_table} SET status = 'rejected' WHERE id = %s"
                self.cursor.execute(query, (contact_id,))

                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
                status_item = QTableWidgetItem("rejected")
                status_item.setBackground(QColor(255, 200, 200))
                self.contacts_table.setItem(row, 4, status_item)

            # –§–∏–∫—Å–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            self.db_connection.commit()

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            self.statusBar().showMessage(f"{len(selected_rows)} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")

        except mysql.connector.Error as e:
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã: {e}"
            )

    def delete_selected_reviews(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        selected_rows = set()
        for item in self.reviews_table.selectedItems():
            selected_rows.add(item.row())

        if not selected_rows:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–∑—ã–≤—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        reply = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å {len(selected_rows)} –æ—Ç–∑—ã–≤–æ–≤?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )

        if reply == QMessageBox.No:
            return

        try:
            reviews_table = DB_TABLES['reviews']['name']

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ–±—ã –Ω–µ —Å–±–∏–≤–∞–ª–∞—Å—å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
            for row in sorted(selected_rows, reverse=True):
                # –ü–æ–ª—É—á–∞–µ–º ID –æ—Ç–∑—ã–≤–∞
                review_id = self.reviews_table.item(row, 0).data(Qt.UserRole)

                # –£–¥–∞–ª—è–µ–º –æ—Ç–∑—ã–≤ –∏–∑ –ë–î
                query = f"DELETE FROM {reviews_table} WHERE id = %s"
                self.cursor.execute(query, (review_id,))

                # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
                self.reviews_table.removeRow(row)

            # –§–∏–∫—Å–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            self.db_connection.commit()

            # –û—á–∏—â–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—Ç–∑—ã–≤–∞, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –æ—Ç–∑—ã–≤ –±—ã–ª —É–¥–∞–ª–µ–Ω
            if self.reviews_table.currentRow() < 0:
                self.review_detail_title.setText("–î–µ—Ç–∞–ª–∏ –æ—Ç–∑—ã–≤–∞")
                self.detail_client_name.setText("")
                self.detail_client_order.setText("")
                self.detail_service.setText("")
                self.detail_date.setText("")
                self.detail_rating.setText("‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ")
                self.detail_text.setText("")
                self.detail_response.setText("")

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            self.statusBar().showMessage(f"–£–¥–∞–ª–µ–Ω–æ {len(selected_rows)} –æ—Ç–∑—ã–≤–æ–≤")

        except mysql.connector.Error as e:
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤—ã: {e}"
            )

    def delete_selected_contacts(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        selected_rows = set()
        for item in self.contacts_table.selectedItems():
            selected_rows.add(item.row())

        if not selected_rows:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        reply = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å {len(selected_rows)} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )

        if reply == QMessageBox.No:
            return

        try:
            contacts_table = DB_TABLES['contacts']['name']

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ–±—ã –Ω–µ —Å–±–∏–≤–∞–ª–∞—Å—å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
            for row in sorted(selected_rows, reverse=True):
                # –ü–æ–ª—É—á–∞–µ–º ID –∫–æ–Ω—Ç–∞–∫—Ç–∞
                contact_id = self.contacts_table.item(row, 0).data(Qt.UserRole)

                # –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –∏–∑ –ë–î
                query = f"DELETE FROM {contacts_table} WHERE id = %s"
                self.cursor.execute(query, (contact_id,))

                # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
                self.contacts_table.removeRow(row)

            # –§–∏–∫—Å–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            self.db_connection.commit()

            # –û—á–∏—â–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–∞–∫—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω
            if self.contacts_table.currentRow() < 0:
                self.contact_detail_title.setText("–î–µ—Ç–∞–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞")
                self.detail_contact_name.setText("")
                self.detail_contact_email.setText("")
                self.detail_contact_phone.setText("")
                self.detail_contact_date.setText("")
                self.detail_contact_message.setText("")

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            self.statusBar().showMessage(f"–£–¥–∞–ª–µ–Ω–æ {len(selected_rows)} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")

        except mysql.connector.Error as e:
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã: {e}"
            )
    def approve_selected_reviews(self):
        """–û–¥–æ–±—Ä–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        selected_rows = set()
        for item in self.reviews_table.selectedItems():
            selected_rows.add(item.row())

        if not selected_rows:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–∑—ã–≤—ã –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è")
            return

        try:
            reviews_table = DB_TABLES['reviews']['name']

            for row in selected_rows:
                # –ü–æ–ª—É—á–∞–µ–º ID –æ—Ç–∑—ã–≤–∞
                review_id = self.reviews_table.item(row, 0).data(Qt.UserRole)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
                query = f"UPDATE {reviews_table} SET status = 'approved' WHERE id = %s"
                self.cursor.execute(query, (review_id,))

                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
                status_item = QTableWidgetItem("approved")
                status_item.setBackground(QColor(200, 255, 200))
                self.reviews_table.setItem(row, 4, status_item)

            # –§–∏–∫—Å–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            self.db_connection.commit()

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            self.statusBar().showMessage(f"–û–¥–æ–±—Ä–µ–Ω–æ {len(selected_rows)} –æ—Ç–∑—ã–≤–æ–≤")

        except mysql.connector.Error as e:
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–¥–æ–±—Ä–∏—Ç—å –æ—Ç–∑—ã–≤—ã: {e}"
            )

    def reject_selected_reviews(self):
        """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        selected_rows = set()
        for item in self.reviews_table.selectedItems():
            selected_rows.add(item.row())

        if not selected_rows:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–∑—ã–≤—ã –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è")
            return

        try:
            reviews_table = DB_TABLES['reviews']['name']

            for row in selected_rows:
                # –ü–æ–ª—É—á–∞–µ–º ID –æ—Ç–∑—ã–≤–∞
                review_id = self.reviews_table.item(row, 0).data(Qt.UserRole)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
                query = f"UPDATE {reviews_table} SET status = 'rejected' WHERE id = %s"
                self.cursor.execute(query, (review_id,))

                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
                status_item = QTableWidgetItem("rejected")
                status_item.setBackground(QColor(255, 200, 200))
                self.reviews_table.setItem(row, 4, status_item)

            # –§–∏–∫—Å–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            self.db_connection.commit()

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            self.statusBar().showMessage(f"–û—Ç–∫–ª–æ–Ω–µ–Ω–æ {len(selected_rows)} –æ—Ç–∑—ã–≤–æ–≤")

        except mysql.connector.Error as e:
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –æ—Ç–∑—ã–≤—ã: {e}"
            )


    def execute_sql_query(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞"""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
        query = self.sql_query_edit.toPlainText().strip()
        if not query:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ SQL-–∑–∞–ø—Ä–æ—Å")
            return

        try:
            # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –æ—à–∏–±–∫–∏
            self.sql_results_table.setRowCount(0)
            self.sql_results_table.setColumnCount(0)
            self.sql_error_label.setText("")

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            self.cursor.execute(query)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
            if query.strip().upper().startswith(("SELECT", "SHOW")):
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞
                results = self.cursor.fetchall()

                if not results:
                    self.sql_error_label.setText("–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
                    return

                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                columns = results[0].keys()
                self.sql_results_table.setColumnCount(len(columns))
                self.sql_results_table.setHorizontalHeaderLabels(columns)

                # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã–º–∏
                for row, data in enumerate(results):
                    self.sql_results_table.insertRow(row)
                    for col, column in enumerate(columns):
                        value = data[column]

                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        if value is None:
                            display_value = "NULL"
                        elif isinstance(value, datetime):
                            display_value = value.strftime("%Y-%m-%d %H:%M:%S")
                        else:
                            display_value = str(value)

                        item = QTableWidgetItem(display_value)
                        self.sql_results_table.setItem(row, col, item)

                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
                self.sql_results_table.resizeColumnsToContents()
                self.statusBar().showMessage(f"–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. –ü–æ–ª—É—á–µ–Ω–æ {len(results)} –∑–∞–ø–∏—Å–µ–π.")
            else:
                # –î–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –¥–∞–Ω–Ω—ã–µ (INSERT, UPDATE, DELETE –∏ —Ç.–¥.)
                self.db_connection.commit()
                rows_affected = self.cursor.rowcount
                self.sql_error_label.setText(f"–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ —Å—Ç—Ä–æ–∫: {rows_affected}")
                self.statusBar().showMessage(f"–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ —Å—Ç—Ä–æ–∫: {rows_affected}")

        except mysql.connector.Error as e:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—à–∏–±–∫—É
            self.sql_error_label.setText(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
            self.statusBar().showMessage("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞")

    def clear_sql_query(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è SQL-–∑–∞–ø—Ä–æ—Å–∞"""
        self.sql_query_edit.clear()

    def apply_sql_template(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ SQL-–∑–∞–ø—Ä–æ—Å–∞"""
        template_index = self.sql_templates.currentIndex()
        if template_index == 0:
            return  # –ù–µ –≤—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞
        templates = [
            "",  # –ü—É—Å—Ç–æ–π —à–∞–±–ª–æ–Ω –¥–ª—è "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω"
            f"SELECT * FROM {DB_TABLES['reviews']['name']} LIMIT 100",
            f"SELECT * FROM {DB_TABLES['contacts']['name']} LIMIT 100",
            f"SELECT status, COUNT(*) as count FROM {DB_TABLES['reviews']['name']} GROUP BY status",
            f"SELECT status, COUNT(*) as count FROM {DB_TABLES['contacts']['name']} GROUP BY status",
            """CREATE TABLE example_table (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    description TEXT,
    created_date DATETIME DEFAULT CURRENT_TIMESTAMP
)"""
        ]

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
        if template_index < len(templates):
            self.sql_query_edit.setText(templates[template_index])

        # === –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ ===

    def test_database_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
            host = self.db_host.text().strip()
            user = self.db_user.text().strip()
            password = self.db_password.text()
            database = self.db_name.text().strip()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            if not host or not user or not database:
                QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
                return

            # –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            connection = mysql.connector.connect(
                host=host,
                user=user,
                password=password,
                database=database
            )

            if connection.is_connected():
                server_info = connection.get_server_info()
                cursor = connection.cursor()
                cursor.execute("SELECT DATABASE()")
                db_name = cursor.fetchone()[0]

                QMessageBox.information(
                    self,
                    "–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
                    f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
                    f"–°–µ—Ä–≤–µ—Ä MySQL: {server_info}\n"
                    f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_name}"
                )

                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                cursor.close()
                connection.close()

        except mysql.connector.Error as e:
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:\n\n{e}"
            )

    def add_response_template_row(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É —à–∞–±–ª–æ–Ω–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤"""
        row = self.templates_table.rowCount()
        self.templates_table.insertRow(row)
        self.templates_table.setItem(row, 0, QTableWidgetItem("–ù–æ–≤—ã–π —à–∞–±–ª–æ–Ω"))
        self.templates_table.setItem(row, 1, QTableWidgetItem("–¢–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞"))

    def delete_response_template_row(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —à–∞–±–ª–æ–Ω–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤"""
        row = self.templates_table.currentRow()
        if row >= 0:
            self.templates_table.removeRow(row)

    def save_response_templates(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –≤ –ë–î –∏–ª–∏ —Ñ–∞–π–ª
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        QMessageBox.information(
            self,
            "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤",
            "–®–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –≤ –∫–æ–º–±–æ–±–æ–∫—Å–µ
        self.response_template.clear()
        self.response_template.addItem("–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω")

        for row in range(self.templates_table.rowCount()):
            template_name = self.templates_table.item(row, 0).text()
            self.response_template.addItem(template_name)

    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
        db_settings = {
            'host': self.db_host.text().strip(),
            'user': self.db_user.text().strip(),
            'password': self.db_password.text(),
            'database': self.db_name.text().strip(),
            'charset': 'utf8mb4'
        }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if not db_settings['host'] or not db_settings['user'] or not db_settings['database']:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        global DB_CONFIG
        DB_CONFIG.update(db_settings)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        refresh_interval = self.refresh_interval.value()
        self.update_timer.setInterval(refresh_interval * 1000)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫

        QMessageBox.information(
            self,
            "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫",
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"
        )

        # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        try:
            if hasattr(self, 'db_connection') and self.db_connection.is_connected():
                self.cursor.close()
                self.db_connection.close()

            self.init_database()
            self.load_reviews()
            self.load_contacts()

        except mysql.connector.Error as e:
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:\n\n{e}"
            )

    def reset_settings(self):
        """–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        reply = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞",
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )

        if reply == QMessageBox.No:
            return

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î
        self.db_host.setText('mpsp.online')
        self.db_user.setText(DB_CONFIG['user'])
        self.db_password.setText(DB_CONFIG['password'])
        self.db_name.setText(DB_CONFIG['database'])

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.refresh_interval.setValue(60)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.show_notifications.setChecked(True)
        self.sound_notifications.setChecked(True)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —à–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤
        self.templates_table.setRowCount(4)

        templates = [
            ("–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∑–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤",
             "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤! –ú—ã –æ—á–µ–Ω—å —Ä–∞–¥—ã, —á—Ç–æ –≤—ã –æ—Å—Ç–∞–ª–∏—Å—å –¥–æ–≤–æ–ª—å–Ω—ã –Ω–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏. –ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞!"),
            ("–û—Ç–≤–µ—Ç –Ω–∞ –∫—Ä–∏—Ç–∏–∫—É",
             "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –æ—Ç–∑—ã–≤ –∏ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å. –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ –∏ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º –Ω–∞—à–∏—Ö —É—Å–ª—É–≥. –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞."),
            ("–ò–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –ø—Ä–æ–±–ª–µ–º—É",
             "–ü—Ä–∏–Ω–æ—Å–∏–º –∏—Å–∫—Ä–µ–Ω–Ω–∏–µ –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –≤–æ–∑–Ω–∏–∫—à–∏–µ –ø—Ä–æ–±–ª–µ–º—ã. –ú—ã —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è —Å —Å–∏—Ç—É–∞—Ü–∏–µ–π –∏ —Å–¥–µ–ª–∞–µ–º –≤—Å—ë –≤–æ–∑–º–æ–∂–Ω–æ–µ, —á—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å –≤–æ–ø—Ä–æ—Å –≤ –∫—Ä–∞—Ç—á–∞–π—à–∏–µ —Å—Ä–æ–∫–∏."),
            ("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç",
             "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ. –í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å. –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á—Ç–µ–º –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –≤ –Ω–∞—à–µ–π –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç–µ.")
        ]

        for i, (name, text) in enumerate(templates):
            self.templates_table.setItem(i, 0, QTableWidgetItem(name))
            self.templates_table.setItem(i, 1, QTableWidgetItem(text))

        QMessageBox.information(
            self,
            "–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫",
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
        )

        # === –û–±—â–∏–µ –º–µ—Ç–æ–¥—ã ===

    def refresh_data(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        current_tab = self.tabs.currentIndex()

        if current_tab == 0:  # –í–∫–ª–∞–¥–∫–∞ –æ—Ç–∑—ã–≤–æ–≤
            self.load_reviews()
        elif current_tab == 1:  # –í–∫–ª–∞–¥–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
            self.load_contacts()

        self.statusBar().showMessage("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

    def check_for_updates(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if not hasattr(self, 'cursor') or not self.db_connection.is_connected():
                self.init_database()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
            if hasattr(self, 'last_review_check'):
                reviews_table = DB_TABLES['reviews']['name']

                query = f"""
                            SELECT COUNT(*) as count FROM {reviews_table} 
                            WHERE date > %s
                        """

                self.cursor.execute(query, (self.last_review_check,))
                result = self.cursor.fetchone()

                if result and result['count'] > 0:
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–∞—Ö
                    if self.show_notifications.isChecked():
                        QMessageBox.information(
                            self,
                            "–ù–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã",
                            f"–ü–æ–ª—É—á–µ–Ω–æ {result['count']} –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤"
                        )

                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞ –≤–∫–ª–∞–¥–∫–∞ –æ—Ç–∑—ã–≤–æ–≤
                    if self.tabs.currentIndex() == 0:
                        self.load_reviews()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
            if hasattr(self, 'last_contact_check'):
                contacts_table = DB_TABLES['contacts']['name']

                query = f"""
                            SELECT COUNT(*) as count FROM {contacts_table} 
                            WHERE date > %s
                        """

                self.cursor.execute(query, (self.last_contact_check,))
                result = self.cursor.fetchone()

                if result and result['count'] > 0:
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö
                    if self.show_notifications.isChecked():
                        QMessageBox.information(
                            self,
                            "–ù–æ–≤—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã",
                            f"–ü–æ–ª—É—á–µ–Ω–æ {result['count']} –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"
                        )

                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞ –≤–∫–ª–∞–¥–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
                    if self.tabs.currentIndex() == 1:
                        self.load_contacts()

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            now = datetime.now()
            self.last_review_check = now
            self.last_contact_check = now

        except mysql.connector.Error as e:
            # –¢–∏—Ö–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")

    def export_data(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"""
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_menu = QMenu(self)

        export_reviews_csv = QAction("üìä –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–∑—ã–≤–æ–≤ –≤ CSV", self)
        export_reviews_csv.triggered.connect(lambda: self.export_to_csv('reviews'))

        export_contacts_csv = QAction("üìä –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ CSV", self)
        export_contacts_csv.triggered.connect(lambda: self.export_to_csv('contacts'))

        export_menu.addAction(export_reviews_csv)
        export_menu.addAction(export_contacts_csv)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        export_menu.exec_(QCursor.pos())

    def export_to_csv(self, table_type):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV-—Ñ–∞–π–ª"""
        try:
            if table_type == 'reviews':
                table_name = DB_TABLES['reviews']['name']
                file_prefix = "reviews"
            else:
                table_name = DB_TABLES['contacts']['name']
                file_prefix = "contacts"

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            query = f"SELECT * FROM {table_name}"
            self.cursor.execute(query)
            data = self.cursor.fetchall()

            if not data:
                QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
                return

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            from PyQt5.QtWidgets import QFileDialog

            file_name = f"{file_prefix}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
            file_path, _ = QFileDialog.getSaveFileName(
                self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ CSV", file_name, "CSV —Ñ–∞–π–ª—ã (*.csv)"
            )

            if not file_path:
                return

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ CSV
            import csv

            with open(file_path, 'w', newline='', encoding='utf-8') as csvfile:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω –ø–æ–ª–µ–π
                fieldnames = data[0].keys()
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                writer.writeheader()

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                for row in data:
                    writer.writerow(row)

            QMessageBox.information(
                self,
                "–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω",
                f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª:\n{file_path}"
            )

        except Exception as e:
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ:\n\n{e}"
            )

    def import_data(self):
        """–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"""
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é –∏–º–ø–æ—Ä—Ç–∞
        import_menu = QMenu(self)

        import_reviews_csv = QAction("üì• –ò–º–ø–æ—Ä—Ç –æ—Ç–∑—ã–≤–æ–≤ –∏–∑ CSV", self)
        import_reviews_csv.triggered.connect(lambda: self.import_from_csv('reviews'))

        import_contacts_csv = QAction("üì• –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ CSV", self)
        import_contacts_csv.triggered.connect(lambda: self.import_from_csv('contacts'))

        import_menu.addAction(import_reviews_csv)
        import_menu.addAction(import_contacts_csv)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        import_menu.exec_(QCursor.pos())

    def import_from_csv(self, table_type):
        """–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV-—Ñ–∞–π–ª–∞"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

        QMessageBox.information(
            self,
            "–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö",
            f"–§—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ {table_type} –∏–∑ CSV –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö"
        )

    def show_help(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏"""
        help_text = """
        <h2>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é</h2>

        <h3>–û–±—â–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è</h3>
        <p>–î–∞–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–æ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞–º–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ —Å —Å–∞–π—Ç–∞.</p>

        <h3>–í–∫–ª–∞–¥–∫–∞ "–û—Ç–∑—ã–≤—ã"</h3>
        <p>–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å, –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –æ—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤.</p>
        <ul>
            <li><b>–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É –∏ —Ä–µ–π—Ç–∏–Ω–≥—É.</li>
            <li><b>–ü–æ–∏—Å–∫:</b> –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∏–º–µ–Ω–∏, —É—Å–ª—É–≥–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç—É –æ—Ç–∑—ã–≤–∞.</li>
            <li><b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–∑—ã–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.</li>
            <li><b>–ü–∞–∫–µ—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b> –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è.</li>
        </ul>

        <h3>–í–∫–ª–∞–¥–∫–∞ "–ö–æ–Ω—Ç–∞–∫—Ç—ã"</h3>
        <p>–ü–æ–∑–≤–æ–ª—è–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤.</p>
        <ul>
            <li><b>–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É.</li>
            <li><b>–ü–æ–∏—Å–∫:</b> –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∏–º–µ–Ω–∏, email –∏–ª–∏ —Ç–µ–∫—Å—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è.</li>
            <li><b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.</li>
            <li><b>–ü–∞–∫–µ—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b> –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è.</li>
        </ul>

        <h3>–í–∫–ª–∞–¥–∫–∞ "SQL-–∑–∞–ø—Ä–æ—Å—ã"</h3>
        <p>–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ SQL-–∑–∞–ø—Ä–æ—Å—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.</p>
        <ul>
            <li><b>–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤:</b> –í–≤–µ–¥–∏—Ç–µ SQL-–∑–∞–ø—Ä–æ—Å –∏ –Ω–∞–∂–º–∏—Ç–µ "–í—ã–ø–æ–ª–Ω–∏—Ç—å".</li>
            <li><b>–®–∞–±–ª–æ–Ω—ã:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤.</li>
        </ul>

        <h3>–í–∫–ª–∞–¥–∫–∞ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"</h3>
        <p>–ü–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –¥—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.</p>
        <ul>
            <li><b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b> –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.</li>
            <li><b>–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å:</b> –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.</li>
            <li><b>–®–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤:</b> –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —à–∞–±–ª–æ–Ω–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ—Ç–∑—ã–≤—ã.</li>
        </ul>

        <h3>–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏</h3>
        <ul>
            <li><b>F5:</b> –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ</li>
            <li><b>Ctrl+Tab:</b> –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏</li>
            <li><b>Delete:</b> –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç</li>
        </ul>
        """

        from PyQt5.QtWidgets import QDialog, QVBoxLayout, QTextBrowser, QPushButton

        help_dialog = QDialog(self)
        help_dialog.setWindowTitle("–°–ø—Ä–∞–≤–∫–∞")
        help_dialog.setMinimumSize(700, 500)

        layout = QVBoxLayout(help_dialog)

        help_browser = QTextBrowser()
        help_browser.setHtml(help_text)

        close_button = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
        close_button.clicked.connect(help_dialog.accept)

        layout.addWidget(help_browser)
        layout.addWidget(close_button)

        help_dialog.exec_()

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def run_reviews_manager():
    app = QApplication(sys.argv)
    window = ReviewsManagerApp()
    window.show()
    sys.exit(app.exec_())

# –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∫ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
if __name__ == "__main__":
    run_reviews_manager()