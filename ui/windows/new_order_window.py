import sys

from PyQt5.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout, QLabel,
                             QComboBox, QSpinBox, QPushButton, QLineEdit,
                             QTextEdit, QGroupBox, QCompleter, QMessageBox,
                             QDoubleSpinBox, QWidget, QFrame, QScrollArea, QGraphicsDropShadowEffect, QApplication,
                             QSizePolicy)
from PyQt5.QtCore import Qt, pyqtSlot, QTimer
from PyQt5.QtGui import QColor, QFont
from datetime import datetime, timedelta
import os
from sqlalchemy import func
from core.database import Order
from core.database_manager import DatabaseManager
from .state_manager import StateManager


class AnimatedGroupBox(QGroupBox):
    """–ì—Ä—É–ø–ø–∞ —Å —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏"""
    def __init__(self, title, parent=None):
        super().__init__(title, parent)
        self._setup_effects()

    def _setup_effects(self):
        self.setStyleSheet("""
            QGroupBox {
                background-color: white;
                border: 2px solid #e9ecef;
                border-radius: 10px;
                margin-top: 15px;
                padding: 15px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px;
                color: #0056b3;
                font-weight: bold;
            }
        """)

    def enterEvent(self, event):
        super().enterEvent(event)

    def leaveEvent(self, event):
        super().leaveEvent(event)


class ModernButton(QPushButton):
    """–ö–Ω–æ–ø–∫–∞ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º"""

    def __init__(self, text, parent=None):
        super().__init__(text, parent)
        self._setup_effects()

    def _setup_effects(self):
        self.setMinimumHeight(40)
        self.setCursor(Qt.PointingHandCursor)

        try:
            # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç —Ç–µ–Ω–∏
            self.shadow = QGraphicsDropShadowEffect()
            self.shadow.setBlurRadius(15)
            self.shadow.setColor(QColor(0, 0, 0, 80))
            self.shadow.setOffset(0, 2)
            self.setGraphicsEffect(self.shadow)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç —Ç–µ–Ω–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏: {e}")

        # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –ø—Ä–∏–º–µ–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏
        self.setStyleSheet("""
            QPushButton {
                background-color: #2196F3;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 6px;
                font-weight: bold;
                font-size: 13px;
            }
            QPushButton:hover {
                background-color: #1976D2;
            }
            QPushButton:pressed {
                background-color: #0D47A1;
            }
        """)

class ClientInfoWidget(QFrame):
    """–í–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ"""

    def __init__(self, parent=None):
        super().__init__(parent)
        self.initUI()

    def initUI(self):
        self.layout = QVBoxLayout(self)
        self.layout.setContentsMargins(10, 10, 10, 10)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        header_layout = QHBoxLayout()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.title = QLabel("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ")
        self.title.setFont(QFont("Arial", 12, QFont.Bold))
        self.title.setStyleSheet("color: #2196F3;")
        header_layout.addWidget(self.title)

        # –ö–Ω–æ–ø–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        self.detail_button = QPushButton("–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
        self.detail_button.setStyleSheet("""
            QPushButton {
                background-color: #2196F3;
                color: white;
                border: none;
                padding: 5px 10px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #0D47A1;
            }
        """)
        self.detail_button.setFixedWidth(150)
        self.detail_button.clicked.connect(self.show_detailed_info)
        header_layout.addWidget(self.detail_button)

        self.layout.addLayout(header_layout)

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        self.info_label = QLabel()
        self.info_label.setWordWrap(True)
        self.info_label.setStyleSheet("""
            QLabel {
                background-color: white;
                padding: 10px;
                border-radius: 5px;
                border: 1px solid #e0e0e0;
            }
        """)
        self.layout.addWidget(self.info_label)

        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
        self.setStyleSheet("""
            QFrame {
                background-color: #f8f9fa;
                border: 1px solid #e0e0e0;
                border-radius: 8px;
            }
        """)

        # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –≤–∏–¥–∂–µ—Ç
        self.hide()

    def update_info(self, client_data):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ"""
        if not client_data:
            self.hide()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        if 'client_name' in client_data:
            self.client_name = client_data['client_name']

        info_text = []

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if client_data.get('total_orders', 0) > 0:
            stats = (f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞:\n"
                     f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {client_data['total_orders']}\n"
                     f"‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤: {client_data['total_amount']:,.0f} ‚ÇΩ\n"
                     f"‚Ä¢ –û–ø–ª–∞—á–µ–Ω–æ –≤—Å–µ–≥–æ: {client_data['total_paid']:,.0f} ‚ÇΩ")
            info_text.append(stats)

        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        if client_data.get('warnings'):
            warnings = "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:\n" + "\n".join(client_data['warnings'])
            info_text.append(warnings)

        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ–ø–ª–∞—Ç
        if client_data.get('payment_analytics'):
            pa = client_data['payment_analytics']
            payment_info = [f"‚è±Ô∏è –ê–Ω–∞–ª–∏–∑ —Å—Ä–æ–∫–æ–≤ –æ–ø–ª–∞—Ç—ã:"]

            if pa.get('average_days') is not None:
                payment_info.append(f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã: {pa['average_days']:.1f} –¥–Ω–µ–π")
                payment_info.append(f"‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫: {pa['min_days']} –¥–Ω–µ–π")
                payment_info.append(f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫: {pa['max_days']} –¥–Ω–µ–π")

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –æ–ø–ª–∞—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
            if pa.get('details'):
                payment_info.append("\n–ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç:")
                for detail in pa['details'][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–∫–∞–∑–∞
                    days_text = f"{detail['days_to_pay']} –¥–Ω–µ–π" if detail['days_to_pay'] != 1 else "1 –¥–µ–Ω—å"
                    payment_info.append(
                        f"‚Ä¢ –ó–∞–∫–∞–∑ ‚Ññ{detail['id']}: —Å–ø—É—Å—Ç—è {days_text}"
                        f" (—Å–æ–∑–¥–∞–Ω {detail['created_date'].strftime('%d.%m.%Y')}, "
                        f"–æ–ø–ª–∞—á–µ–Ω {detail['payment_date'].strftime('%d.%m.%Y')})"
                    )

                if len(pa['details']) > 3:
                    payment_info.append("‚Ä¢ ... (–Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑¬ª –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)")

            info_text.append("\n".join(payment_info))

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if client_data.get('recommendations'):
            recommendations = "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n" + "\n".join(client_data['recommendations'])
            info_text.append(recommendations)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        self.info_label.setText("\n\n".join(info_text))
        self.show()

    def show_detailed_info(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–ª–∏–µ–Ω—Ç–µ"""
        if not self.client_name:
            return

        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
            from ui.windows.client_detail_window import ClientDetailWindow
            detail_window = ClientDetailWindow(self, client_name=self.client_name)
            detail_window.exec_()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")

    def _clear_containers(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"""
        for container in [self.stats_container, self.debt_container,
                          self.recommendations_container]:
            while container.count():
                item = container.takeAt(0)
                if item.widget():
                    item.widget().deleteLater()


class NewOrderWindow(QDialog):
    """–û–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞"""

    def __init__(self, parent=None, order=None):
        super().__init__(parent)
        self.db_manager = DatabaseManager()
        self.state_manager = StateManager()
        self.order_id = order.id if order else None  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ ID

        try:
            if self.order_id:  # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                with self.db_manager.session_scope() as session:
                    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂—É—é –∫–æ–ø–∏—é –∑–∞–∫–∞–∑–∞
                    order = session.query(Order).get(self.order_id)
                    if not order:
                        raise ValueError(f"–ó–∞–∫–∞–∑ —Å ID {self.order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö
                    self.order_data = {
                        'id': order.id,
                        'fio': order.fio,
                        'group': order.group,
                        'service': order.service,
                        'direction': order.direction,
                        'theme': order.theme,
                        'quantity': order.quantity,
                        'login': order.login,
                        'password': order.password,
                        'website': order.website,
                        'cost': order.cost,
                        'paid_amount': order.paid_amount,
                        'remaining_amount': order.remaining_amount,
                        'total_amount': order.total_amount,
                        'teacher_name': order.teacher_name,
                        'teacher_email': order.teacher_email,
                        'phone': order.phone,
                        'deadline': order.deadline,
                        'comment': order.comment,
                        'status': order.status,
                        'discount': order.discount
                    }

            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –æ–∫–Ω–∞
            self.setWindowTitle("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞" if self.order_id else "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑")
            self.setMinimumWidth(900)
            self.setMinimumHeight(800)

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤
            self._setup_attributes()

            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            self.initUI()

            # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
            self.load_completion_data()

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥
            self.load_services()

            # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è
            if hasattr(self, 'order_data'):
                self.fill_fields(self.order_data)

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–∫–Ω–∞: {str(e)}")

    def get_client_data(self, session, client_name):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª–∏–µ–Ω—Ç–µ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ä–∞—Å—á–µ—Ç–æ–º —Å—É–º–º, —Å–∫–∏–¥–æ–∫ –∏ –∞–Ω–∞–ª–∏–∑–æ–º –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–ª–∞—Ç—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–∞ (–≤–∫–ª—é—á–∞—è –æ—Ç–∫–∞–∑—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞)
            all_orders = session.query(Order).filter(
                Order.fio == client_name
            ).all()

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–∞ (–∏—Å–∫–ª—é—á–∞–µ–º –æ—Ç–∫–∞–∑—ã)
            orders = [o for o in all_orders if o.status != '–û—Ç–∫–∞–∑']

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            total_orders = len(orders)
            total_amount = 0
            total_paid = 0
            unpaid_orders = []
            recent_orders = []
            payment_analytics = []  # –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ä–æ–∫–æ–≤ –æ–ø–ª–∞—Ç—ã

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∑–∞–∫–∞–∑
            for order in orders:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–∫–∏–¥–∫–∏
                order.check_discount_expiration()

                # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
                base_cost = order.cost or 0

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–∏–¥–∫—É
                discount = float(order.discount.replace('%', '')) if order.discount else 0
                discount_amount = base_cost * (discount / 100)

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ —Å–∫–∏–¥–∫–æ–π
                final_cost = base_cost - discount_amount

                # –î–æ–±–∞–≤–ª—è–µ–º –∫ –æ–±—â–∏–º —Å—É–º–º–∞–º
                total_amount += final_cost
                total_paid += order.paid_amount or 0

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫
                remaining = max(0, final_cost - (order.paid_amount or 0))
                if remaining > 0:
                    unpaid_orders.append({
                        'id': order.id,
                        'service': order.service,
                        'remaining': remaining,
                        'created_date': order.created_date,
                        'discount': order.discount,
                        'base_cost': base_cost,
                        'final_cost': final_cost,
                        'status': order.status
                    })

                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã
                recent_orders.append({
                    'service': order.service,
                    'base_cost': base_cost,
                    'final_cost': final_cost,
                    'created_date': order.created_date,
                    'status': order.status
                })

                # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–ª–∞—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤)
                if order.payment_date and order.created_date and order.status == '–í—ã–ø–æ–ª–Ω–µ–Ω':
                    days_to_pay = (order.payment_date - order.created_date).days
                    payment_analytics.append({
                        'id': order.id,
                        'service': order.service,
                        'created_date': order.created_date,
                        'payment_date': order.payment_date,
                        'days_to_pay': days_to_pay,
                        'amount': final_cost
                    })

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã –ø–æ –¥–∞—Ç–µ
            recent_orders.sort(key=lambda x: x['created_date'], reverse=True)
            recent_orders = recent_orders[:3]  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é —Å–∫–∏–¥–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
            recommended_discount = 0
            discount_reason = []

            if total_orders >= 10:
                recommended_discount = 30
                discount_reason.append(f"üåü {total_orders} –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
            elif total_orders >= 5:
                recommended_discount = 20
                discount_reason.append(f"‚≠ê {total_orders} –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
            elif total_orders >= 3:
                recommended_discount = 10
                discount_reason.append(f"‚ú® {total_orders} –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")

            if total_paid >= 50000:
                recommended_discount = max(recommended_discount, 25)
                discount_reason.append(f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –æ–ø–ª–∞—Ç: {total_paid:,.0f} ‚ÇΩ")

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
            warnings = []
            if unpaid_orders:
                total_unpaid = sum(order['remaining'] for order in unpaid_orders)
                warnings.append(f"‚ö†Ô∏è –ò–º–µ—é—Ç—Å—è –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –Ω–∞ —Å—É–º–º—É: {total_unpaid:,.0f} ‚ÇΩ")

                for order in unpaid_orders:
                    discount_info = f" (—Å–∫–∏–¥–∫–∞ {order['discount']})" if order['discount'] != "0%" else ""
                    warnings.append(
                        f"   ‚Ä¢ –ó–∞–∫–∞–∑ ‚Ññ{order['id']}: {order['service']} - {order['remaining']:,.0f} ‚ÇΩ{discount_info}"
                        f" (–æ—Ç {order['created_date'].strftime('%d.%m.%Y')})"
                    )

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
            recommendations = []
            if recent_orders:
                avg_final_cost = sum(order['final_cost'] for order in recent_orders) / len(recent_orders)
                recommendations.append(f"üìä –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–∫–∞–∑–æ–≤: {avg_final_cost:,.0f} ‚ÇΩ")

            if discount_reason:
                recommendations.append(
                    f"üéÅ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å–∫–∏–¥–∫–∞ {recommended_discount}% –ø–æ –ø—Ä–∏—á–∏–Ω–∞–º:\n" +
                    "\n".join(f"   ‚Ä¢ {reason}" for reason in discount_reason)
                )

            # –ê–Ω–∞–ª–∏–∑ —Å—Ä–æ–∫–æ–≤ –æ–ø–ª–∞—Ç—ã –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            payment_stats = {}
            if payment_analytics:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                payment_analytics.sort(key=lambda x: x['created_date'])

                payment_stats['total_analyzed'] = len(payment_analytics)
                payment_stats['average_days'] = sum(item['days_to_pay'] for item in payment_analytics) / len(
                    payment_analytics)
                payment_stats['max_days'] = max(item['days_to_pay'] for item in payment_analytics)
                payment_stats['min_days'] = min(item['days_to_pay'] for item in payment_analytics)

                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–∞—Ö
                payment_stats['details'] = []
                for item in sorted(payment_analytics, key=lambda x: x['created_date'], reverse=True):
                    payment_stats['details'].append({
                        'id': item['id'],
                        'service': item['service'],
                        'created_date': item['created_date'],
                        'payment_date': item['payment_date'],
                        'days_to_pay': item['days_to_pay'],
                        'amount': item['amount']
                    })

                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –æ–ø–ª–∞—Ç
                if payment_stats['average_days'] > 20:  # –ï—Å–ª–∏ —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã –±–æ–ª—å—à–µ 20 –¥–Ω–µ–π
                    recommendations.append(
                        f"‚è±Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –°—Ä–µ–¥–Ω–∏–π —Å—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã: {payment_stats['average_days']:.1f} –¥–Ω–µ–π"
                    )
                    recommendations.append(
                        "üíµ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –±—Ä–∞—Ç—å –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É –Ω–µ –º–µ–Ω–µ–µ 70%, —Ç–∞–∫ –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç –æ–±—ã—á–Ω–æ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"
                    )
                elif unpaid_orders:
                    recommendations.append(
                        "‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –æ–ø–ª–∞—Ç—É –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∑–∞–∫–∞–∑–∞–º"
                    )

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥ –æ–ø–ª–∞—Ç (—É–ª—É—á—à–∞–µ—Ç—Å—è –∏–ª–∏ —É—Ö—É–¥—à–∞–µ—Ç—Å—è?)
                if len(payment_analytics) >= 3:
                    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∏ –∏ –ø–µ—Ä–≤—ã–µ —Ç—Ä–∏ –∑–∞–∫–∞–∑–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
                    recent_payments = payment_analytics[-3:]
                    early_payments = payment_analytics[:3]

                    recent_avg = sum(item['days_to_pay'] for item in recent_payments) / len(recent_payments)
                    early_avg = sum(item['days_to_pay'] for item in early_payments) / len(early_payments)

                    if recent_avg > early_avg * 1.5:  # –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —É—Ö—É–¥—à–µ–Ω–∏–µ
                        recommendations.append(
                            f"üìâ –¢—Ä–µ–Ω–¥ –ø–ª–∞—Ç–µ–∂–Ω–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã —É—Ö—É–¥—à–∞–µ—Ç—Å—è: —Å {early_avg:.1f} –¥–æ {recent_avg:.1f} –¥–Ω–µ–π"
                        )
                        recommendations.append(
                            "‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã –∏ —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É"
                        )
                    elif recent_avg < early_avg * 0.7:  # –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ
                        recommendations.append(
                            f"üìà –¢—Ä–µ–Ω–¥ –ø–ª–∞—Ç–µ–∂–Ω–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã —É–ª—É—á—à–∞–µ—Ç—Å—è: —Å {early_avg:.1f} –¥–æ {recent_avg:.1f} –¥–Ω–µ–π"
                        )
                        if recommended_discount < 5:
                            recommendations.append(
                                "üí° –ú–æ–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–µ–±–æ–ª—å—à—É—é —Å–∫–∏–¥–∫—É (5%) –∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ö–æ—Ä–æ—à–µ–π –ø–ª–∞—Ç–µ–∂–Ω–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã"
                            )

            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ (–≤–∫–ª—é—á–∞—è –æ—Ç–∫–∞–∑—ã) –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            total_orders_with_cancelled = len(all_orders)

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            cancelled_orders = [o for o in all_orders if o.status == '–û—Ç–∫–∞–∑']
            if cancelled_orders:
                warnings.append(f"‚ÑπÔ∏è –ò–º–µ–µ—Ç—Å—è {len(cancelled_orders)} –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")

            return {
                'client_name': client_name,  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                'total_orders': total_orders,  # –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
                'total_amount': total_amount,  # –°—É–º–º–∞ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–æ–∫, –±–µ–∑ –æ—Ç–∫–∞–∑–æ–≤
                'total_paid': total_paid,
                'total_unpaid': sum(order['remaining'] for order in unpaid_orders) if unpaid_orders else 0,
                'total_orders_all': total_orders_with_cancelled,  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
                'recommended_discount': recommended_discount,
                'warnings': warnings,
                'recommendations': recommendations,
                'payment_analytics': payment_stats if payment_analytics else None,  # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –æ–ø–ª–∞—Ç
                'cancelled_orders': len(cancelled_orders),  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
                'all_orders': all_orders  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            }

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            return None
    def load_completion_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self._clients_list = []
            self._groups_list = []
            self._directions_list = []
            self._themes_list = []
            self._teachers_list = []
            self._services_list = []
            self._phones_list = []
            self._logins_list = []  # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ª–æ–≥–∏–Ω–æ–≤
            self._passwords_list = []  # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ä–æ–ª–µ–π

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ DatabaseManager
            with self.db_manager.session_scope() as session:
                results = session.query(
                    Order.fio,
                    Order.group,
                    Order.direction,
                    Order.theme,
                    Order.teacher_name,
                    Order.service,
                    Order.phone,
                    Order.login,  # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏–Ω
                    Order.password  # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
                ).all()

                # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                if results:
                    self._clients_list = sorted(set(r[0] for r in results if r[0] and r[0] != '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
                    self._groups_list = sorted(set(r[1] for r in results if r[1] and r[1] != '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
                    self._directions_list = sorted(set(r[2] for r in results if r[2] and r[2] != '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
                    self._themes_list = sorted(set(r[3] for r in results if r[3] and r[3] != '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
                    self._teachers_list = sorted(set(r[4] for r in results if r[4] and r[4] != '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
                    self._services_list = sorted(set(r[5] for r in results if r[5] and r[5] != '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
                    self._phones_list = sorted(set(r[6] for r in results if r[6] and r[6] != '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
                    self._logins_list = sorted(set(r[7] for r in results if r[7] and r[7] != '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
                    self._passwords_list = sorted(set(r[8] for r in results if r[8] and r[8] != '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
            self.setup_completers()

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")

    def setup_completers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª–µ–π"""
        try:
            completers = {
                self.fio_input: self._clients_list,
                self.group_input: self._groups_list,
                self.direction_input: self._directions_list,
                self.theme_input: self._themes_list,
                self.teacher_input: self._teachers_list,
                self.phone_input: self._phones_list,
                self.login_input: self._logins_list,  # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏–Ω–∞
                self.password_input: self._passwords_list  # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä–æ–ª—è
            }

            for widget, data in completers.items():
                if data:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
                    completer = QCompleter(data)
                    completer.setCaseSensitivity(Qt.CaseInsensitive)
                    completer.setFilterMode(Qt.MatchContains)  # –ü–æ–∏—Å–∫ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏
                    widget.setCompleter(completer)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")

    def on_fio_changed(self, text):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –§–ò–û"""
        try:
            if not text:
                self.client_info.hide()
                return

            with self.db_manager.session_scope() as session:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
                last_order = session.query(Order).filter(
                    Order.fio == text
                ).order_by(Order.created_date.desc()).first()

                if last_order:
                    # –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞
                    self.group_input.setText(last_order.group)
                    self.phone_input.setText(last_order.phone or '')
                    self.teacher_input.setText(last_order.teacher_name or '')
                    self.teacher_email_input.setText(last_order.teacher_email or '')

                    # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è
                    if last_order.login and last_order.login != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                        self.login_input.setText(last_order.login)
                    if last_order.password and last_order.password != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                        self.password_input.setText(last_order.password)

                # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–µ–Ω—Ç–µ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –æ–ø–ª–∞—Ç
                client_data = self.get_client_data(session, text)
                if client_data:
                    self.client_info.update_info(client_data)

                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é —Å–∫–∏–¥–∫—É
                    if client_data['recommended_discount'] > 0:
                        recommended_discount = f"{client_data['recommended_discount']}%"
                        index = self.discount_combo.findText(recommended_discount)
                        if index >= 0:
                            self.discount_combo.setCurrentIndex(index)
                else:
                    self.client_info.hide()

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ: {e}")
            self.client_info.hide()

    def _setup_attributes(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤"""
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self._services_list = None
        self._clients_list = None
        self._groups_list = None
        self._directions_list = None
        self._themes_list = None
        self._teachers_list = None

        # UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.client_info = ClientInfoWidget()
        self.discount_info_label = QLabel()
        self.discount_info_label.hide()

        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –≤–≤–æ–¥–∞
        self.fio_input = QLineEdit()
        self.group_input = QLineEdit()
        self.services_combo = QComboBox()
        self.services_combo.setEditable(True)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        self.direction_input = QLineEdit()
        self.theme_input = QLineEdit()
        self.quantity_spin = QSpinBox()
        self.quantity_spin.setMinimum(1)
        self.quantity_spin.setMaximum(1000)

        # –î–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–∞
        self.login_input = QLineEdit()
        self.password_input = QLineEdit()
        self.website_input = QLineEdit()

        # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–ª—è
        # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å—É–º–º
        self.cost_spin = QDoubleSpinBox()
        self.cost_spin.setMaximum(1000000)
        self.cost_spin.setPrefix("‚ÇΩ ")
        self.cost_spin.setStyleSheet("""
                QDoubleSpinBox {
                    padding: 8px 15px;
                    border: 2px solid #e0e0e0;
                    border-radius: 8px;
                    background: white;
                    font-size: 14px;
                    font-weight: bold;
                    color: #2196F3;
                }
                QDoubleSpinBox:focus {
                    border-color: #2196F3;
                    background: #f8f9fa;
                }
                QDoubleSpinBox::up-button, QDoubleSpinBox::down-button {
                    width: 25px;
                    border-radius: 4px;
                    background: #f5f5f5;
                    border: 1px solid #e0e0e0;
                }
                QDoubleSpinBox::up-button:hover, QDoubleSpinBox::down-button:hover {
                    background: #e0e0e0;
                }
            """)
        self.cost_spin.setMinimumWidth(200)

        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –ø–æ–ª—è –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã
        self.prepay_spin = QDoubleSpinBox()
        self.prepay_spin.setMaximum(1000000)
        self.prepay_spin.setPrefix("‚ÇΩ ")
        self.prepay_spin.setStyleSheet(self.cost_spin.styleSheet())
        self.prepay_spin.setMinimumWidth(200)

        self.discount_combo = QComboBox()
        self.discount_combo.addItems(['0%', '5%', '10%', '15%', '20%', '25%', '30%', '35%', '40%', '45%', '50%'])

        self.deadline_combo = QComboBox()
        self.deadline_combo.addItems(['1 –¥–µ–Ω—å','2 –¥–Ω—è','3 –¥–Ω—è', '5 –¥–Ω–µ–π', '7 –¥–Ω–µ–π', '14 –¥–Ω–µ–π', '1 –º–µ—Å—è—Ü'])

        # –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.phone_input = QLineEdit()
        self.teacher_input = QLineEdit()
        self.teacher_email_input = QLineEdit()
        self.comment_text = QTextEdit()

    def _ensure_ui_elements_exist(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ UI"""
        required_elements = [
            'fio_input', 'group_input', 'phone_input',
            'teacher_input', 'teacher_email_input',
            'login_input', 'password_input', 'website_input'
        ]

        missing_elements = []
        for element in required_elements:
            if not hasattr(self, element):
                missing_elements.append(element)

        if missing_elements:
            raise RuntimeError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã UI: {', '.join(missing_elements)}")

    def initUI(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QVBoxLayout(self)
        main_layout.setSpacing(10)
        main_layout.setContentsMargins(10, 10, 10, 10)

        # –°–æ–∑–¥–∞–µ–º –æ–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ—ë –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç –∫–ª–∞—Å—Å–∞
        self.scroll_area = QScrollArea()  # –ò–∑–º–µ–Ω–µ–Ω–æ –∏–º—è –Ω–∞ scroll_area
        self.scroll_area.setWidgetResizable(True)
        self.scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.scroll_area.setStyleSheet("""
            QScrollArea {
                border: none;
                background-color: transparent;
            }
            QScrollBar:vertical {
                border: none;
                background: #f0f0f0;
                width: 8px;
                border-radius: 4px;
            }
            QScrollBar::handle:vertical {
                background: #c0c0c0;
                border-radius: 4px;
                min-height: 30px;
            }
            QScrollBar::handle:vertical:hover {
                background: #a0a0a0;
            }
        """)

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        content_widget = QWidget()
        content_layout = QVBoxLayout(content_widget)
        content_layout.setSpacing(15)
        content_layout.setContentsMargins(5, 5, 5, 5)

        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—ã –ø–æ–ª–µ–π
        content_layout.addWidget(self._create_main_group())
        content_layout.addWidget(self._create_access_group())
        content_layout.addWidget(self._create_finance_group())
        content_layout.addWidget(self._create_contact_group())

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–¥–∂–µ—Ç —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –≤ –æ–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        self.scroll_area.setWidget(content_widget)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–æ–ª–ª –≤ –æ—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout.addWidget(self.scroll_area, 1)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_layout = QHBoxLayout()
        button_layout.setContentsMargins(5, 5, 5, 5)

        save_btn = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        save_btn.clicked.connect(self.save_order)
        save_btn.setMinimumWidth(120)
        save_btn.setMinimumHeight(30)

        cancel_btn = QPushButton("–û—Ç–º–µ–Ω–∞")
        cancel_btn.clicked.connect(self.reject)
        cancel_btn.setMinimumWidth(120)
        cancel_btn.setMinimumHeight(30)

        button_layout.addWidget(save_btn)
        button_layout.addWidget(cancel_btn)

        main_layout.addLayout(button_layout)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞
        self.setMinimumWidth(900)
        self.setMinimumHeight(800)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã content_widget
        content_widget.setMinimumWidth(880)
        content_widget.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)

    def resizeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞"""
        super().resizeEvent(event)
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        if hasattr(self, 'scroll_area'):
            scroll_width = self.scroll_area.width() - 20  # –ò—Å–ø–æ–ª—å–∑—É–µ–º scroll_area –≤–º–µ—Å—Ç–æ scroll
            content_widget = self.scroll_area.widget()
            if content_widget:
                content_widget.setMinimumWidth(scroll_width)


    def _stage1_init(self):
        """–ü–µ—Ä–≤—ã–π —ç—Ç–∞–ø –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        try:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏
            self.apply_styles()
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø
            QTimer.singleShot(100, self._stage2_init)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ stage1: {e}")

    def _stage2_init(self):
        """–í—Ç–æ—Ä–æ–π —ç—Ç–∞–ø - –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
            self.load_completion_data()
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø
            QTimer.singleShot(100, self._stage3_init)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ stage2: {e}")

    def _stage3_init(self):
        """–¢—Ä–µ—Ç–∏–π —ç—Ç–∞–ø - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
            self.setup_completers()
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥
            self.load_services()
            # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è
            if self.order:
                self.fill_fields()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ stage3: {e}")

    def fill_fields(self, data=None):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        try:
            if not data:
                return

            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è
            self.fio_input.setText(data.get('fio', ''))
            self.group_input.setText(data.get('group', ''))
            self.direction_input.setText(data.get('direction', ''))
            self.theme_input.setText(data.get('theme', ''))
            self.login_input.setText(data.get('login', ''))
            self.password_input.setText(data.get('password', ''))
            self.website_input.setText(data.get('website', ''))
            self.phone_input.setText(data.get('phone', ''))
            self.teacher_input.setText(data.get('teacher_name', ''))
            self.teacher_email_input.setText(data.get('teacher_email', ''))
            self.comment_text.setPlainText(data.get('comment', ''))

            # –ó–∞–ø–æ–ª–Ω—è–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è
            self.quantity_spin.setValue(int(data.get('quantity', 1)))
            self.cost_spin.setValue(float(data.get('cost', 0)))
            self.prepay_spin.setValue(float(data.get('paid_amount', 0)))

            # –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–º–±–æ–±–æ–∫—Å—ã
            if data.get('service'):
                index = self.services_combo.findText(data['service'])
                if index >= 0:
                    self.services_combo.setCurrentIndex(index)

            if data.get('deadline'):
                index = self.deadline_combo.findText(data['deadline'])
                if index >= 0:
                    self.deadline_combo.setCurrentIndex(index)

            if data.get('discount'):
                index = self.discount_combo.findText(data['discount'])
                if index >= 0:
                    self.discount_combo.setCurrentIndex(index)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å—á–µ—Ç—ã
            self.calculate_total_with_discount()

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
            self.on_fio_changed(data.get('fio', ''))

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–ª–µ–π: {e}")

    def _update_dependent_fields(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º—ã—Ö –ø–æ–ª–µ–π"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞—á–µ–Ω–∏–π –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π
            if hasattr(self, 'cost_spin') and hasattr(self, 'prepay_spin'):
                self.calculate_total_with_discount()

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
            if hasattr(self, 'discount_info_label'):
                if self.discount_combo.currentText() != '0%':
                    self.discount_info_label.show()
                else:
                    self.discount_info_label.hide()

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–≤–∏—Å–∏–º—ã—Ö –ø–æ–ª–µ–π: {e}")


    def _create_main_group(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        group = AnimatedGroupBox("–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        layout = QVBoxLayout(group)
        layout.setSpacing(10)

        # –§–ò–û
        fio_layout = self._create_input_row(
            "–§–ò–û*:", self.fio_input,
            placeholder="–í–≤–µ–¥–∏—Ç–µ –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞"
        )
        self.fio_input.textChanged.connect(self.on_fio_changed)
        layout.addLayout(fio_layout)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
        layout.addWidget(self.client_info)

        # –ì—Ä—É–ø–ø–∞
        group_layout = self._create_input_row(
            "–ì—Ä—É–ø–ø–∞*:", self.group_input,
            placeholder="–í–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É"
        )
        layout.addLayout(group_layout)

        # –£—Å–ª—É–≥–∏
        services_layout = self._create_input_row(
            "–£—Å–ª—É–≥–∏*:", self.services_combo
        )
        layout.addLayout(services_layout)

        return group

    def _create_access_group(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ—Å—Ç—É–ø–∞"""
        group = AnimatedGroupBox("–î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞")
        layout = QVBoxLayout(group)
        layout.setSpacing(10)

        # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        direction_layout = self._create_input_row(
            "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", self.direction_input,
            placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
        )
        layout.addLayout(direction_layout)

        # –¢–µ–º–∞
        theme_layout = self._create_input_row(
            "–¢–µ–º–∞:", self.theme_input,
            placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É"
        )
        layout.addLayout(theme_layout)

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        quantity_layout = self._create_input_row(
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:", self.quantity_spin
        )
        layout.addLayout(quantity_layout)

        # –õ–æ–≥–∏–Ω
        login_layout = self._create_input_row(
            "–õ–æ–≥–∏–Ω:", self.login_input,
            placeholder="–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω"
        )
        layout.addLayout(login_layout)

        # –ü–∞—Ä–æ–ª—å
        password_layout = self._create_input_row(
            "–ü–∞—Ä–æ–ª—å:", self.password_input,
            placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
        )
        layout.addLayout(password_layout)

        # –°–∞–π—Ç
        website_layout = self._create_input_row(
            "–°–∞–π—Ç:", self.website_input,
            placeholder="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–∞–π—Ç–∞"
        )
        layout.addLayout(website_layout)

        return group

    def _create_finance_group(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        group = AnimatedGroupBox("–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        layout = QVBoxLayout(group)
        layout.setSpacing(10)

        # –°—Ç–æ–∏–º–æ—Å—Ç—å —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥—Å—á–µ—Ç–∞
        cost_container = QHBoxLayout()
        cost_container.setSpacing(5)  # –£–º–µ–Ω—å—à–∞–µ–º –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏

        # –°–æ–∑–¥–∞–µ–º layout –¥–ª—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å —É–º–µ–Ω—å—à–µ–Ω–Ω–æ–π —à–∏—Ä–∏–Ω–æ–π –º–µ—Ç–∫–∏
        cost_layout = self._create_input_row(
            "–°–¢–û–ò–ú–û–°–¢–¨*:", self.cost_spin
        )

        # –ü–æ–ª—É—á–∞–µ–º SpinBox –∏–∑ layout'–∞ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ–≥–æ —à–∏—Ä–∏–Ω—É
        self.cost_spin.setMinimumWidth(150)  # –£–º–µ–Ω—å—à–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É
        self.cost_spin.valueChanged.connect(self.calculate_total_with_discount)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Å—á–µ—Ç–∞ —Å —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
        calculate_btn = ModernButton("–ü–æ—Å—á–∏—Ç–∞—Ç—å")
        calculate_btn.setMaximumWidth(120)  # –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É —É–∂–µ
        calculate_btn.setMinimumHeight(30)  # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É —Å –ø–æ–ª–µ–º –≤–≤–æ–¥–∞
        calculate_btn.clicked.connect(self.calculate_cost_with_quantity)

        # –ö–æ–º–ø–æ–Ω—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–ª–æ—Ç–Ω–µ–µ
        cost_container.addLayout(cost_layout)
        cost_container.addWidget(calculate_btn, alignment=Qt.AlignLeft)  # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é
        cost_container.addStretch()  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—â–∏–π—Å—è —ç–ª–µ–º–µ–Ω—Ç —Å–ø—Ä–∞–≤–∞
        layout.addLayout(cost_container)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–∏–¥–∫–µ
        layout.addWidget(self.discount_info_label)

        # –°–∫–∏–¥–∫–∞
        discount_layout = self._create_input_row(
            "–°–∫–∏–¥–∫–∞:", self.discount_combo
        )
        self.discount_combo.currentTextChanged.connect(self.calculate_total_with_discount)
        layout.addLayout(discount_layout)

        # –°—Ä–æ–∫
        deadline_layout = self._create_input_row(
            "–°—Ä–æ–∫*:", self.deadline_combo
        )
        layout.addLayout(deadline_layout)

        # –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞
        prepay_layout = self._create_input_row(
            "–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞:", self.prepay_spin
        )
        self.prepay_spin.valueChanged.connect(self.calculate_total_with_discount)
        layout.addLayout(prepay_layout)

        # –û—Å—Ç–∞—Ç–æ–∫
        self.remaining_label = QLabel("–û—Å—Ç–∞—Ç–æ–∫: 0.00 ‚ÇΩ")
        self.remaining_label.setStyleSheet("""
            QLabel {
                font-size: 14px;
                font-weight: bold;
                color: #2196F3;
                padding: 10px;
            }
        """)
        layout.addWidget(self.remaining_label)

        return group

    def calculate_cost_with_quantity(self):
        """–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            base_cost = self.cost_spin.value()
            quantity = self.quantity_spin.value()

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
            total_cost = base_cost * quantity

            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ø–∏–Ω–Ω–µ—Ä–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
            self.cost_spin.setValue(total_cost)

            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏
            self.calculate_total_with_discount()

        except Exception as e:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏: {str(e)}")


    def _create_contact_group(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        group = AnimatedGroupBox("–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        layout = QVBoxLayout(group)
        layout.setSpacing(10)

        # –¢–µ–ª–µ—Ñ–æ–Ω
        phone_layout = self._create_input_row(
            "–¢–µ–ª–µ—Ñ–æ–Ω:", self.phone_input,
            placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
        )
        layout.addLayout(phone_layout)

        # –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        teacher_layout = self._create_input_row(
            "–§–ò–û –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–Ø:", self.teacher_input,
            placeholder="–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"
        )
        layout.addLayout(teacher_layout)

        # –ü–æ—á—Ç–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        email_layout = self._create_input_row(
            "–ü–û–ß–¢–ê –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–Ø:", self.teacher_email_input,
            placeholder="–í–≤–µ–¥–∏—Ç–µ email –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"
        )
        layout.addLayout(email_layout)

        # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        layout.addWidget(QLabel("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:"))
        self.comment_text.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É")
        self.comment_text.setMinimumHeight(100)
        layout.addWidget(self.comment_text)

        return group

    def _create_input_row(self, label_text, widget, placeholder=None):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å –ø–æ–ª–µ–º –≤–≤–æ–¥–∞ –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏"""
        layout = QHBoxLayout()
        layout.setSpacing(10)  # –£–º–µ–Ω—å—à–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        layout.setContentsMargins(5, 2, 5, 2)  # –î–µ–ª–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã

        # –ú–µ—Ç–∫–∞
        label = QLabel(label_text)
        label.setMinimumWidth(150)
        label.setAlignment(Qt.AlignRight | Qt.AlignVCenter)  # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é –∏ —Ü–µ–Ω—Ç—Ä—É
        layout.addWidget(label)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞ –∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫
        input_container = QVBoxLayout()
        input_container.setSpacing(2)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        input_container.setContentsMargins(0, 0, 0, 0)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–∏–¥–∂–µ—Ç –≤–≤–æ–¥–∞
        if placeholder and hasattr(widget, 'setPlaceholderText'):
            widget.setPlaceholderText(placeholder)
        if hasattr(widget, 'setMinimumWidth'):
            widget.setMinimumWidth(250)

        input_container.addWidget(widget)
        widget.setMinimumHeight(30)  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è

        layout.addLayout(input_container)
        layout.addStretch()  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—â–∏–π—Å—è —ç–ª–µ–º–µ–Ω—Ç —Å–ø—Ä–∞–≤–∞

        return layout

    def copy_to_clipboard(self, text):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        QApplication.clipboard().setText(text)
        QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")

    def load_services(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with self.db_manager.session_scope() as session:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏
                services = session.query(Order.service).distinct().all()
                unique_services = sorted(set(service[0] for service in services if service[0]))

                # –û—á–∏—â–∞–µ–º –∫–æ–º–±–æ–±–æ–∫—Å
                self.services_combo.clear()

                if unique_services:
                    # –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª—É–≥–∏ –≤ –∫–æ–º–±–æ–±–æ–∫—Å
                    self.services_combo.addItems(unique_services)

                    # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –≤—ã–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â—É—é —É—Å–ª—É–≥—É
                    if hasattr(self, 'order_data') and self.order_data.get('service'):
                        index = self.services_combo.findText(self.order_data['service'])
                        if index >= 0:
                            self.services_combo.setCurrentIndex(index)

                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
                completer = QCompleter(unique_services)
                completer.setCaseSensitivity(Qt.CaseInsensitive)
                completer.setFilterMode(Qt.MatchContains)
                self.services_combo.setCompleter(completer)

        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Å–ª—É–≥: {str(e)}")



    def calculate_recommended_discount(self, total_orders):
        """–†–∞—Å—á–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–π —Å–∫–∏–¥–∫–∏"""
        if total_orders >= 10:
            return 30
        elif total_orders >= 5:
            return 20
        elif total_orders >= 3:
            return 10
        return 0

    def calculate_total_with_discount(self):
        """–†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º—ã —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
            base_cost = self.cost_spin.value()
            if base_cost <= 0:
                self.discount_info_label.hide()
                self.remaining_label.setText("–û—Å—Ç–∞—Ç–æ–∫: 0.00 ‚ÇΩ")
                return

            # –ü–æ–ª—É—á–∞–µ–º —Å–∫–∏–¥–∫—É
            discount_text = self.discount_combo.currentText()
            discount = float(discount_text.replace('%', '')) if discount_text else 0

            # –†–∞—Å—á–µ—Ç—ã
            discount_amount = base_cost * (discount / 100)
            final_cost = base_cost - discount_amount
            prepayment = self.prepay_spin.value()

            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –æ—Å—Ç–∞—Ç–∫–∞ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏
            remaining = max(0, final_cost - prepayment)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∏–¥–∫–µ
            if discount > 0:
                self.discount_info_label.setText(
                    f"üí∞ –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {base_cost:,.2f} ‚ÇΩ\n"
                    f"üéÅ –°–∫–∏–¥–∫–∞ ({discount}%): {discount_amount:,.2f} ‚ÇΩ\n"
                    f"‚ú® –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {final_cost:,.2f} ‚ÇΩ"
                )
                self.discount_info_label.show()
            else:
                self.discount_info_label.hide()

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫
            self.remaining_label.setText(f"–û—Å—Ç–∞—Ç–æ–∫: {remaining:,.2f} ‚ÇΩ")
            self.remaining_label.setStyleSheet(
                f"color: {'#f44336' if remaining > 0 else '#4caf50'};"
                "font-size: 14px; font-weight: bold;"
            )

            return final_cost, remaining

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏: {e}")
            return base_cost, base_cost - prepayment

    def check_discount_expiration(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å–∫–∏–¥–∫–∏"""
        if self.discount_end_date and datetime.now() > self.discount_end_date:
            self.discount = "0%"
            self.discount_start_date = None
            self.discount_end_date = None
            return True
        return False

    def recalculate_remaining(self):
        """–ü–µ—Ä–µ—Å—á–µ—Ç –æ—Å—Ç–∞—Ç–∫–∞ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–∫–∏–¥–∫–∏
            self.check_discount_expiration()

            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
            base_cost = self.cost or 0

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–∏–¥–∫—É
            discount = float(self.discount.replace('%', '')) if self.discount else 0
            discount_amount = base_cost * (discount / 100)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ —Å–∫–∏–¥–∫–æ–π
            final_cost = base_cost - discount_amount

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫
            self.remaining_amount = max(0, final_cost - (self.paid_amount or 0))

            return self.remaining_amount

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–µ –æ—Å—Ç–∞—Ç–∫–∞: {e}")
            return 0

    def save_order(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
        try:
            if not self.validate_fields():
                return

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏
            final_cost, remaining = self.calculate_total_with_discount()

            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Ñ–æ—Ä–º—ã
            base_cost = self.cost_spin.value()
            discount_text = self.discount_combo.currentText()
            prepayment = self.prepay_spin.value()

            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            def get_value_or_default(value):
                return value.strip() if isinstance(value, str) and value.strip() else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

            order_data = {
                'fio': self.fio_input.text(),  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
                'group': self.group_input.text(),  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
                'service': self.services_combo.currentText(),  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
                'direction': get_value_or_default(self.direction_input.text()),
                'theme': get_value_or_default(self.theme_input.text()),
                'quantity': self.quantity_spin.value(),
                'login': get_value_or_default(self.login_input.text()),
                'password': get_value_or_default(self.password_input.text()),
                'website': get_value_or_default(self.website_input.text()),
                'cost': base_cost,  # –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–µ–∑ —Å–∫–∏–¥–∫–∏
                'paid_amount': prepayment,
                'remaining_amount': remaining,
                'total_amount': final_cost,  # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ —Å–∫–∏–¥–∫–æ–π
                'discount': discount_text,
                'teacher_name': get_value_or_default(self.teacher_input.text()),
                'teacher_email': get_value_or_default(self.teacher_email_input.text()),
                'phone': get_value_or_default(self.phone_input.text()),
                'deadline': self.deadline_combo.currentText(),
                'comment': get_value_or_default(self.comment_text.toPlainText())
            }

            with self.db_manager.session_scope() as session:
                try:
                    if self.order_id:  # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞
                        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ –±–∞–∑—ã –ø–æ ID
                        order = session.query(Order).get(self.order_id)
                        if not order:
                            raise ValueError(f"–ó–∞–∫–∞–∑ —Å ID {self.order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
                        current_status = order.status

                        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                        for key, value in order_data.items():
                            setattr(order, key, value)

                        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
                        order.status = current_status

                    else:  # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
                        order_data['status'] = '–ù–æ–≤—ã–π'
                        order = Order(**order_data)
                        session.add(order)

                    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏
                    order.recalculate_remaining()

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    session.flush()  # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —É –∑–∞–∫–∞–∑–∞ –µ—Å—Ç—å ID

                    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                    try:
                        base_path = r"D:\Users\mgurbanmuradov\Documents\–û–±—â–∞—è"
                        client_path = os.path.join(base_path, order_data['fio'])
                        service_path = os.path.join(client_path, order_data['service'])

                        os.makedirs(service_path, exist_ok=True)

                        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª—ã –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤
                        from ui.windows.template_selector import TemplateSelector
                        reply = QMessageBox.question(
                            self,
                            '–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤',
                            f"{'–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!' if self.order_id else '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!'}\n–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª—ã –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤?",
                            QMessageBox.Yes | QMessageBox.No
                        )

                        if reply == QMessageBox.Yes:
                            dialog = TemplateSelector(
                                self,
                                client_name=order_data['fio'],
                                service_name=order_data['service'],
                                direction=order_data.get('direction', '')
                            )
                            dialog.exec_()

                    except Exception as e:
                        QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                                            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏: {str(e)}")

                    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                    session.commit()

                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
                    self.state_manager.notify_all()
                    self.accept()

                except Exception as e:
                    session.rollback()
                    raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")



    def create_order_folders(self, client_fio, service_name):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫ –¥–ª—è –∑–∞–∫–∞–∑–∞"""
        try:
            # –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–∞–º –∫–ª–∏–µ–Ω—Ç–æ–≤
            base_path = r"D:\Users\mgurbanmuradov\Documents\–û–±—â–∞—è"
            client_path = os.path.join(base_path, client_fio)
            service_path = os.path.join(client_path, service_name)

            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏
            os.makedirs(service_path, exist_ok=True)

            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–ø–∫–∏
            reply = QMessageBox.question(
                self,
                '–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É',
                '–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏?',
                QMessageBox.Yes | QMessageBox.No
            )

            if reply == QMessageBox.Yes:
                os.startfile(service_path)

        except Exception as e:
            QMessageBox.warning(
                self,
                "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ –∑–∞–∫–∞–∑–∞: {str(e)}"
            )
    def create_client_folder(self, fio, service):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            base_path = r"D:\Users\mgurbanmuradov\Documents\–û–±—â–∞—è"
            client_path = os.path.join(base_path, fio)
            works_path = os.path.join(client_path, "–†–∞–±–æ—Ç—ã")
            service_path = os.path.join(works_path, service)

            os.makedirs(service_path, exist_ok=True)
            return service_path

        except Exception as e:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                                f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏: {str(e)}")
            return None

    def validate_fields(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π"""
        required = {
            '–§–ò–û': self.fio_input.text(),
            '–ì—Ä—É–ø–ø–∞': self.group_input.text(),
            '–£—Å–ª—É–≥–∞': self.services_combo.currentText(),
            '–°—Ç–æ–∏–º–æ—Å—Ç—å': self.cost_spin.value()
        }

        empty = [name for name, value in required.items() if not value]

        if empty:
            QMessageBox.warning(
                self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                f"–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {', '.join(empty)}"
            )
            return False

        return True

    def apply_styles(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –µ–¥–∏–Ω–æ–≥–æ —Å—Ç–∏–ª—è –∫ –æ–∫–Ω—É"""
        self.setStyleSheet("""
            QDialog {
                background-color: #ffffff;
                border-radius: 8px;
                padding: 4px;
            }

            QGroupBox {
                background-color: #f7f9fc;
                border: 1px solid #cfd8e3;
                border-radius: 6px;
                margin-top: 6px;
                padding: 6px;
                font-weight: 600;
                font-size: 14px;
            }

            QLabel {
                color: #2c3e50;
                font-size: 14px;
                padding: 4px 6px;
                qproperty-alignment: AlignVCenter | AlignRight;
            }

            QLineEdit, QComboBox, QSpinBox, QDoubleSpinBox {
                padding: 4px;
                border: 1px solid #cfd8e3;
                border-radius: 4px;
                background-color: white;
                color: #2c3e50;
                font-size: 14px;
                min-width: 160px;
                margin: 2px 0;
            }

            QLineEdit:focus, QComboBox:focus, QSpinBox:focus, QDoubleSpinBox:focus {
                border: 2px solid #0056b3;
                background-color: #e3f2fd;
            }

            QPushButton {
                background-color: #0056b3;
                color: white;
                border: none;
                padding: 5px 8px;
                border-radius: 4px;
                font-weight: 600;
                font-size: 14px;
                margin-top: 4px;
            }

            QPushButton:hover {
                background-color: #004494;
            }

            QScrollArea {
                border: none;
                background-color: transparent;
            }

            QScrollBar:vertical {
                border: none;
                background: #dee2e6;
                width: 6px;
                border-radius: 3px;
            }

            QScrollBar::handle:vertical {
                background: #adb5bd;
                border-radius: 3px;
                min-height: 18px;
            }
        """)

if __name__ == '__main__':
    app = QApplication(sys.argv)
