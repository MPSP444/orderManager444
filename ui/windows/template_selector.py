from PyQt5.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout, QLabel,
                             QCheckBox, QPushButton, QScrollArea, QWidget, QMessageBox,
                             QSizePolicy)
from PyQt5.QtCore import Qt
import os
import shutil
import sys


class TemplateSelector(QDialog):
    def __init__(self, parent=None, client_name="", service_name="", direction=""):
        super().__init__(parent)
        self.client_name = client_name
        self.service_name = service_name
        self.direction = direction
        self.selected_templates = []
        self.template_checkboxes = []

        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞ (order_manager)
        current_dir = os.path.dirname(os.path.abspath(__file__))
        project_root = os.path.dirname(os.path.dirname(current_dir))  # –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –Ω–∞ –¥–≤–∞ —É—Ä–æ–≤–Ω—è –≤–≤–µ—Ä—Ö
        self.templates_dir = os.path.join(project_root, "–û–±—Ä–∞–∑—Ü—ã")
        self.initUI()

    def initUI(self):
        self.setWindowTitle("–í—ã–±–æ—Ä —Ñ–∞–π–ª–æ–≤-–æ–±—Ä–∞–∑—Ü–æ–≤")
        self.setMinimumWidth(500)
        self.setMinimumHeight(400)

        layout = QVBoxLayout(self)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã-–æ–±—Ä–∞–∑—Ü—ã –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:")
        header.setStyleSheet("font-size: 14px; font-weight: bold; margin-bottom: 10px;")
        layout.addWidget(header)

        # –û–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll_content = QWidget()
        self.templates_layout = QVBoxLayout(scroll_content)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
        self.load_templates()

        scroll.setWidget(scroll_content)
        layout.addWidget(scroll)

        # –ö–Ω–æ–ø–∫–∏
        buttons_layout = QHBoxLayout()
        select_all_btn = QPushButton("–í—ã–±—Ä–∞—Ç—å –≤—Å–µ")
        select_all_btn.clicked.connect(self.select_all_templates)

        create_btn = QPushButton("–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª—ã")
        create_btn.clicked.connect(self.create_files)
        create_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                padding: 8px 16px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)

        cancel_btn = QPushButton("–û—Ç–º–µ–Ω–∞")
        cancel_btn.clicked.connect(self.reject)

        buttons_layout.addWidget(select_all_btn)
        buttons_layout.addStretch()
        buttons_layout.addWidget(create_btn)
        buttons_layout.addWidget(cancel_btn)

        layout.addLayout(buttons_layout)

    def load_templates(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤"""
        if not os.path.exists(self.templates_dir):
            os.makedirs(self.templates_dir)
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                                f"–ü–∞–ø–∫–∞ —Å –æ–±—Ä–∞–∑—Ü–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–∞–ø–∫–∞ –ø–æ –ø—É—Ç–∏:\n{self.templates_dir}")
            return

        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
        for checkbox in self.template_checkboxes:
            self.templates_layout.removeWidget(checkbox)
            checkbox.deleteLater()
        self.template_checkboxes.clear()

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ –û–±—Ä–∞–∑—Ü—ã
            all_templates = []
            for file in os.listdir(self.templates_dir):
                if os.path.isfile(os.path.join(self.templates_dir, file)):
                    all_templates.append(os.path.join(self.templates_dir, file))

            if not all_templates:
                label = QLabel("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –≤ –ø–∞–ø–∫–µ –û–±—Ä–∞–∑—Ü—ã")
                label.setStyleSheet("color: #666; padding: 20px;")
                self.templates_layout.addWidget(label)
                return

            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            service_keywords = set(word.lower() for word in self.service_name.split())

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
            exact_service_match = []  # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —É—Å–ª—É–≥–æ–π
            partial_service_match = []  # –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —É—Å–ª—É–≥–æ–π
            direction_match = []  # –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
            other_files = []  # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã

            for template in all_templates:
                filename = os.path.basename(template).lower()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —É—Å–ª—É–≥–æ–π
                if self.service_name.lower() in filename:
                    exact_service_match.append(template)
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º —É—Å–ª—É–≥–∏)
                if any(keyword in filename for keyword in service_keywords):
                    partial_service_match.append(template)
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
                if self.direction and self.direction.lower() in filename:
                    direction_match.append(template)
                    continue

                other_files.append(template)

            # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—ã –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            if exact_service_match:
                self.add_template_group("‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ñ–∞–π–ª—ã:", exact_service_match, True)

            if partial_service_match:
                self.add_template_group("üìÅ –ü–æ—Ö–æ–∂–∏–µ —Ñ–∞–π–ª—ã:", partial_service_match, False)

            if direction_match:
                self.add_template_group(f"üìÇ –§–∞–π–ª—ã –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é '{self.direction}':", direction_match, False)

            if other_files:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
                other_files.sort(key=lambda x: os.path.basename(x).lower())
                self.add_template_group("üìë –î—Ä—É–≥–∏–µ —à–∞–±–ª–æ–Ω—ã:", other_files, False)

            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—â–∏–π—Å—è —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω–µ—Ü
            spacer = QWidget()
            spacer.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
            self.templates_layout.addWidget(spacer)

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —à–∞–±–ª–æ–Ω–æ–≤: {str(e)}")
            error_label = QLabel(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤: {str(e)}")
            error_label.setStyleSheet("color: #ff0000; padding: 20px;")
            self.templates_layout.addWidget(error_label)

    def add_template_group(self, group_title, templates, auto_check=False):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã —à–∞–±–ª–æ–Ω–æ–≤"""
        if templates:
            group_label = QLabel(group_title)
            group_label.setStyleSheet("font-weight: bold; color: #666;")
            self.templates_layout.addWidget(group_label)

            for template_path in templates:
                checkbox = QCheckBox(os.path.basename(template_path))
                checkbox.setProperty("template_path", template_path)
                checkbox.setChecked(auto_check)
                self.template_checkboxes.append(checkbox)
                self.templates_layout.addWidget(checkbox)

            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            separator = QLabel()
            separator.setStyleSheet("border-bottom: 1px solid #ddd; margin: 5px 0;")
            self.templates_layout.addWidget(separator)

    def select_all_templates(self):
        """–í—ã–±–æ—Ä –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤"""
        for checkbox in self.template_checkboxes:
            checkbox.setChecked(True)

    def create_files(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤"""
        selected_paths = [cb.property("template_path") for cb in self.template_checkboxes if cb.isChecked()]

        if not selected_paths:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª!")
            return

        try:
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            base_path = r"D:\Users\mgurbanmuradov\Documents\–û–±—â–∞—è"
            client_path = os.path.join(base_path, self.client_name)
            service_path = os.path.join(client_path, self.service_name)

            if not os.path.exists(service_path):
                os.makedirs(service_path)

            # –ö–æ–ø–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
            for template_path in selected_paths:
                file_name = os.path.basename(template_path)
                name, ext = os.path.splitext(file_name)

                # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                new_name = f"{self.client_name} - {name}{ext}"
                new_path = os.path.join(service_path, new_name)

                # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
                shutil.copy2(template_path, new_path)

            QMessageBox.information(self, "–£—Å–ø–µ—à–Ω–æ",
                                    f"–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã –≤ –ø–∞–ø–∫–µ:\n{service_path}")

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–ø–∫—É
            os.startfile(service_path)

            self.accept()

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {str(e)}")

    def get_selected_templates(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤"""
        return [cb.property("template_path") for cb in self.template_checkboxes if cb.isChecked()]