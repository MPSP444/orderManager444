from PyQt5.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout, QPushButton,
                             QLabel, QTableWidget, QTableWidgetItem, QComboBox,
                             QCheckBox, QProgressBar, QTextEdit, QMessageBox,
                             QHeaderView, QSpinBox, QFrame, QListWidget,
                             QLineEdit, QRadioButton, QApplication)
from PyQt5.QtCore import Qt, QTimer, QSettings, QUrl
from PyQt5.QtGui import QColor, QDesktopServices
from datetime import datetime, timedelta, date  # –î–æ–±–∞–≤–∏–ª–∏ –∏–º–ø–æ—Ä—Ç date
import re
from urllib.parse import quote

from core.database_manager import DatabaseManager
from core.database import Order
from ..message_utils import show_error, show_warning
import uuid
import uuid
import urllib.parse
from reviews_manager.config import SITE_CONFIG
import requests

class MessageTemplateManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""

    def __init__(self):
        self.settings = QSettings('MPSP', 'MessageTemplates')

    def save_template(self, name, text):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞"""
        templates = self.settings.value('templates', {})
        if isinstance(templates, dict):
            templates[name] = text
            self.settings.setValue('templates', templates)
            self.settings.sync()

    def get_templates(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤"""
        templates = self.settings.value('templates', {})
        return templates if isinstance(templates, dict) else {}

    def delete_template(self, name):
        """–£–¥–∞–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞"""
        templates = self.settings.value('templates', {})
        if isinstance(templates, dict) and name in templates:
            del templates[name]
            self.settings.setValue('templates', templates)
            self.settings.sync()


class MessageVariablesHelpDialog(QDialog):
    """–î–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""

    def __init__(self, parent=None, view_mode='orders'):
        super().__init__(parent)
        self.view_mode = view_mode
        self.setup_ui()

    def setup_ui(self):
        self.setWindowTitle("–ü–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º —à–∞–±–ª–æ–Ω–∞")
        self.setMinimumSize(700, 500)

        layout = QVBoxLayout(self)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è")
        title_label.setStyleSheet("font-size: 16px; font-weight: bold; margin-bottom: 10px;")
        layout.addWidget(title_label)

        # –ü–æ—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        info_label = QLabel(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–µ —à–∞–±–ª–æ–Ω–∞. "
            "–ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–Ω–∏ –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è."
        )
        info_label.setWordWrap(True)
        layout.addWidget(info_label)

        # –¢–∞–±–ª–∏—Ü–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
        self.variables_table = QTableWidget()
        self.variables_table.setColumnCount(3)
        self.variables_table.setHorizontalHeaderLabels(["–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è", "–û–ø–∏—Å–∞–Ω–∏–µ", "–ü—Ä–∏–º–µ—Ä"])

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        self.variables_table.horizontalHeader().setSectionResizeMode(0, QHeaderView.Fixed)
        self.variables_table.horizontalHeader().setSectionResizeMode(1, QHeaderView.Stretch)
        self.variables_table.horizontalHeader().setSectionResizeMode(2, QHeaderView.Fixed)

        self.variables_table.setColumnWidth(0, 200)
        self.variables_table.setColumnWidth(2, 200)

        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã
        self.variables_table.setStyleSheet("""
            QTableWidget {
                border: 1px solid #ddd;
                border-radius: 4px;
                background-color: white;
            }
            QTableWidget::item {
                padding: 4px;
            }
            QTableWidget::item:selected {
                background-color: #e3f2fd;
            }
            QHeaderView::section {
                background-color: #f5f5f5;
                padding: 6px;
                border: 1px solid #ddd;
                font-weight: bold;
            }
        """)

        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        self.fill_variables_table()

        layout.addWidget(self.variables_table)

        # –ö–Ω–æ–ø–∫–∞ "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"
        copy_row = QHBoxLayout()
        copy_all_btn = QPushButton("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
        copy_all_btn.clicked.connect(self.copy_all_variables)
        copy_all_btn.setStyleSheet("""
            QPushButton {
                background-color: #2196F3;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #1976D2;
            }
        """)

        copy_selected_btn = QPushButton("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é")
        copy_selected_btn.clicked.connect(self.copy_selected_variable)
        copy_selected_btn.setStyleSheet("""
            QPushButton {
                background-color: #FF9800;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #F57C00;
            }
        """)

        copy_row.addWidget(copy_selected_btn)
        copy_row.addWidget(copy_all_btn)
        layout.addLayout(copy_row)

        # –ö–Ω–æ–ø–∫–∞ "–ó–∞–∫—Ä—ã—Ç—å"
        close_btn = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
        close_btn.clicked.connect(self.close)
        close_btn.setStyleSheet("""
            QPushButton {
                background-color: #757575;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #616161;
            }
        """)

        layout.addWidget(close_btn)

    def fill_variables_table(self):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        # –û–±—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ–±–æ–∏—Ö —Ä–µ–∂–∏–º–æ–≤
        common_variables = [
            ["{client_name}", "–§–ò–û –∫–ª–∏–µ–Ω—Ç–∞", "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"],
            ["{phone}", "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞", "+7 (999) 123-45-67"],
            ["{days_waiting}", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã", "30"]
        ]

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∂–∏–º–∞ "–ü–æ –∑–∞–∫–∞–∑–∞–º"
        order_variables = [
            ["{order_id}", "–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞", "1234"],
            ["{service}", "–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏", "–î–∏–ø–ª–æ–º–Ω–∞—è —Ä–∞–±–æ—Ç–∞"],
            ["{direction}", "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "–≠–∫–æ–Ω–æ–º–∏–∫–∞"],
            ["{theme}", "–¢–µ–º–∞ —Ä–∞–±–æ—Ç—ã", "–ê–Ω–∞–ª–∏–∑ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"],
            ["{created_date}", "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞", "01.01.2024"],
            ["{amount}", "–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ", "5000.00 ‚ÇΩ"],
            ["{discount}", "–¢–µ–∫—É—â–∞—è —Å–∫–∏–¥–∫–∞", "10%"],
            ["{discount_start_date}", "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Å–∫–∏–¥–∫–∏", "01.01.2024"],
            ["{discount_end_date}", "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–∫–∏–¥–∫–∏", "05.01.2024"],
            ["{deadline}", "–°—Ä–æ–∫ —Å–¥–∞—á–∏", "10 –¥–Ω–µ–π"],
            ["{status}", "–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞", "–í –æ–∂–∏–¥–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã"],
            ["{teacher_name}", "–§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", "–ü–µ—Ç—Ä–æ–≤ –ü.–ü."],
            ["{discounted_amount}", "–°—É–º–º–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π", "4500.00 ‚ÇΩ"]
        ]

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∂–∏–º–∞ "–ü–æ –∫–ª–∏–µ–Ω—Ç–∞–º"
        client_variables = [
            ["{total_orders}", "–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞", "5"],
            ["{waiting_orders}", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã", "2"],
            ["{total_amount}", "–û–±—â–∞—è —Å—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ", "12000.00 ‚ÇΩ"],
            ["{earliest_date}", "–î–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞", "01.01.2024"],
            ["{latest_date}", "–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞", "15.03.2024"]
        ]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
        variables_to_show = common_variables[:]
        if self.view_mode == 'orders':
            variables_to_show.extend(order_variables)
        else:
            variables_to_show.extend(client_variables)

        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        self.variables_table.setRowCount(len(variables_to_show))
        for row, (variable, description, example) in enumerate(variables_to_show):
            # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è
            var_item = QTableWidgetItem(variable)
            var_item.setTextAlignment(Qt.AlignCenter)
            self.variables_table.setItem(row, 0, var_item)

            # –û–ø–∏—Å–∞–Ω–∏–µ
            desc_item = QTableWidgetItem(description)
            self.variables_table.setItem(row, 1, desc_item)

            # –ü—Ä–∏–º–µ—Ä
            example_item = QTableWidgetItem(example)
            example_item.setTextAlignment(Qt.AlignCenter)
            self.variables_table.setItem(row, 2, example_item)

    def copy_all_variables(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        variables = []
        for row in range(self.variables_table.rowCount()):
            variables.append(self.variables_table.item(row, 0).text())

        text = "\n".join(variables)
        QApplication.clipboard().setText(text)

        QMessageBox.information(
            self,
            "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "–í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!"
        )

    def copy_selected_variable(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        selected_items = self.variables_table.selectedItems()
        if not selected_items:
            QMessageBox.warning(
                self,
                "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ —Ç–∞–±–ª–∏—Ü–µ!"
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ä—è–¥ –ø–µ—Ä–≤–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        row = selected_items[0].row()
        variable = self.variables_table.item(row, 0).text()

        QApplication.clipboard().setText(variable)

        QMessageBox.information(
            self,
            "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ",
            f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {variable} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!"
        )

class ReminderHistory:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""

    def __init__(self):
        self.settings = QSettings('MPSP', 'ReminderHistory')

    def add_reminder(self, client_fio, order_id):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏"""
        history = self.settings.value('history', {})
        if not isinstance(history, dict):
            history = {}

        if client_fio not in history:
            history[client_fio] = []

        history[client_fio].append({
            'order_id': order_id,
            'date': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        })

        self.settings.setValue('history', history)
        self.settings.sync()

    def get_last_reminder(self, client_fio):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        history = self.settings.value('history', {})
        if not isinstance(history, dict):
            return None

        if client_fio not in history or not history[client_fio]:
            return None

        last_reminder = history[client_fio][-1]
        return datetime.strptime(last_reminder['date'], '%Y-%m-%d %H:%M:%S')

    def can_send_reminder(self, client_fio):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        last_reminder = self.get_last_reminder(client_fio)
        if not last_reminder:
            return True

        return (datetime.now() - last_reminder) > timedelta(days=30)


class TemplateManagerDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞–º–∏"""

    def __init__(self, parent=None):
        super().__init__(parent)
        self.template_manager = MessageTemplateManager()
        self.setup_ui()

    def setup_ui(self):
        self.setWindowTitle("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏")
        self.setMinimumWidth(600)
        layout = QVBoxLayout(self)

        # –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
        self.template_list = QListWidget()
        self.template_list.currentItemChanged.connect(self.template_selected)
        layout.addWidget(QLabel("–®–∞–±–ª–æ–Ω—ã:"))
        layout.addWidget(self.template_list)

        # –†–µ–¥–∞–∫—Ç–æ—Ä —à–∞–±–ª–æ–Ω–∞
        self.name_edit = QLineEdit()
        self.text_edit = QTextEdit()

        layout.addWidget(QLabel("–ù–∞–∑–≤–∞–Ω–∏–µ:"))
        layout.addWidget(self.name_edit)
        layout.addWidget(QLabel("–¢–µ–∫—Å—Ç:"))
        layout.addWidget(self.text_edit)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_layout = QHBoxLayout()

        save_btn = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        save_btn.clicked.connect(self.save_template)
        save_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: 1px solid #3d8b40;
                padding: 8px 16px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)

        delete_btn = QPushButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å")
        delete_btn.clicked.connect(self.delete_template)
        delete_btn.setStyleSheet("""
            QPushButton {
                background-color: #f44336;
                color: white;
                border: 1px solid #3d8b40;
                padding: 8px 16px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #da190b;
            }
        """)

        close_btn = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
        close_btn.clicked.connect(self.close)

        btn_layout.addWidget(save_btn)
        btn_layout.addWidget(delete_btn)
        btn_layout.addWidget(close_btn)

        layout.addLayout(btn_layout)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —à–∞–±–ª–æ–Ω—ã
        self.load_templates()

    def load_templates(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤"""
        self.template_list.clear()
        templates = self.template_manager.get_templates()
        for name in templates.keys():
            self.template_list.addItem(name)

    def template_selected(self, current, previous):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞"""
        if current:
            name = current.text()
            templates = self.template_manager.get_templates()
            if name in templates:
                self.name_edit.setText(name)
                self.text_edit.setPlainText(templates[name])

    def save_template(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞"""
        name = self.name_edit.text().strip()
        text = self.text_edit.toPlainText().strip()

        if not name or not text:
            show_warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                         "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞!")
            return

        self.template_manager.save_template(name, text)
        self.load_templates()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
        QMessageBox.information(self, "–£—Å–ø–µ—à–Ω–æ", "–®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–∏–∞–ª–æ–≥–∞ –≤ Accepted
        self.accept()  # –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–º –æ–∫–Ω–µ
    def delete_template(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞"""
        current = self.template_list.currentItem()
        if current:
            name = current.text()
            reply = QMessageBox.question(
                self,
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                f"–£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω '{name}'?",
                QMessageBox.Yes | QMessageBox.No,
                QMessageBox.No
            )

            if reply == QMessageBox.Yes:
                self.template_manager.delete_template(name)
                self.load_templates()
                self.name_edit.clear()
                self.text_edit.clear()

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
                QMessageBox.information(self, "–£—Å–ø–µ—à–Ω–æ", "–®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
        else:
            show_warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")


class ReminderHistoryDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""

    def __init__(self, parent=None):
        super().__init__(parent)
        self.reminder_history = ReminderHistory()
        self.setup_ui()

    def setup_ui(self):
        self.setWindowTitle("–ò—Å—Ç–æ—Ä–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        self.setMinimumSize(800, 600)

        layout = QVBoxLayout(self)

        # –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏
        self.table = QTableWidget()
        self.table.setColumnCount(4)
        self.table.setHorizontalHeaderLabels([
            "–ö–ª–∏–µ–Ω—Ç", "–ó–∞–∫–∞–∑", "–î–∞—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", "–°–ª–µ–¥—É—é—â–µ–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ"
        ])

        header = self.table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.Stretch)
        header.setSectionResizeMode(1, QHeaderView.Fixed)
        header.setSectionResizeMode(2, QHeaderView.Fixed)
        header.setSectionResizeMode(3, QHeaderView.Fixed)

        self.table.setColumnWidth(1, 100)
        self.table.setColumnWidth(2, 150)
        self.table.setColumnWidth(3, 150)

        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã
        self.table.setStyleSheet("""
            QTableWidget {
                border: 1px solid #ddd;
                border-radius: 4px;
                background-color: white;
            }
            QTableWidget::item {
                padding: 4px;
            }
            QTableWidget::item:selected {
                background-color: #e3f2fd;
            }
            QHeaderView::section {
                background-color: #f5f5f5;
                padding: 6px;
                border: 1px solid #ddd;
                font-weight: bold;
            }
        """)

        layout.addWidget(self.table)

        # –ö–Ω–æ–ø–∫–∏
        btn_layout = QHBoxLayout()

        refresh_btn = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
        refresh_btn.clicked.connect(self.load_history)
        refresh_btn.setStyleSheet("""
            QPushButton {
                background-color: #2196F3;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #1976D2;
            }
        """)

        clear_btn = QPushButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
        clear_btn.clicked.connect(self.clear_history)
        clear_btn.setStyleSheet("""
            QPushButton {
                background-color: #f44336;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #d32f2f;
            }
        """)

        close_btn = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
        close_btn.clicked.connect(self.close)
        close_btn.setStyleSheet("""
            QPushButton {
                background-color: #757575;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #616161;
            }
        """)

        btn_layout.addWidget(refresh_btn)
        btn_layout.addWidget(clear_btn)
        btn_layout.addStretch()
        btn_layout.addWidget(close_btn)

        layout.addLayout(btn_layout)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        self.load_history()

    def load_history(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        try:
            history = self.reminder_history.settings.value('history', {})
            if not isinstance(history, dict):
                history = {}

            self.table.setRowCount(0)
            row = 0

            for client, reminders in history.items():
                for reminder in reminders:
                    self.table.insertRow(row)

                    # –ö–ª–∏–µ–Ω—Ç
                    self.table.setItem(row, 0, QTableWidgetItem(client))

                    # ID –∑–∞–∫–∞–∑–∞
                    order_id = reminder.get('order_id', '–ù/–î')
                    self.table.setItem(row, 1, QTableWidgetItem(str(order_id)))

                    # –î–∞—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                    reminder_date = datetime.strptime(
                        reminder['date'], '%Y-%m-%d %H:%M:%S'
                    )
                    next_date = reminder_date + timedelta(days=30)

                    date_item = QTableWidgetItem(
                        reminder_date.strftime('%d.%m.%Y %H:%M')
                    )
                    next_date_item = QTableWidgetItem(
                        next_date.strftime('%d.%m.%Y %H:%M')
                    )

                    # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –¥–∞—Ç
                    if datetime.now() < next_date:
                        next_date_item.setBackground(QColor("#ffebee"))  # –ö—Ä–∞—Å–Ω—ã–π
                    else:
                        next_date_item.setBackground(QColor("#e8f5e9"))  # –ó–µ–ª–µ–Ω—ã–π

                    self.table.setItem(row, 2, date_item)
                    self.table.setItem(row, 3, next_date_item)

                    row += 1

            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
            self.table.sortItems(2, Qt.DescendingOrder)

        except Exception as e:
            show_error(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")

    def clear_history(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        try:
            reply = QMessageBox.question(
                self,
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π?\n"
                "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å.",
                QMessageBox.Yes | QMessageBox.No,
                QMessageBox.No
            )

            if reply == QMessageBox.Yes:
                self.reminder_history.settings.remove('history')
                self.reminder_history.settings.sync()
                self.load_history()
                QMessageBox.information(self, "–£—Å–ø–µ—à–Ω–æ",
                                        "–ò—Å—Ç–æ—Ä–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—á–∏—â–µ–Ω–∞!")

        except Exception as e:
            show_error(self, "–û—à–∏–±–∫–∞",
                       f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")

class MassMessagingDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.db_manager = DatabaseManager()
        self.template_manager = MessageTemplateManager()
        self.reminder_history = ReminderHistory()
        self.selected_orders = []
        self.view_mode = 'orders'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ä–µ–∂–∏–º –∑–∞–∫–∞–∑–æ–≤
        self.setup_ui()
        self.load_orders()
        self.load_templates()

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.setWindowTitle("–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π")
        self.setMinimumSize(1200, 800)

        layout = QVBoxLayout(self)

        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ —Ä–µ–∂–∏–º–∞–º–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        filter_frame = self.create_filter_panel()
        layout.addWidget(filter_frame)

        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤
        self.table = QTableWidget()
        self.setup_table()
        layout.addWidget(self.table)

        # –ü–∞–Ω–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è
        message_frame = self.create_message_panel()
        layout.addWidget(message_frame)

        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
        buttons_frame = self.create_buttons_panel()
        layout.addWidget(buttons_frame)


    def create_filter_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ —Ä–µ–∂–∏–º–∞–º–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        frame = QFrame()
        frame.setStyleSheet("""
            QFrame {
                background-color: #f5f5f5;
                border: 1px solid #ddd;
                border-radius: 4px;
                padding: 8px;
            }
        """)

        layout = QVBoxLayout(frame)

        # –í–µ—Ä—Ö–Ω–∏–π —Ä—è–¥ —Å —Ä–µ–∂–∏–º–∞–º–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø–µ—Ä–∏–æ–¥–æ–º
        top_row = QHBoxLayout()

        # –†–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
        mode_group = QHBoxLayout()
        self.orders_radio = QRadioButton("–ü–æ –∑–∞–∫–∞–∑–∞–º")
        self.clients_radio = QRadioButton("–ü–æ –∫–ª–∏–µ–Ω—Ç–∞–º")
        self.reviews_radio = QRadioButton("–î–ª—è –æ—Ç–∑—ã–≤–æ–≤")  # –ù–æ–≤—ã–π —Ä–∞–¥–∏–æ–±–∞—Ç—Ç–æ–Ω
        self.orders_radio.setChecked(True)

        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–æ–∫
        radio_style = """
            QRadioButton {
                background-color: transparent;
                padding: 5px;
                border-radius: 4px;
                font-size: 14px;
            }
            QRadioButton:hover {
                background-color: #e0e0e0;
            }
        """
        self.orders_radio.setStyleSheet(radio_style)
        self.clients_radio.setStyleSheet(radio_style)
        self.reviews_radio.setStyleSheet(radio_style)  # –°—Ç–∏–ª—å –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞–¥–∏–æ–±–∞—Ç—Ç–æ–Ω–∞

        self.orders_radio.toggled.connect(self.on_view_mode_changed)
        self.clients_radio.toggled.connect(self.on_view_mode_changed)
        self.reviews_radio.toggled.connect(self.on_view_mode_changed)  # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫

        mode_group.addWidget(QLabel("–†–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:"))
        mode_group.addWidget(self.orders_radio)
        mode_group.addWidget(self.clients_radio)
        mode_group.addWidget(self.reviews_radio)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–∞–¥–∏–æ–±–∞—Ç—Ç–æ–Ω
        mode_group.addStretch()

        # –§–∏–ª—å—Ç—Ä –ø–æ –ø–µ—Ä–∏–æ–¥—É
        period_layout = QHBoxLayout()
        self.period_combo = QComboBox()
        self.period_combo.addItems([
            "–í—Å–µ –∑–∞–∫–∞–∑—ã",
            "–ë–æ–ª–µ–µ 6 –º–µ—Å—è—Ü–µ–≤",
            "3-6 –º–µ—Å—è—Ü–µ–≤",
            "1-3 –º–µ—Å—è—Ü–∞",
            "–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü"
        ])
        self.period_combo.currentIndexChanged.connect(self.filter_orders)
        period_layout.addWidget(QLabel("–ü–µ—Ä–∏–æ–¥:"))
        period_layout.addWidget(self.period_combo)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Ö–Ω–∏–π —Ä—è–¥
        top_row.addLayout(mode_group)
        top_row.addLayout(period_layout)
        top_row.addStretch()

        # –í—Ç–æ—Ä–æ–π —Ä—è–¥ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        middle_row = QHBoxLayout()

        # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
        status_layout = QHBoxLayout()
        self.status_combo = QComboBox()
        self.status_combo.addItems([
            "–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã",
            "–í –æ–∂–∏–¥–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã",
            "–ù–æ–≤—ã–π",
            "–í —Ä–∞–±–æ—Ç–µ",
            "–í—ã–ø–æ–ª–Ω–µ–Ω",
            "–û—Ç–º–µ–Ω–µ–Ω"
        ])
        self.status_combo.currentIndexChanged.connect(self.filter_orders)
        status_layout.addWidget(QLabel("–°—Ç–∞—Ç—É—Å:"))
        status_layout.addWidget(self.status_combo)

        # –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—É
        gender_layout = QHBoxLayout()
        self.gender_combo = QComboBox()
        self.gender_combo.addItems([
            "–í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã",
            "–ú—É–∂—á–∏–Ω—ã",
            "–ñ–µ–Ω—â–∏–Ω—ã"
        ])
        self.gender_combo.currentIndexChanged.connect(self.filter_orders)
        gender_layout.addWidget(QLabel("–ü–æ–ª:"))
        gender_layout.addWidget(self.gender_combo)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–π —Ä—è–¥
        middle_row.addLayout(status_layout)
        middle_row.addLayout(gender_layout)
        middle_row.addStretch()

        # –¢—Ä–µ—Ç–∏–π —Ä—è–¥ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        button_row = QHBoxLayout()

        # –ö–Ω–æ–ø–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
        history_btn = QPushButton("üìÖ –ò—Å—Ç–æ—Ä–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        history_btn.clicked.connect(self.show_history)
        history_btn.setStyleSheet("""
            QPushButton {
                background-color: #2196F3;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #1976D2;
            }
        """)

        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        refresh_btn = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
        refresh_btn.clicked.connect(self.load_orders)
        refresh_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)

        button_row.addStretch()
        button_row.addWidget(history_btn)
        button_row.addWidget(refresh_btn)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ä—è–¥—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞–∫–µ—Ç
        layout.addLayout(top_row)
        layout.addLayout(middle_row)
        layout.addLayout(button_row)

        return frame

    # 2. –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–æ–¥ on_view_mode_changed –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞

    def on_view_mode_changed(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        old_mode = self.view_mode

        if self.orders_radio.isChecked():
            self.view_mode = 'orders'
        elif self.clients_radio.isChecked():
            self.view_mode = 'clients'
        else:
            self.view_mode = 'reviews'  # –ù–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤

        self.load_orders()
        self.update_message_template()

        # –ü—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –≤ —Ä–µ–∂–∏–º –æ—Ç–∑—ã–≤–æ–≤, –≤—ã–±–∏—Ä–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —à–∞–±–ª–æ–Ω
        if self.view_mode == 'reviews' and old_mode != 'reviews':
            review_template_index = self.template_combo.findText("–ó–∞–ø—Ä–æ—Å –æ—Ç–∑—ã–≤–∞")
            if review_template_index >= 0:
                self.template_combo.setCurrentIndex(review_template_index)
                self.load_message_template()

    # 3. –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–æ–¥ load_orders –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞

    def load_orders(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        try:
            self.table.setRowCount(0)
            self.table.setSortingEnabled(False)  # –û—Ç–∫–ª—é—á–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –Ω–∞ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
            if hasattr(self, 'selected_count_label'):
                self.selected_count_label.setText("–í—ã–±—Ä–∞–Ω–æ: 0")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            status_filter = self.status_combo.currentText()
            status_condition = None if status_filter == "–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã" else status_filter

            with self.db_manager.session_scope() as session:
                # –ó–∞–ø—Ä–æ—Å –∑–∞–∫–∞–∑–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∏–ª—å—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞
                query = session.query(Order)

                if status_condition:
                    query = query.filter(Order.status == status_condition)

                # –í —Ä–µ–∂–∏–º–µ –æ—Ç–∑—ã–≤–æ–≤ –∏—Å–∫–ª—é—á–∞–µ–º –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
                if self.view_mode == 'reviews':
                    query = query.filter(Order.status != '–û—Ç–º–µ–Ω–µ–Ω')

                orders = query.order_by(Order.created_date.desc()).all()

                if self.view_mode == 'orders':
                    self.load_orders_view(orders)
                elif self.view_mode == 'clients':
                    self.load_clients_view(orders)
                else:
                    self.load_reviews_view(orders)  # –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–∑—ã–≤–æ–≤

            self.table.setSortingEnabled(True)  # –í–∫–ª—é—á–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –æ–±—Ä–∞—Ç–Ω–æ
            self.filter_orders()  # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã (–ø–µ—Ä–∏–æ–¥, –ø–æ–ª)
            self.reload_table_checkboxes()
        except Exception as e:
            show_error(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

    def load_reviews_view(self, orders):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤"""
        self.table.setHorizontalHeaderLabels([
            "", "–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤", "–ö–ª–∏–µ–Ω—Ç", "–ö–æ–ª-–≤–æ —É—Å–ª—É–≥", "–ú–∞–∫—Å. —Å—É–º–º–∞",
            "–î–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞", "–î–Ω–µ–π —Å –Ω–∞–º–∏", "–¢–µ–ª–µ—Ñ–æ–Ω", "–£—Å–ª—É–≥–∏", "–ü—Ä–µ–¥–ª–∞–≥–∞–ª–∏ –æ—Ç–∑—ã–≤"
        ])

        current_date = datetime.now()

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
        clients_data = {}
        clients_with_review_links = set()

        try:
            with self.db_manager.session_scope() as session:
                # –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∏–º–µ—é—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç–∑—ã–≤–∞
                clients_with_links_query = session.query(Order.fio.distinct()).filter(
                    Order.review_token.isnot(None),
                    Order.review_token != ''
                )

                for client_row in clients_with_links_query:
                    clients_with_review_links.add(client_row[0])

                print(f"–ö–ª–∏–µ–Ω—Ç—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤: {len(clients_with_review_links)}")

                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
                unique_clients_query = session.query(Order.fio.distinct()).filter(
                    Order.status != '–û—Ç–º–µ–Ω–µ–Ω'
                )

                print("–ó–∞–≥—Ä—É–∂–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
                unique_clients = [row[0] for row in unique_clients_query if row[0] not in clients_with_review_links]
                print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(unique_clients)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –±–µ–∑ —Å—Å—ã–ª–æ–∫
                for client_fio in unique_clients:
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–∞ (–∫—Ä–æ–º–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö)
                    client_orders = session.query(Order).filter(
                        Order.fio == client_fio,
                        Order.status != '–û—Ç–º–µ–Ω–µ–Ω'
                    ).all()

                    # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    if not client_orders:
                        continue

                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏
                    unique_services = set()
                    for co in client_orders:
                        if co.service:
                            unique_services.add(co.service)

                    # –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç–æ–π
                    max_payment = 0
                    max_payment_order = None

                    for co in client_orders:
                        payment = self.safe_float(co.paid_amount)
                        if payment > max_payment:
                            max_payment = payment
                            max_payment_order = co

                    # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ —Å –æ–ø–ª–∞—Ç–æ–π, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑
                    if not max_payment_order and client_orders:
                        max_payment_order = client_orders[0]
                        max_payment = self.safe_float(max_payment_order.cost)

                    # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π —Ä–∞–Ω–Ω–∏–π –∑–∞–∫–∞–∑ –¥–ª—è –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞
                    earliest_date = None
                    for co in client_orders:
                        if co.created_date:
                            if not earliest_date or co.created_date < earliest_date:
                                earliest_date = co.created_date

                    # –ï—Å–ª–∏ –¥–∞—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
                    if not earliest_date:
                        earliest_date = datetime.now().date()

                    # –£–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å –¥–∞—Ç–∞–º–∏ - –ø—Ä–∏–≤–æ–¥–∏–º –∫ datetime
                    if isinstance(earliest_date, date):
                        earliest_datetime = datetime.combine(earliest_date, datetime.min.time())
                    else:
                        earliest_datetime = earliest_date

                    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–Ω–µ–π –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏
                    days_with_us = (current_date - earliest_datetime).days

                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    date_formatted = earliest_datetime.strftime('%d.%m.%Y')

                    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å —É—Å–ª—É–≥–∞–º–∏
                    services_list = list(unique_services)
                    services_text = ", ".join(services_list[:3])
                    if len(services_list) > 3:
                        services_text += f" –∏ –µ—â–µ {len(services_list) - 3}"

                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
                    clients_data[client_fio] = {
                        'total_orders': len(client_orders),
                        'unique_services': len(unique_services) if unique_services else 1,
                        'max_payment': max_payment if max_payment else 0,
                        'max_payment_order': max_payment_order,
                        'phone': max_payment_order.phone if max_payment_order and max_payment_order.phone else "",
                        'earliest_date': earliest_datetime,
                        'earliest_date_formatted': date_formatted,
                        'days_with_us': days_with_us,
                        'services': services_text or "–ù–µ —É–∫–∞–∑–∞–Ω—ã",
                        'all_orders': client_orders  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                    }

                # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
                row = 0
                for client, data in clients_data.items():
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    if client and data:
                        self.table.insertRow(row)

                        # –°–æ–∑–¥–∞–µ–º —á–µ–∫–±–æ–∫—Å —Å —è–≤–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ —Å—Ç—Ä–æ–∫–µ
                        checkbox = QCheckBox()
                        checkbox.setChecked(False)
                        checkbox.setEnabled(True)
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª—è–º–±–¥–∞-—Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                        checkbox.stateChanged.connect(
                            lambda state, r=row: self.on_checkbox_state_changed_reviews(state, r))
                        self.table.setCellWidget(row, 0, checkbox)

                        # –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
                        self.table.setItem(row, 1, QTableWidgetItem(str(data['total_orders'])))
                        self.table.setItem(row, 2, QTableWidgetItem(client))
                        self.table.setItem(row, 3, QTableWidgetItem(str(data['unique_services'])))
                        self.table.setItem(row, 4, QTableWidgetItem(f"{data['max_payment']:,.2f} ‚ÇΩ"))

                        # –î–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É
                        self.table.setItem(row, 5, QTableWidgetItem(data['earliest_date_formatted']))

                        # –î–Ω–µ–π —Å –Ω–∞–º–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                        days_item = QTableWidgetItem(str(data['days_with_us']))
                        self.set_days_color(days_item, data['days_with_us'])
                        self.table.setItem(row, 6, days_item)

                        # –¢–µ–ª–µ—Ñ–æ–Ω
                        self.table.setItem(row, 7, QTableWidgetItem(data['phone'] or ""))

                        # –£—Å–ª—É–≥–∏ –∫–ª–∏–µ–Ω—Ç–∞
                        self.table.setItem(row, 8, QTableWidgetItem(data['services']))

                        # –°—Ç–∞—Ç—É—Å –æ—Ç–∑—ã–≤–∞
                        self.table.setItem(row, 9, QTableWidgetItem("–ù–µ –ø—Ä–µ–¥–ª–∞–≥–∞–ª–∏"))

                        row += 1

                print(f"–ü–æ–∫–∞–∑–∞–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ: {row} –∏–∑ {len(clients_data)}")

        except Exception as e:
            import traceback
            traceback.print_exc()  # –ü–µ—á–∞—Ç–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            show_error(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤: {str(e)}")

    def on_checkbox_state_changed_reviews(self, state, row):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–∑—ã–≤–æ–≤"""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        self.update_selected_count()
        print(f"–ò–∑–º–µ–Ω–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞ –≤ —Å—Ç—Ä–æ–∫–µ {row} –Ω–∞ {state}")


    def safe_float(self, value):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ float"""
        try:
            if isinstance(value, (int, float)):
                return float(value)
            if isinstance(value, str):
                if value.strip() == "–ù–µ —É–∫–∞–∑–∞–Ω–æ":
                    return 0.0
                # –£–¥–∞–ª—è–µ–º –∑–∞–ø—è—Ç—ã–µ –∏ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                return float(value.replace(',', '.').replace(' ', '').replace('‚ÇΩ', ''))
            return 0.0
        except (ValueError, TypeError, AttributeError):
            return 0.0

    def load_templates(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤"""
        current_text = self.template_combo.currentText()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä
        self.template_combo.clear()

        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
        standard_templates = {
            "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ": (
                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {client_name}!\n\n"
                "–£ –≤–∞—Å –µ—Å—Ç—å –∑–∞–∫–∞–∑ #{order_id} –æ—Ç {created_date} - {service}.\n"
                "–•–æ—Ç–µ–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å, –∞–∫—Ç—É–∞–ª–µ–Ω –ª–∏ –µ—â–µ –¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑?\n\n"
                "–ï—Å–ª–∏ –¥–∞, —Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–Ω–µ—Å–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.\n"
                "–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount} ‚ÇΩ\n\n"
                "–î–ª—è –æ–ø–ª–∞—Ç—ã:\n"
                "üí≥ –°–±–µ—Ä–±–∞–Ω–∫: +79066322571\n"
                "üì± WhatsApp: +79066322571"
            ),
            "–ö–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ": (
                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {client_name}!\n"
                "–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –∑–∞–∫–∞–∑–µ #{order_id} - {service}.\n"
                "–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount} ‚ÇΩ\n"
                "–î–ª—è –æ–ø–ª–∞—Ç—ã: +79066322571"
            ),
            "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∏": (
                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {client_name}!\n\n"
                "–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ #{order_id} - {service}.\n"
                "–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –¥–Ω–µ–π:\n"
                "- –°–∫–∏–¥–∫–∞ 10%\n"
                "- –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ —Å–æ —Å–∫–∏–¥–∫–æ–π: {amount} ‚ÇΩ\n\n"
                "–î–ª—è –æ–ø–ª–∞—Ç—ã:\n"
                "üí≥ –°–±–µ—Ä–±–∞–Ω–∫: +79066322571\n"
                "üì± WhatsApp: +79066322571"
            ),
            "–ì—Ä—É–ø–ø–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ": (
                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {client_name}!\n\n"
                "–£ –≤–∞—Å –µ—Å—Ç—å {total_orders} –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –æ–±—â—É—é —Å—É–º–º—É {total_amount} ‚ÇΩ.\n"
                "–•–æ—Ç–µ–ª–∏ –±—ã —É—Ç–æ—á–Ω–∏—Ç—å, –∞–∫—Ç—É–∞–ª—å–Ω—ã –ª–∏ –µ—â–µ –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã?\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ! "
                "–ù–∞–º –≤–∞–∂–Ω–æ –∑–Ω–∞—Ç—å –≤–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ –∑–∞–∫–∞–∑–∞–º.\n\n"
                "–î–ª—è –æ–ø–ª–∞—Ç—ã:\n"
                "üí≥ –°–±–µ—Ä–±–∞–Ω–∫: +79066322571\n"
                "üì± WhatsApp: +79066322571"
            ),
            "–í–µ–∂–ª–∏–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ": (
                "–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {client_name}!\n\n"
                "–ú—ã –∑–∞–º–µ—Ç–∏–ª–∏, —á—Ç–æ –∑–∞–∫–∞–∑ #{order_id} ({service}) –æ—Ç {created_date} "
                "–≤—Å–µ –µ—â–µ –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã.\n\n"
                "–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount} ‚ÇΩ\n\n"
                "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –æ–ø–ª–∞—Ç–æ–π, "
                "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π—Ç–µ –Ω–∞–º –∑–Ω–∞—Ç—å. –ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å!\n\n"
                "–î–ª—è –æ–ø–ª–∞—Ç—ã:\n"
                "üí≥ –°–±–µ—Ä–±–∞–Ω–∫: +79066322571\n"
                "üì± WhatsApp: +79066322571"
            ),
            "–°—Ä–æ—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ": (
                "‚ö†Ô∏è –í–∞–∂–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ‚ö†Ô∏è\n\n"
                "–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {client_name},\n\n"
                "–í–∞—à –∑–∞–∫–∞–∑ #{order_id} - {service} —Ç—Ä–µ–±—É–µ—Ç —Å—Ä–æ—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã.\n"
                "–°—É–º–º–∞: {amount} ‚ÇΩ\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –µ–≥–æ –æ—Ç–º–µ–Ω—ã.\n\n"
                "–î–ª—è –æ–ø–ª–∞—Ç—ã:\n"
                "üí≥ –°–±–µ—Ä–±–∞–Ω–∫: +79066322571\n"
                "üì± WhatsApp: +79066322571"
            ),
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤
            "–ó–∞–ø—Ä–æ—Å –æ—Ç–∑—ã–≤–∞": (
    "üåü –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {client_name}! üåü\n\n"
    "–í—ã —Å –Ω–∞–º–∏ —É–∂–µ —Å {earliest_date}, –∏ –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è –æ—Ñ–æ—Ä–º–∏–ª–∏ {total_orders} –∑–∞–∫–∞–∑(–æ–≤). "
    "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ! üôè\n\n"
    "–ù–∞–º –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –í–∞—à–µ –º–Ω–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ –Ω–∞—à–µ–π —Ä–∞–±–æ—Ç–µ, "
    "–æ—Å—Ç–∞–≤–∏–≤ –æ—Ç–∑—ã–≤ –ø–æ —Å—Å—ã–ª–∫–µ:\n"
    "üëáüëáüëá\n"
    "{review_link}\n"
    "üëÜüëÜüëÜ\n\n"
    "–í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –µ—â–µ –ª—É—á—à–µ! ‚ú®\n\n"
    "–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n"
    "–ö–æ–º–∞–Ω–¥–∞ MPSP üíº"
),
"–ö–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å –æ—Ç–∑—ã–≤–∞": (
    "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {client_name}!\n\n"
    "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ —Å –Ω–∞–º–∏! ü§ù\n"
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ –Ω–∞—à–µ–π —Ä–∞–±–æ—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n"
    "‚¨áÔ∏è ‚¨áÔ∏è ‚¨áÔ∏è\n"
    "{review_link}\n"
    "‚¨ÜÔ∏è ‚¨ÜÔ∏è ‚¨ÜÔ∏è\n\n"
    "–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å! üíØ"
),
            "–î—Ä—É–∂–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å –æ—Ç–∑—ã–≤–∞": (
                "–ü—Ä–∏–≤–µ—Ç, {client_name}! üëã\n\n"
                "–¢—ã —Å –Ω–∞–º–∏ —É–∂–µ —Å {earliest_date} - —ç—Ç–æ —Ü–µ–ª—ã—Ö {days_waiting} –¥–Ω–µ–π –¥—Ä—É–∂–±—ã! ü§ó\n"
                "–ú—ã —Ç—É—Ç –ø–æ–¥—É–º–∞–ª–∏... ü§î –ê —á—Ç–æ –µ—Å–ª–∏ —Ç—ã —Ä–∞—Å—Å–∫–∞–∂–µ—à—å, –∫–∞–∫ —Ç–µ–±–µ —Å –Ω–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è?\n"
                "–ë—É–∫–≤–∞–ª—å–Ω–æ –ø–∞—Ä—É —Å–ª–æ–≤ - —Ö–æ—Ä–æ—à–æ, –ø–ª–æ—Ö–æ, —á—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, –∞ —á—Ç–æ –Ω–µ—Ç.\n\n"
                "–í–æ—Ç —Ç—É—Ç –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üëáüëáüëá\n"
                "{review_link}\n"
                "‚òùÔ∏è –ñ–º–∏ –Ω–∞ —Å—Å—ã–ª–∫—É! ‚òùÔ∏è\n\n"
                "P.S. –ú—ã –æ–±–µ—â–∞–µ–º –Ω–µ –ø–ª–∞–∫–∞—Ç—å... –Ω—É, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç–∑—ã–≤ –±—É–¥–µ—Ç —Å—É–ø–µ—Ä-–∫—Ä—É—Ç–æ–π! üòé\n"
                "–¢–≤–æ—è –∫–æ–º–∞–Ω–¥–∞ MPSP üöÄ"
            ),
            "–ö–æ—Ä–æ—Ç–∫–∏–π –¥—Ä—É–∂–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å": (
                "–•–µ–π, {client_name}! üëã\n\n"
                "–¢—ã –Ω–∞—à –∫–ª–∏–µ–Ω—Ç —É–∂–µ {days_waiting} –¥–Ω–µ–π - –∫—Ä—É—Ç–æ! üéâ\n"
                "–ß–µ—Ä–∫–Ω–∏ –ø–∞—Ä—É —Å–ª–æ–≤ –æ –Ω–∞—à–µ–π —Ä–∞–±–æ—Ç–µ:\n"
                "üëá\n"
                "{review_link}\n"
                "üëÜ\n\n"
                "–¢–≤–æ–µ –º–Ω–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ –≤–∞–∂–Ω–æ! üí™\n"
                "–ö–æ–º–∞–Ω–¥–∞ MPSP ‚úåÔ∏è"
            )
        }

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –≤ –∫–æ–º–±–æ–±–æ–∫—Å
        for name in standard_templates.keys():
            self.template_combo.addItem(name)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —à–∞–±–ª–æ–Ω—ã
        templates = self.template_manager.get_templates()
        for name in templates.keys():
            if name not in standard_templates:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                self.template_combo.addItem(name)

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –µ—Å–ª–∏ –æ–Ω –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        index = self.template_combo.findText(current_text)
        if index >= 0:
            self.template_combo.setCurrentIndex(index)
        elif self.template_combo.count() > 0:
            self.template_combo.setCurrentIndex(0)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, –µ—Å–ª–∏ –∏—Ö —Ç–∞–º –Ω–µ—Ç
        saved_templates = self.template_manager.get_templates()
        for name, text in standard_templates.items():
            if name not in saved_templates:
                self.template_manager.save_template(name, text)

    # 6. –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–æ–¥ update_message_template –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –æ—Ç–∑—ã–≤–æ–≤

    def update_message_template(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞"""
        if self.view_mode == 'orders':
            template = (
                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {client_name}!\n\n"
                "–£ –≤–∞—Å –µ—Å—Ç—å –∑–∞–∫–∞–∑ #{order_id} –æ—Ç {created_date} - {service}.\n"
                "–•–æ—Ç–µ–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å, –∞–∫—Ç—É–∞–ª–µ–Ω –ª–∏ –µ—â–µ –¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑?\n\n"
                "–ï—Å–ª–∏ –¥–∞, —Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–Ω–µ—Å–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.\n"
                "–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount} ‚ÇΩ\n\n"
                "–î–ª—è –æ–ø–ª–∞—Ç—ã:\n"
                "üí≥ –°–±–µ—Ä–±–∞–Ω–∫: +79066322571\n"
                "üì± WhatsApp: +79066322571"
            )
        elif self.view_mode == 'clients':
            template = (
                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {client_name}!\n\n"
                "–£ –≤–∞—Å –µ—Å—Ç—å {total_orders} –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –æ–±—â—É—é —Å—É–º–º—É {total_amount} ‚ÇΩ.\n"
                "–•–æ—Ç–µ–ª–∏ –±—ã —É—Ç–æ—á–Ω–∏—Ç—å, –∞–∫—Ç—É–∞–ª—å–Ω—ã –ª–∏ –µ—â–µ –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã?\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ! "
                "–ù–∞–º –≤–∞–∂–Ω–æ –∑–Ω–∞—Ç—å –≤–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ –∑–∞–∫–∞–∑–∞–º.\n\n"
                "–î–ª—è –æ–ø–ª–∞—Ç—ã:\n"
                "üí≥ –°–±–µ—Ä–±–∞–Ω–∫: +79066322571\n"
                "üì± WhatsApp: +79066322571"
            )
        else:  # –î–ª—è —Ä–µ–∂–∏–º–∞ –æ—Ç–∑—ã–≤–æ–≤
            template = (
                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {client_name}!\n\n"
                "–í—ã —Å –Ω–∞–º–∏ —É–∂–µ —Å {earliest_date}, –∏ –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è –æ—Ñ–æ—Ä–º–∏–ª–∏ {total_orders} –∑–∞–∫–∞–∑(–æ–≤). "
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!\n\n"
                "–ù–∞–º –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –í–∞—à–µ –º–Ω–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ –Ω–∞—à–µ–π —Ä–∞–±–æ—Ç–µ, "
                "–æ—Å—Ç–∞–≤–∏–≤ –æ—Ç–∑—ã–≤ –ø–æ —Å—Å—ã–ª–∫–µ:\n"
                "{review_link}\n\n"
                "–í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –µ—â–µ –ª—É—á—à–µ!\n\n"
                "–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ MPSP"
            )

        self.message_edit.setPlainText(template)

    def generate_review_link(self, data):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ—Ä–æ—Ç–∫—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç–∑—ã–≤–∞ –∫–ª–∏–µ–Ω—Ç–∞

        Args:
            data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ –∏ –∑–∞–∫–∞–∑–µ

        Returns:
            –°–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç–∑—ã–≤–∞
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞
            order_id = data.get('order_id')
            if not order_id:
                print(f"–û—à–∏–±–∫–∞: ID –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {data.get('fio', '')}")
                return None

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            from reviews_manager.config import SITE_CONFIG

            base_url = SITE_CONFIG.get('base_url', 'https://mpsp.online')
            reviews_page = SITE_CONFIG.get('reviews_page', '/submit-review.html')

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ
            with self.db_manager.session_scope() as session:
                order = session.query(Order).get(order_id)
                if not order:
                    print(f"–û—à–∏–±–∫–∞: –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                    return None

                # –ö–æ–¥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è URL
                service_encoded = urllib.parse.quote(order.service or "")
                name_encoded = urllib.parse.quote(order.fio or "")

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π, –Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–æ–∫–µ–Ω
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º 8 —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ UUID –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
                token = str(uuid.uuid4()).split('-')[0][:8]

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –∑–∞–∫–∞–∑–µ
                order.review_token = token

                # –î–æ–±–∞–≤–ª—è–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ç–æ–∫–µ–Ω –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
                client_token = f"{token}_{order_id}"

                # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è (–¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å=1 –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è)
                params = {
                    'token': client_token,
                    'order': order_id,
                    'name': name_encoded,
                    'service': service_encoded,
                    'auto_approve': 1  # –ü–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è
                }

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∑–∞–ø—Ä–æ—Å–∞
                query_string = urllib.parse.urlencode(params)

                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É
                full_link = f"{base_url}{reviews_page}?{query_string}"

                # –°–æ–∫—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É —Å –ø–æ–º–æ—â—å—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
                short_link = self.shorten_url(full_link)

                print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∫–æ—Ä–æ—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ—Ç–∑—ã–≤–∞ –∑–∞–∫–∞–∑–∞ #{order_id}: {short_link}")
                session.commit()

                return short_link if short_link else full_link

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ—Ç–∑—ã–≤–∞: {str(e)}")
            return None

    def shorten_url(self, long_url):
        """
        –°–æ–∫—Ä–∞—â–∞–µ—Ç URL —Å –ø–æ–º–æ—â—å—é —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤

        Args:
            long_url: –ò—Å—Ö–æ–¥–Ω—ã–π –¥–ª–∏–Ω–Ω—ã–π URL

        Returns:
            –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π URL –∏–ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–π URL –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            # –ú–µ—Ç–æ–¥ 1: –ß–µ—Ä–µ–∑ TinyURL API (–ø—Ä–æ—Å—Ç–æ–π –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
            import requests

            # –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ TinyURL
            tinyurl_api = f"https://tinyurl.com/api-create.php?url={urllib.parse.quote(long_url)}"
            try:
                response = requests.get(tinyurl_api, timeout=5)
                if response.status_code == 200:
                    return response.text.strip()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ TinyURL: {str(e)}")

            # –ú–µ—Ç–æ–¥ 2: –ß–µ—Ä–µ–∑ Bitly API (—Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á)
            # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–ª—é—á API Bitly
            # bitly_token = "–í–ê–®_BITLY_API_–ö–õ–Æ–ß"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–ª—é—á API
            # if bitly_token:
            #     try:
            #         headers = {
            #             "Authorization": f"Bearer {bitly_token}",
            #             "Content-Type": "application/json"
            #         }
            #         payload = {
            #             "long_url": long_url,
            #             "domain": "bit.ly"
            #         }
            #         response = requests.post(
            #             "https://api-ssl.bitly.com/v4/shorten",
            #             headers=headers,
            #             json=payload,
            #             timeout=5
            #         )
            #         if response.status_code == 200:
            #             return response.json().get("link")
            #     except Exception as e:
            #         print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ Bitly: {str(e)}")

            # –ï—Å–ª–∏ –≤—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π URL
            return long_url

        except Exception as e:
            print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–∏ URL: {str(e)}")
            return long_url
    def save_review_link_info(self, order_id):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ –±—ã–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ—Ç–∑—ã–≤–∞"""
        try:
            if not order_id:
                return False

            with self.db_manager.session_scope() as session:
                order = session.query(Order).get(order_id)
                if order:
                    # –ï—Å–ª–∏ —É –∑–∞–∫–∞–∑–∞ —É–∂–µ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω –æ—Ç–∑—ã–≤–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                    # –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                    if not order.review_token:
                        order.review_token = str(uuid.uuid4())
                    print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ—Ç–∑—ã–≤–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}")
                    return True
            return False

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ—Ç–∑—ã–≤–∞: {str(e)}")
            return False






    def setup_table(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã"""
        self.table.setColumnCount(10)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        header = self.table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.Fixed)  # –ß–µ–∫–±–æ–∫—Å
        header.setSectionResizeMode(1, QHeaderView.Fixed)  # ID/–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤
        header.setSectionResizeMode(2, QHeaderView.Stretch)  # –ö–ª–∏–µ–Ω—Ç
        header.setSectionResizeMode(3, QHeaderView.Stretch)  # –£—Å–ª—É–≥–∞/–ó–∞–∫–∞–∑–æ–≤ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏
        header.setSectionResizeMode(4, QHeaderView.Fixed)  # –°—É–º–º–∞
        header.setSectionResizeMode(5, QHeaderView.Fixed)  # –î–∞—Ç–∞
        header.setSectionResizeMode(6, QHeaderView.Fixed)  # –î–Ω–µ–π
        header.setSectionResizeMode(7, QHeaderView.Fixed)  # –¢–µ–ª–µ—Ñ–æ–Ω
        header.setSectionResizeMode(8, QHeaderView.Fixed)  # –°—Ç–∞—Ç—É—Å
        header.setSectionResizeMode(9, QHeaderView.Fixed)  # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
        self.table.setColumnWidth(0, 30)  # –ß–µ–∫–±–æ–∫—Å
        self.table.setColumnWidth(1, 70)  # ID/–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤
        self.table.setColumnWidth(4, 120)  # –°—É–º–º–∞
        self.table.setColumnWidth(5, 100)  # –î–∞—Ç–∞
        self.table.setColumnWidth(6, 80)  # –î–Ω–µ–π
        self.table.setColumnWidth(7, 120)  # –¢–µ–ª–µ—Ñ–æ–Ω
        self.table.setColumnWidth(8, 120)  # –°—Ç–∞—Ç—É—Å
        self.table.setColumnWidth(9, 150)  # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ

        # –í–∫–ª—é—á–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
        self.table.setSortingEnabled(True)

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É
        header.sectionClicked.connect(self.on_header_clicked)

        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã
        self.table.setStyleSheet("""
            QTableWidget {
                border: 1px solid #ddd;
                border-radius: 4px;
                background-color: white;
            }
            QTableWidget::item {
                padding: 4px;
            }
            QTableWidget::item:selected {
                background-color: #e3f2fd;
            }
            QHeaderView::section {
                background-color: #f5f5f5;
                padding: 4px;
                border: 1px solid #ddd;
                font-weight: bold;
            }
            QHeaderView::section:hover {
                background-color: #e0e0e0;
            }
        """)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö/–Ω–∏ –æ–¥–Ω–æ–≥–æ
        self.add_checkbox_controls()

    def add_checkbox_controls(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞–º–∏"""
        # –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å –Ω–∞–¥ —Ç–∞–±–ª–∏—Ü–µ–π
        panel = QFrame(self)
        panel.setStyleSheet("""
            QFrame {
                background-color: #e3f2fd;
                border: 1px solid #bbdefb;
                border-radius: 4px;
                margin-bottom: 4px;
            }
        """)

        layout = QHBoxLayout(panel)
        layout.setContentsMargins(10, 5, 10, 5)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        label = QLabel("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–æ–º:")
        label.setStyleSheet("font-weight: bold;")
        layout.addWidget(label)

        # –ö–Ω–æ–ø–∫–∞ "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ"
        select_all_btn = QPushButton("‚úì –í—ã–±—Ä–∞—Ç—å –≤—Å–µ")
        select_all_btn.setToolTip("–í—ã–±—Ä–∞—Ç—å –≤—Å–µ –≤–∏–¥–∏–º—ã–µ –∑–∞–ø–∏—Å–∏")
        select_all_btn.clicked.connect(self.select_all_checkboxes)
        select_all_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                padding: 5px 10px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)
        layout.addWidget(select_all_btn)

        # –ö–Ω–æ–ø–∫–∞ "–°–Ω—è—Ç—å –≤—Å–µ"
        unselect_all_btn = QPushButton("‚úó –°–Ω—è—Ç—å –≤—Å–µ")
        unselect_all_btn.setToolTip("–°–Ω—è—Ç—å –≤—ã–±–æ—Ä —Å–æ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π")
        unselect_all_btn.clicked.connect(self.unselect_all_checkboxes)
        unselect_all_btn.setStyleSheet("""
            QPushButton {
                background-color: #f44336;
                color: white;
                border: none;
                padding: 5px 10px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #d32f2f;
            }
        """)
        layout.addWidget(unselect_all_btn)

        # –ö–Ω–æ–ø–∫–∞ "–ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±–æ—Ä"
        invert_selection_btn = QPushButton("‚Ü∫ –ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å")
        invert_selection_btn.setToolTip("–ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±–æ—Ä –∑–∞–ø–∏—Å–µ–π")
        invert_selection_btn.clicked.connect(self.invert_checkboxes)
        invert_selection_btn.setStyleSheet("""
            QPushButton {
                background-color: #2196F3;
                color: white;
                border: none;
                padding: 5px 10px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #1976D2;
            }
        """)
        layout.addWidget(invert_selection_btn)

        # –ö–Ω–æ–ø–∫–∞ "–í—ã–±—Ä–∞—Ç—å —Å –Ω–æ–º–µ—Ä–∞–º–∏"
        select_with_phones_btn = QPushButton("üì± –¢–æ–ª—å–∫–æ —Å –Ω–æ–º–µ—Ä–∞–º–∏")
        select_with_phones_btn.setToolTip("–í—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤")
        select_with_phones_btn.clicked.connect(self.select_with_phones)
        select_with_phones_btn.setStyleSheet("""
            QPushButton {
                background-color: #9C27B0;
                color: white;
                border: none;
                padding: 5px 10px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #7B1FA2;
            }
        """)
        layout.addWidget(select_with_phones_btn)

        layout.addStretch()

        # –°—á–µ—Ç—á–∏–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        self.selected_count_label = QLabel("–í—ã–±—Ä–∞–Ω–æ: 0")
        self.selected_count_label.setStyleSheet("""
            QLabel {
                font-weight: bold;
                color: #2196F3;
            }
        """)
        layout.addWidget(self.selected_count_label)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞–∫–µ—Ç, –ø–µ—Ä–µ–¥ —Ç–∞–±–ª–∏—Ü–µ–π
        index = self.layout().indexOf(self.table)
        self.layout().insertWidget(index, panel)

    def reload_table_checkboxes(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç —á–µ–∫–±–æ–∫—Å—ã –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        try:
            print("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —á–µ–∫–±–æ–∫—Å–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ...")

            for row in range(self.table.rowCount()):
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–µ–∫–±–æ–∫—Å
                checkbox = QCheckBox()
                checkbox.setChecked(False)
                checkbox.setEnabled(True)

                # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è
                checkbox.stateChanged.connect(lambda state, r=row: self.on_checkbox_changed(state, r))

                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –≤–∏–¥–∂–µ—Ç —á–µ–∫–±–æ–∫—Å–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                old_checkbox = self.table.cellWidget(row, 0)
                if old_checkbox:
                    self.table.removeCellWidget(row, 0)

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —á–µ–∫–±–æ–∫—Å
                self.table.setCellWidget(row, 0, checkbox)

            print(f"–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–æ {self.table.rowCount()} —á–µ–∫–±–æ–∫—Å–æ–≤")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —á–µ–∫–±–æ–∫—Å–æ–≤: {e}")

    def on_checkbox_changed(self, state, row):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞"""
        print(f"–ò–∑–º–µ–Ω–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞ –≤ —Å—Ç—Ä–æ–∫–µ {row} –Ω–∞ {state}")
        self.update_selected_count()

    def select_all_checkboxes(self):
        """–í—ã–±–æ—Ä –≤—Å–µ—Ö –≤–∏–¥–∏–º—ã—Ö –∑–∞–ø–∏—Å–µ–π"""
        # –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —á–µ–∫–±–æ–∫—Å—ã –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        self.reload_table_checkboxes()

        count = 0
        for row in range(self.table.rowCount()):
            if not self.table.isRowHidden(row):
                checkbox = self.table.cellWidget(row, 0)
                if checkbox and isinstance(checkbox, QCheckBox):
                    try:
                        checkbox.setChecked(True)
                        count += 1
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —á–µ–∫–±–æ–∫—Å–∞ –≤ —Å—Ç—Ä–æ–∫–µ {row}: {e}")

        self.update_selected_count()
        QMessageBox.information(self, "–í—ã–±–æ—Ä –∑–∞–ø–∏—Å–µ–π", f"–í—ã–±—Ä–∞–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π.")
    def unselect_all_checkboxes(self):
        """–°–Ω—è—Ç–∏–µ –≤—ã–±–æ—Ä–∞ —Å–æ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π"""
        for row in range(self.table.rowCount()):
            checkbox = self.table.cellWidget(row, 0)
            if checkbox and isinstance(checkbox, QCheckBox):
                try:
                    checkbox.setChecked(False)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –≤—ã–±–æ—Ä–∞ —á–µ–∫–±–æ–∫—Å–∞ –≤ —Å—Ç—Ä–æ–∫–µ {row}: {e}")

        self.update_selected_count()
        QMessageBox.information(self, "–°–Ω—è—Ç–∏–µ –≤—ã–±–æ—Ä–∞", "–í—ã–±–æ—Ä —Å–Ω—è—Ç —Å–æ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π.")

    def invert_checkboxes(self):
        """–ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∑–∞–ø–∏—Å–µ–π"""
        count = 0
        for row in range(self.table.rowCount()):
            if not self.table.isRowHidden(row):
                checkbox = self.table.cellWidget(row, 0)
                if checkbox and isinstance(checkbox, QCheckBox):
                    try:
                        checkbox.setChecked(not checkbox.isChecked())
                        if checkbox.isChecked():
                            count += 1
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —á–µ–∫–±–æ–∫—Å–∞ –≤ —Å—Ç—Ä–æ–∫–µ {row}: {e}")

        self.update_selected_count()
        QMessageBox.information(self, "–ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞", f"–¢–µ–ø–µ—Ä—å –≤—ã–±—Ä–∞–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π.")

    def select_with_phones(self):
        """–í—ã–±–æ—Ä —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π —Å –Ω–æ–º–µ—Ä–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤"""
        empty_phone_values = ["", "–ù–µ —É–∫–∞–∑–∞–Ω–æ", "–ù–µ—Ç", "-", "–Ω/–¥", "N/A"]
        count = 0

        for row in range(self.table.rowCount()):
            if not self.table.isRowHidden(row):
                checkbox = self.table.cellWidget(row, 0)
                phone_item = self.table.item(row, 7)

                if checkbox and isinstance(checkbox, QCheckBox) and phone_item:
                    try:
                        phone = phone_item.text().strip()

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                        has_phone = phone and phone.lower() not in map(str.lower, empty_phone_values)

                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ–∫–±–æ–∫—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–º–µ—Ä
                        checkbox.setChecked(bool(has_phone))
                        if has_phone:
                            count += 1
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —á–µ–∫–±–æ–∫—Å–∞ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º –≤ —Å—Ç—Ä–æ–∫–µ {row}: {e}")

        self.update_selected_count()
        QMessageBox.information(self, "–í—ã–±–æ—Ä —Å –Ω–æ–º–µ—Ä–∞–º–∏", f"–í—ã–±—Ä–∞–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π —Å –Ω–æ–º–µ—Ä–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤.")

    def update_selected_count(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π"""
        count = 0
        try:
            for row in range(self.table.rowCount()):
                if not self.table.isRowHidden(row):
                    checkbox = self.table.cellWidget(row, 0)
                    if checkbox and isinstance(checkbox, QCheckBox) and checkbox.isChecked():
                        count += 1

            if hasattr(self, 'selected_count_label'):
                self.selected_count_label.setText(f"–í—ã–±—Ä–∞–Ω–æ: {count}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {e}")



    def create_checkbox_with_event(self, row):
        """–°–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π"""
        checkbox = QCheckBox()
        checkbox.setEnabled(True)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        checkbox.stateChanged.connect(self.on_checkbox_state_changed)

        return checkbox

    def on_checkbox_state_changed(self, state):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞"""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        self.update_selected_count()


    def on_header_clicked(self, logical_index):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É —Ç–∞–±–ª–∏—Ü—ã"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–æ–≤ –ø–µ—Ä–µ–¥ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
        checked_rows = []
        for row in range(self.table.rowCount()):
            checkbox = self.table.cellWidget(row, 0)
            if checkbox and checkbox.isChecked():
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–æ–∫–∏ (ID –∏–ª–∏ –§–ò–û –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞)
                key = self.table.item(row, 2 if self.view_mode == 'clients' else 1).text()
                checked_rows.append(key)

        # –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –ø–æ —Ç–æ–º—É –∂–µ —Å—Ç–æ–ª–±—Ü—É, –º–µ–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫
        if self.table.horizontalHeader().sortIndicatorSection() == logical_index:
            order = Qt.DescendingOrder if self.table.horizontalHeader().sortIndicatorOrder() == Qt.AscendingOrder else Qt.AscendingOrder
            self.table.sortItems(logical_index, order)
        else:
            # –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –ø–æ –Ω–æ–≤–æ–º—É —Å—Ç–æ–ª–±—Ü—É, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
            self.table.sortItems(logical_index, Qt.AscendingOrder)

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–æ–≤
        for row in range(self.table.rowCount()):
            checkbox = self.table.cellWidget(row, 0)
            if checkbox:
                key = self.table.item(row, 2 if self.view_mode == 'clients' else 1).text()
                checkbox.setChecked(key in checked_rows)



    def load_orders_view(self, orders):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∑–∞–∫–∞–∑–∞–º"""
        self.table.setHorizontalHeaderLabels([
            "", "ID", "–ö–ª–∏–µ–Ω—Ç", "–£—Å–ª—É–≥–∞", "–°—É–º–º–∞", "–°–æ–∑–¥–∞–Ω",
            "–î–Ω–µ–π –æ–∂–∏–¥–∞–Ω–∏—è", "–¢–µ–ª–µ—Ñ–æ–Ω", "–°—Ç–∞—Ç—É—Å", "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
        ])

        current_date = datetime.now()

        for row, order in enumerate(orders):
            self.table.insertRow(row)

            # –ß–µ–∫–±–æ–∫—Å
            checkbox = QCheckBox()
            checkbox.setEnabled(self.reminder_history.can_send_reminder(order.fio))
            self.table.setCellWidget(row, 0, checkbox)

            # –û—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            self.table.setItem(row, 1, QTableWidgetItem(str(order.id)))
            self.table.setItem(row, 2, QTableWidgetItem(order.fio))
            self.table.setItem(row, 3, QTableWidgetItem(order.service))
            self.table.setItem(row, 4, QTableWidgetItem(f"{order.remaining_amount:,.2f} ‚ÇΩ"))
            self.table.setItem(row, 5, QTableWidgetItem(
                order.created_date.strftime('%d.%m.%Y')))

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ –æ–¥–∏–Ω —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä–µ–¥ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ–º —Ä–∞–∑–Ω–∏—Ü—ã
            if isinstance(order.created_date, date):
                order_date = datetime.combine(order.created_date, datetime.min.time())
            else:
                order_date = order.created_date

            # –î–Ω–µ–π –≤ –æ–∂–∏–¥–∞–Ω–∏–∏
            days = (current_date - order_date).days
            days_item = QTableWidgetItem(str(days))
            self.set_days_color(days_item, days)
            self.table.setItem(row, 6, days_item)

            self.table.setItem(row, 7, QTableWidgetItem(order.phone or ""))

            # –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ (–Ω–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞)
            self.table.setItem(row, 8, QTableWidgetItem(order.status))

            # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            last_reminder = self.reminder_history.get_last_reminder(order.fio)
            reminder_text = (last_reminder.strftime('%d.%m.%Y %H:%M')
                             if last_reminder else "–ù–µ –±—ã–ª–æ")
            self.table.setItem(row, 9, QTableWidgetItem(reminder_text))

    def load_clients_view(self, orders):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º"""
        self.table.setHorizontalHeaderLabels([
            "", "–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤", "–ö–ª–∏–µ–Ω—Ç", "–ó–∞–∫–∞–∑–æ–≤ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏", "–û–±—â–∞—è —Å—É–º–º–∞",
            "–î–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞", "–î–Ω–µ–π –æ–∂–∏–¥–∞–Ω–∏—è", "–¢–µ–ª–µ—Ñ–æ–Ω", "–°—Ç–∞—Ç—É—Å—ã", "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
        ])

        current_date = datetime.now()

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º
        clients_data = {}

        try:
            with self.db_manager.session_scope() as session:
                for order in orders:
                    if order.fio not in clients_data:
                        # –°—Ç–∞—Ç—É—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å—á–∏—Ç–∞—é—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏ (–∏—Å–∫–ª—é—á–∞–µ–º "–í—ã–ø–æ–ª–Ω–µ–Ω" –∏ "–û—Ç–∫–∞–∑")
                        active_statuses = ['–ù–æ–≤—ã–π', '–í —Ä–∞–±–æ—Ç–µ', '–í –æ–∂–∏–¥–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã']

                        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞ (–≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤)
                        total_orders = session.query(Order).filter(
                            Order.fio == order.fio
                        ).count()

                        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
                        active_orders = session.query(Order).filter(
                            Order.fio == order.fio,
                            Order.status.in_(active_statuses)
                        ).count()

                        # –°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞ (—Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤)
                        status_list = [r[0] for r in session.query(Order.status).filter(
                            Order.fio == order.fio
                        ).distinct().all()]

                        status_text = ", ".join(status_list)

                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –≤ datetime –µ—Å–ª–∏ —ç—Ç–æ date
                        if isinstance(order.created_date, date):
                            created_datetime = datetime.combine(order.created_date, datetime.min.time())
                        else:
                            created_datetime = order.created_date

                        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—É–º–º—ã
                        active_client_orders = session.query(Order).filter(
                            Order.fio == order.fio,
                            Order.status.in_(active_statuses)
                        ).all()

                        # –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–æ–∫
                        total_amount = 0
                        for client_order in active_client_orders:
                            # –ë–µ—Ä–µ–º remaining_amount, —Ç–∞–∫ –∫–∞–∫ —Ç–∞–º —É–∂–µ —É—á—Ç–µ–Ω–∞ —Å–∫–∏–¥–∫–∞
                            if client_order.remaining_amount is not None:
                                total_amount += client_order.remaining_amount

                        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
                        clients_data[order.fio] = {
                            'total_orders': total_orders,
                            'active_orders': active_orders,
                            'phone': order.phone,
                            'earliest_date': created_datetime,
                            'total_amount': total_amount,
                            'status_text': status_text
                        }
                    else:
                        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑ —Ä–∞–Ω—å—à–µ
                        if isinstance(order.created_date, date):
                            order_datetime = datetime.combine(order.created_date, datetime.min.time())
                        else:
                            order_datetime = order.created_date

                        if order_datetime < clients_data[order.fio]['earliest_date']:
                            clients_data[order.fio]['earliest_date'] = order_datetime

            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            for row, (client, data) in enumerate(clients_data.items()):
                self.table.insertRow(row)

                # –ß–µ–∫–±–æ–∫—Å
                checkbox = self.create_checkbox_with_event(row)
                checkbox.setEnabled(self.reminder_history.can_send_reminder(client))
                self.table.setCellWidget(row, 0, checkbox)

                # –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
                self.table.setItem(row, 1, QTableWidgetItem(str(data['total_orders'])))
                self.table.setItem(row, 2, QTableWidgetItem(client))
                self.table.setItem(row, 3, QTableWidgetItem(str(data['active_orders'])))
                self.table.setItem(row, 4, QTableWidgetItem(f"{data['total_amount']:,.2f} ‚ÇΩ"))
                self.table.setItem(row, 5, QTableWidgetItem(
                    data['earliest_date'].strftime('%d.%m.%Y')))

                # –î–Ω–µ–π –≤ –æ–∂–∏–¥–∞–Ω–∏–∏
                days = (current_date - data['earliest_date']).days
                days_item = QTableWidgetItem(str(days))
                self.set_days_color(days_item, days)
                self.table.setItem(row, 6, days_item)

                self.table.setItem(row, 7, QTableWidgetItem(data['phone'] or ""))

                # –°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤
                self.table.setItem(row, 8, QTableWidgetItem(data['status_text']))

                # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                last_reminder = self.reminder_history.get_last_reminder(client)
                reminder_text = (last_reminder.strftime('%d.%m.%Y %H:%M')
                                 if last_reminder else "–ù–µ –±—ã–ª–æ")
                self.table.setItem(row, 9, QTableWidgetItem(reminder_text))

        except Exception as e:
            show_error(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {str(e)}")

    def set_days_color(self, item, days):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–≤–µ—Ç–∞ —è—á–µ–π–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π"""
        if days > 180:
            item.setBackground(QColor("#ffebee"))  # –ö—Ä–∞—Å–Ω—ã–π
        elif days > 90:
            item.setBackground(QColor("#fff3e0"))  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
        elif days > 30:
            item.setBackground(QColor("#fff8e1"))  # –ñ–µ–ª—Ç—ã–π
        else:
            item.setBackground(QColor("#e8f5e9"))  # –ó–µ–ª–µ–Ω—ã–π

    def start_sending(self):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        try:
            self.selected_data = self.get_selected_data()

            if not self.selected_data:
                show_warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è!")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
            if len(self.selected_data) > 20:
                reply = QMessageBox.question(
                    self,
                    "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                    f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {len(self.selected_data)} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π.\n"
                    "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ –±–æ–ª–µ–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Ä–∞–∑.\n"
                    "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
                    QMessageBox.Yes | QMessageBox.No,
                    QMessageBox.No
                )
                if reply == QMessageBox.No:
                    return

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–∞–ø–∏—Å–µ–π
            self.skipped_phones = []

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ
            self.current_index = 0
            self.send_btn.setEnabled(False)
            self.progress_bar.setVisible(True)
            self.progress_bar.setMaximum(len(self.selected_data))
            self.progress_bar.setValue(0)

            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
            self.send_next_message()

        except Exception as e:
            show_error(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {str(e)}")
            self.send_btn.setEnabled(True)
            self.progress_bar.setVisible(False)

    def format_string_safe(self, template, replacements):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–º–µ–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
        result = template

        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω–µ {name}
        pattern = r'\{([^{}]+)\}'
        variables = re.findall(pattern, template)

        # –ó–∞–º–µ–Ω—è–µ–º –∫–∞–∂–¥—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        for var in variables:
            placeholder = f'{{{var}}}'
            if var in replacements:
                result = result.replace(placeholder, str(replacements[var]))
            else:
                # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –µ—Å–ª–∏ –¥–ª—è –Ω–µ–µ –Ω–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è
                print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è {var} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö")

        return result


    def sending_completed(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        self.send_btn.setEnabled(True)
        self.progress_bar.setVisible(False)

        # –ü–æ–¥—Å—á–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        skipped_records = 0
        if hasattr(self, 'skipped_phones'):
            skipped_records = len(self.skipped_phones)

        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {self.current_index} –∏–∑ {len(self.selected_data)}\n"
        )

        # –ï—Å–ª–∏ –±—ã–ª–∏ –∑–∞–ø–∏—Å–∏ –±–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
        if hasattr(self, 'skipped_phones') and self.skipped_phones:
            message += f"\n–ü—Ä–æ–ø—É—â–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –±–µ–∑ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {skipped_records}\n"

            # –ï—Å–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –∏—Ö
            if skipped_records <= 5:
                message += "\n–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã:"
                for fio in self.skipped_phones:
                    message += f"\n- {fio}"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç
        QMessageBox.information(
            self,
            "–ì–æ—Ç–æ–≤–æ",
            message
        )

        # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏
        if hasattr(self, 'skipped_phones'):
            del self.skipped_phones

    def filter_orders(self):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
            period = self.period_combo.currentText()
            status = self.status_combo.currentText()
            gender = self.gender_combo.currentText()

            now = datetime.now()

            for row in range(self.table.rowCount()):
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                days_item = self.table.item(row, 6)
                fio_item = self.table.item(row, 2)

                if not days_item or not fio_item:
                    continue

                days = int(days_item.text())
                fio = fio_item.text()

                # –§–∏–ª—å—Ç—Ä –ø–æ –ø–µ—Ä–∏–æ–¥—É
                show_by_period = True
                if period == "–ë–æ–ª–µ–µ 6 –º–µ—Å—è—Ü–µ–≤":
                    show_by_period = days > 180
                elif period == "3-6 –º–µ—Å—è—Ü–µ–≤":
                    show_by_period = 90 <= days <= 180
                elif period == "1-3 –º–µ—Å—è—Ü–∞":
                    show_by_period = 30 <= days < 90
                elif period == "–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü":
                    show_by_period = days < 30

                # –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—É (–Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ñ–∞–º–∏–ª–∏–∏)
                show_by_gender = True
                if gender == "–ú—É–∂—á–∏–Ω—ã":
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–º–∏–ª–∏—è –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ "–æ–≤", "–µ–≤", "–∏–Ω", "—ã–Ω"
                    show_by_gender = any(fio.lower().split()[0].endswith(end) for end in ["–æ–≤", "–µ–≤", "–∏–Ω", "—ã–Ω"])
                elif gender == "–ñ–µ–Ω—â–∏–Ω—ã":
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–º–∏–ª–∏—è –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ "–≤–∞", "–Ω–∞", "–∞—è"
                    show_by_gender = any(fio.lower().split()[0].endswith(end) for end in ["–≤–∞", "–Ω–∞", "–∞—è", "–∞—è"])

                # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
                show_by_status = True
                if status != "–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã" and self.view_mode == 'orders':
                    status_col = 8  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ 8-–π –∫–æ–ª–æ–Ω–∫–µ –≤ —Ä–µ–∂–∏–º–µ –∑–∞–∫–∞–∑–æ–≤
                    status_item = self.table.item(row, status_col)
                    if status_item:
                        show_by_status = status_item.text() == status

                # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –≤—Å–µ —É—Å–ª–æ–≤–∏—è
                show_row = show_by_period and show_by_gender and show_by_status

                self.table.setRowHidden(row, not show_row)

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —á–µ–∫–±–æ–∫—Å–æ–≤ –¥–ª—è –≤–∏–¥–∏–º—ã—Ö —Å—Ç—Ä–æ–∫
            for row in range(self.table.rowCount()):
                if not self.table.isRowHidden(row):
                    checkbox = self.table.cellWidget(row, 0)
                    if checkbox:
                        fio = self.table.item(row, 2).text()
                        checkbox.setEnabled(self.reminder_history.can_send_reminder(fio))

        except Exception as e:
            show_error(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {str(e)}")
    def create_message_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
        frame = QFrame()
        frame.setStyleSheet("""
            QFrame {
                background-color: #f5f5f5;
                border: 1px solid #ddd;
                border-radius: 4px;
                padding: 8px;
            }
        """)

        layout = QVBoxLayout(frame)

        # –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        template_layout = QHBoxLayout()
        self.template_combo = QComboBox()
        self.template_combo.currentIndexChanged.connect(self.load_message_template)

        manage_templates_btn = QPushButton("‚úèÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏")
        manage_templates_btn.clicked.connect(self.show_template_manager)
        manage_templates_btn.setStyleSheet("""
            QPushButton {
                background-color: #FF9800;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #F57C00;
            }
        """)

        # –ö–Ω–æ–ø–∫–∞ –ø–æ–º–æ—â–Ω–∏–∫–∞ –ø–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º
        help_btn = QPushButton("‚ùì –ü–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º")
        help_btn.clicked.connect(self.show_variables_help)
        help_btn.setStyleSheet("""
            QPushButton {
                background-color: #9C27B0;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #7B1FA2;
            }
        """)

        template_layout.addWidget(QLabel("–®–∞–±–ª–æ–Ω:"))
        template_layout.addWidget(self.template_combo)
        template_layout.addWidget(manage_templates_btn)
        template_layout.addWidget(help_btn)
        template_layout.addStretch()

        # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        self.message_edit = QTextEdit()
        self.message_edit.setMinimumHeight(150)
        self.message_edit.setStyleSheet("""
            QTextEdit {
                background-color: white;
                border: 1px solid #ddd;
                border-radius: 4px;
                padding: 8px;
            }
        """)

        layout.addLayout(template_layout)
        layout.addWidget(QLabel("–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:"))
        layout.addWidget(self.message_edit)

        return frame

    def show_variables_help(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –ø–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º"""
        dialog = MessageVariablesHelpDialog(self, self.view_mode)
        dialog.exec_()

    def create_buttons_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        frame = QFrame()
        frame.setStyleSheet("""
            QFrame {
                background-color: #f5f5f5;
                border: 1px solid #ddd;
                border-radius: 4px;
                padding: 8px;
            }
        """)

        layout = QHBoxLayout(frame)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        settings_layout = QVBoxLayout()
        delay_layout = QHBoxLayout()
        self.delay_spin = QSpinBox()
        self.delay_spin.setRange(1, 60)
        self.delay_spin.setValue(5)
        self.delay_spin.setStyleSheet("""
            QSpinBox {
                padding: 4px;
                border: 1px solid #ddd;
                border-radius: 4px;
                background: white;
            }
        """)

        delay_layout.addWidget(QLabel("–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ (—Å–µ–∫):"))
        delay_layout.addWidget(self.delay_spin)

        # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫-–±–æ–∫—Å –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π –±–µ–∑ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        checkbox_layout = QHBoxLayout()
        self.skip_empty_phone_checkbox = QCheckBox("–ü—Ä–æ–ø—É—Å–∫–∞—Ç—å –∑–∞–ø–∏—Å–∏ –±–µ–∑ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        self.skip_empty_phone_checkbox.setChecked(True)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω–æ
        self.skip_empty_phone_checkbox.setToolTip(
            "–ö–æ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω–æ, –∑–∞–ø–∏—Å–∏ —Å –ø—É—Å—Ç—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏ –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ '–ù–µ —É–∫–∞–∑–∞–Ω–æ', "
            "'–ù–µ—Ç', '-' –∏ –ø–æ–¥–æ–±–Ω—ã–º–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ"
        )
        self.skip_empty_phone_checkbox.setStyleSheet("""
            QCheckBox {
                padding: 4px;
            }
            QCheckBox:hover {
                background-color: #e0e0e0;
                border-radius: 4px;
            }
        """)
        checkbox_layout.addWidget(self.skip_empty_phone_checkbox)

        settings_layout.addLayout(delay_layout)
        settings_layout.addLayout(checkbox_layout)

        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        self.progress_bar.setStyleSheet("""
            QProgressBar {
                border: 1px solid #ddd;
                border-radius: 4px;
                text-align: center;
            }
            QProgressBar::chunk {
                background-color: #2196F3;
            }
        """)

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        buttons_layout = QVBoxLayout()
        self.send_btn = QPushButton("üì± –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
        self.send_btn.clicked.connect(self.start_sending)
        self.send_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)

        close_btn = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
        close_btn.clicked.connect(self.close)
        close_btn.setStyleSheet("""
            QPushButton {
                background-color: #757575;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #616161;
            }
        """)

        buttons_layout.addWidget(self.send_btn)
        buttons_layout.addWidget(close_btn)

        # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ –ø–∞–Ω–µ–ª—å
        layout.addLayout(settings_layout)
        layout.addWidget(self.progress_bar)
        layout.addStretch()
        layout.addLayout(buttons_layout)

        return frame
    def show_template_manager(self):
        """–ü–æ–∫–∞–∑ –æ–∫–Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞–º–∏"""
        dialog = TemplateManagerDialog(self)
        if dialog.exec_() == QDialog.Accepted:
            self.load_templates()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
            self.load_message_template()  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
    def show_history(self):
        """–ü–æ–∫–∞–∑ –æ–∫–Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        dialog = ReminderHistoryDialog(self)
        dialog.exec_()


    def load_message_template(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
        template_name = self.template_combo.currentText()
        message = ""  # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —à–∞–±–ª–æ–Ω—ã
        templates = self.template_manager.get_templates()
        if template_name in templates:
            message = templates[template_name]

        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
        elif template_name == "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ":
            message = (
                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {client_name}!\n\n"
                "–£ –≤–∞—Å –µ—Å—Ç—å –∑–∞–∫–∞–∑ #{order_id} –æ—Ç {created_date} - {service}.\n"
                "–•–æ—Ç–µ–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å, –∞–∫—Ç—É–∞–ª–µ–Ω –ª–∏ –µ—â–µ –¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑?\n\n"
                "–ï—Å–ª–∏ –¥–∞, —Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–Ω–µ—Å–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.\n"
                "–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount} ‚ÇΩ\n\n"
                "–î–ª—è –æ–ø–ª–∞—Ç—ã:\n"
                "üí≥ –°–±–µ—Ä–±–∞–Ω–∫: +79066322571\n"
                "üì± WhatsApp: +79066322571"
            )
        elif template_name == "–ö–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ":
            message = (
                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {client_name}!\n"
                "–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –∑–∞–∫–∞–∑–µ #{order_id} - {service}.\n"
                "–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount} ‚ÇΩ\n"
                "–î–ª—è –æ–ø–ª–∞—Ç—ã: +79066322571"
            )
        elif template_name == "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∏":
            message = (
                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {client_name}!\n\n"
                "–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ #{order_id} - {service}.\n"
                "–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –¥–Ω–µ–π:\n"
                "- –°–∫–∏–¥–∫–∞ 10%\n"
                "- –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ —Å–æ —Å–∫–∏–¥–∫–æ–π: {discounted_amount} ‚ÇΩ\n\n"
                "–î–ª—è –æ–ø–ª–∞—Ç—ã:\n"
                "üí≥ –°–±–µ—Ä–±–∞–Ω–∫: +79066322571\n"
                "üì± WhatsApp: +79066322571"
            )
        else:
            # –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
            message = (
                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {client_name}!\n\n"
                "–£ –≤–∞—Å –µ—Å—Ç—å –∑–∞–∫–∞–∑ #{order_id}.\n"
                "–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount} ‚ÇΩ\n\n"
                "–î–ª—è –æ–ø–ª–∞—Ç—ã:\n"
                "üí≥ –°–±–µ—Ä–±–∞–Ω–∫: +79066322571\n"
                "üì± WhatsApp: +79066322571"
            )

        self.message_edit.setPlainText(message)
    def get_selected_orders(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
        selected = []
        for row in range(self.table.rowCount()):
            if not self.table.isRowHidden(row):
                checkbox = self.table.cellWidget(row, 0)
                if checkbox and checkbox.isChecked():
                    order_data = {
                        'id': int(self.table.item(row, 1).text()),
                        'fio': self.table.item(row, 2).text(),
                        'service': self.table.item(row, 3).text(),
                        'amount': float(
                            self.table.item(row, 4).text().replace('‚ÇΩ', '').replace(' ', '').replace(',', '')),
                        'created_date': self.table.item(row, 5).text(),
                        'phone': self.table.item(row, 7).text()
                    }
                    selected.append(order_data)
        return selected

    def get_selected_data(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        selected = []
        skip_empty_phone = self.skip_empty_phone_checkbox.isChecked()
        empty_phone_values = ["", "–ù–µ —É–∫–∞–∑–∞–Ω–æ", "–ù–µ—Ç", "-", "–Ω/–¥", "N/A"]

        # –ü–æ–¥—Å—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        total_selected = 0
        skipped_counts = {"no_phone": 0, "other_reasons": 0}

        for row in range(self.table.rowCount()):
            checkbox = self.table.cellWidget(row, 0)
            if checkbox and isinstance(checkbox, QCheckBox) and checkbox.isChecked() and not self.table.isRowHidden(
                    row):
                total_selected += 1

                try:
                    phone_cell = self.table.item(row, 7)
                    phone = phone_cell.text().strip() if phone_cell else ""

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –∑–∞–ø–∏—Å—å —Å –ø—É—Å—Ç—ã–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
                    if skip_empty_phone and (not phone or phone.lower() in map(str.lower, empty_phone_values)):
                        fio = self.table.item(row, 2).text()
                        print(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Å—Ç—Ä–æ–∫–µ {row} –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {fio} –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
                        skipped_counts["no_phone"] += 1

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
                        if not hasattr(self, 'skipped_phones'):
                            self.skipped_phones = []
                        self.skipped_phones.append(fio)

                        continue

                    if self.view_mode == 'orders':
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ –∑–∞–∫–∞–∑–æ–≤
                        amount_text = self.table.item(row, 4).text().replace('‚ÇΩ', '').replace(' ', '').replace(',', '')
                        order_data = {
                            'id': int(self.table.item(row, 1).text()),
                            'fio': self.table.item(row, 2).text(),
                            'service': self.table.item(row, 3).text(),
                            'amount': float(amount_text),
                            'created_date': self.table.item(row, 5).text(),
                            'phone': phone
                        }
                        selected.append(order_data)
                    elif self.view_mode == 'clients':
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
                        amount_text = self.table.item(row, 4).text().replace('‚ÇΩ', '').replace(' ', '').replace(',', '')
                        order_data = {
                            'fio': self.table.item(row, 2).text(),
                            'total_orders': int(self.table.item(row, 1).text()),
                            'waiting_orders': int(self.table.item(row, 3).text()),
                            'total_amount': float(amount_text),
                            'earliest_date': self.table.item(row, 5).text(),
                            'phone': phone
                        }
                        selected.append(order_data)
                    else:  # –†–µ–∂–∏–º –æ—Ç–∑—ã–≤–æ–≤
                        # –ü–æ–ª—É—á–∞–µ–º FIO –∫–ª–∏–µ–Ω—Ç–∞
                        fio = self.table.item(row, 2).text()

                        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
                        try:
                            total_orders = int(self.table.item(row, 1).text())
                            unique_services = int(self.table.item(row, 3).text())
                            max_payment_text = self.table.item(row, 4).text().replace('‚ÇΩ', '').replace(' ', '').replace(
                                ',', '')
                            max_payment = float(max_payment_text)
                            earliest_date = self.table.item(row, 5).text()
                            days_with_us = int(self.table.item(row, 6).text())

                            # –ü–æ–∏—Å–∫ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ
                            with self.db_manager.session_scope() as session:
                                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑ –∫–ª–∏–µ–Ω—Ç–∞
                                best_order = session.query(Order).filter(
                                    Order.fio == fio,
                                    Order.status != '–û—Ç–º–µ–Ω–µ–Ω'
                                ).order_by(Order.paid_amount.desc()).first()

                                # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑ —Å –æ–ø–ª–∞—Ç–æ–π, –±–µ—Ä–µ–º –ª—é–±–æ–π –∑–∞–∫–∞–∑
                                if not best_order:
                                    best_order = session.query(Order).filter(
                                        Order.fio == fio,
                                        Order.status != '–û—Ç–º–µ–Ω–µ–Ω'
                                    ).first()

                                if best_order:
                                    order_data = {
                                        'fio': fio,
                                        'order_id': best_order.id,
                                        'service': best_order.service or "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                                        'total_orders': total_orders,
                                        'earliest_date': earliest_date,
                                        'days_with_us': days_with_us,  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                                        'phone': phone,
                                        'mode': 'reviews'  # –ú–µ—Ç–∫–∞ —Ä–µ–∂–∏–º–∞ –æ—Ç–∑—ã–≤–æ–≤
                                    }

                                    selected.append(order_data)
                                else:
                                    print(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {fio}")
                                    skipped_counts["other_reasons"] += 1
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ {row} –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {fio}: {e}")
                            skipped_counts["other_reasons"] += 1
                            continue

                except (ValueError, AttributeError) as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ {row}: {e}")
                    skipped_counts["other_reasons"] += 1
                    continue

        print(f"–í—Å–µ–≥–æ –≤—ã–±—Ä–∞–Ω–æ —Å—Ç—Ä–æ–∫: {total_selected}")
        print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(selected)}")
        print(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {skipped_counts['no_phone']}")
        print(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –ø–æ –¥—Ä—É–≥–∏–º –ø—Ä–∏—á–∏–Ω–∞–º: {skipped_counts['other_reasons']}")

        return selected

    def send_next_message(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            if self.current_index >= len(self.selected_data):
                self.sending_completed()
                return

            data = self.selected_data[self.current_index]

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            phone = data.get('phone', '').strip()
            empty_phone_values = ["", "–ù–µ —É–∫–∞–∑–∞–Ω–æ", "–ù–µ—Ç", "-", "–Ω/–¥", "N/A"]

            if not phone or phone.lower() in map(str.lower, empty_phone_values):
                print(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {data.get('fio', '')} –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
                self.current_index += 1
                self.send_next_message()
                return

            message = self.message_edit.toPlainText()

            try:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
                if data.get('mode') == 'reviews':  # –†–µ–∂–∏–º –æ—Ç–∑—ã–≤–æ–≤
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç–∑—ã–≤–∞
                    review_link = self.generate_review_link(data)

                    if not review_link:
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç–∑—ã–≤–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {data['fio']}")
                        self.current_index += 1
                        self.send_next_message()
                        return

                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                    replacements = {
                        'client_name': data['fio'],
                        'total_orders': str(data['total_orders']),
                        'earliest_date': data['earliest_date'],
                        'days_waiting': str(data['days_with_us']),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                        'review_link': review_link,
                        'phone': phone
                    }

                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ format_string_safe
                    message = self.format_string_safe(message, replacements)
                elif self.view_mode == 'orders':
                    # –ö–æ–¥ –¥–ª—è —Ä–µ–∂–∏–º–∞ –∑–∞–∫–∞–∑–æ–≤
                    order_id = data.get('id', 0)

                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–∂–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞ Order
                    with self.db_manager.session_scope() as session:
                        order = None
                        if order_id > 0:
                            order = session.query(Order).get(order_id)

                        # –ë–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
                        replacements = {
                            'client_name': data['fio'],
                            'order_id': str(data.get('id', '')),
                            'service': data.get('service', ''),
                            'amount': f"{data.get('amount', 0):,.2f}",
                            'created_date': data.get('created_date', ''),
                            'phone': phone,
                            'discounted_amount': f"{data.get('amount', 0):,.2f}",
                            'discount': "0%",
                            'theme': "–ù–µ —É–∫–∞–∑–∞–Ω–∞",
                            'direction': "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                            'deadline': "–ù–µ —É–∫–∞–∑–∞–Ω",
                            'status': "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω",
                            'teacher_name': "–ù–µ —É–∫–∞–∑–∞–Ω",
                            'discount_start_date': "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
                            'discount_end_date': "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
                        }

                        # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –∑–∞–∫–∞–∑–∞
                        if order:
                            # –†–∞—Å—á–µ—Ç —Å–∫–∏–¥–∫–∏
                            if 'amount' in data and order.discount:
                                try:
                                    discount_str = order.discount.strip('%')
                                    discount = float(discount_str) / 100
                                    discounted_amount = data['amount'] * (1 - discount)
                                    replacements['discounted_amount'] = f"{discounted_amount:,.2f}"
                                except (ValueError, AttributeError):
                                    pass

                            # –î–∞—Ç—ã —Å–∫–∏–¥–æ–∫
                            if order.discount_start_date:
                                replacements['discount_start_date'] = order.discount_start_date.strftime('%d.%m.%Y')

                            if order.discount_end_date:
                                replacements['discount_end_date'] = order.discount_end_date.strftime('%d.%m.%Y')

                            # –î—Ä—É–≥–∏–µ –ø–æ–ª—è –∑–∞–∫–∞–∑–∞
                            replacements['discount'] = order.discount or "0%"
                            replacements['theme'] = order.theme or "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
                            replacements['direction'] = order.direction or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                            replacements['deadline'] = order.deadline or "–ù–µ —É–∫–∞–∑–∞–Ω"
                            replacements['status'] = order.status or "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
                            replacements['teacher_name'] = order.teacher_name or "–ù–µ —É–∫–∞–∑–∞–Ω"

                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –æ–∂–∏–¥–∞–Ω–∏–∏
                    if 'created_date' in data:
                        try:
                            created_date = datetime.strptime(data['created_date'], '%d.%m.%Y')
                            days_waiting = (datetime.now() - created_date).days
                            replacements['days_waiting'] = str(days_waiting)
                        except (ValueError, TypeError):
                            replacements['days_waiting'] = "0"

                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    message = self.format_string_safe(message, replacements)

                else:  # –†–µ–∂–∏–º –∫–ª–∏–µ–Ω—Ç–æ–≤
                    # –ö–æ–¥ –¥–ª—è —Ä–µ–∂–∏–º–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
                    replacements = {
                        'client_name': data['fio'],
                        'total_orders': str(data.get('total_orders', 0)),
                        'waiting_orders': str(data.get('waiting_orders', 0)),
                        'total_amount': f"{data.get('total_amount', 0):,.2f}",
                        'phone': phone,
                        'earliest_date': data.get('earliest_date', '')
                    }

                    # –†–∞—Å—á–µ—Ç –¥–Ω–µ–π –æ–∂–∏–¥–∞–Ω–∏—è —Å –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
                    if 'earliest_date' in data:
                        try:
                            earliest_date = datetime.strptime(data['earliest_date'], '%d.%m.%Y')
                            days_waiting = (datetime.now() - earliest_date).days
                            replacements['days_waiting'] = str(days_waiting)
                        except (ValueError, TypeError):
                            replacements['days_waiting'] = "0"

                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    message = self.format_string_safe(message, replacements)

            except KeyError as e:
                print(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                message = f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è. –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è {e}"
            except Exception as e:
                print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                self.current_index += 1
                self.send_next_message()
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if self.send_whatsapp_message(phone, message):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ä–µ–∂–∏–º –æ—Ç–∑—ã–≤–æ–≤
                if self.view_mode != 'reviews':
                    self.reminder_history.add_reminder(
                        data['fio'],
                        data.get('id', 0) if self.view_mode == 'orders' else 0
                    )
                # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–∂–∏–º –æ—Ç–∑—ã–≤–æ–≤, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–º–µ—Ç–∫—É –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏
                elif data.get('mode') == 'reviews' and 'order_id' in data:
                    self.save_review_link_info(data['order_id'])

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                self.progress_bar.setValue(self.current_index + 1)

                # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
                self.current_index += 1
                QTimer.singleShot(
                    self.delay_spin.value() * 1000,
                    self.send_next_message
                )
            else:
                reply = QMessageBox.question(
                    self,
                    "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏",
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É {data['fio']}.\n"
                    "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?",
                    QMessageBox.Yes | QMessageBox.No,
                    QMessageBox.Yes
                )

                if reply == QMessageBox.Yes:
                    self.current_index += 1
                    self.send_next_message()
                else:
                    self.sending_completed()

        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
            print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            show_error(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            self.sending_completed()
    def send_whatsapp_message(self, phone, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ WhatsApp"""
        try:
            if not phone:
                return False

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            phone = re.sub(r'[^\d]', '', phone)
            if phone.startswith('8'):
                phone = '7' + phone[1:]
            elif not phone.startswith('7'):
                phone = '7' + phone

            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è WhatsApp –∏—Å–ø–æ–ª—å–∑—É—è api.whatsapp.com –≤–º–µ—Å—Ç–æ wa.me
            url = f"https://api.whatsapp.com/send?phone={phone}&text={quote(message)}"

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º WhatsApp
            QDesktopServices.openUrl(QUrl(url))
            return True

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WhatsApp: {e}")
            return False



