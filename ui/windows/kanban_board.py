from PyQt5.QtWidgets import (QWidget, QHBoxLayout, QVBoxLayout,
                             QLabel, QScrollArea, QPushButton, QMenu,
                             QDialog, QLineEdit, QTextEdit, QMessageBox)
from PyQt5.QtCore import Qt, pyqtSignal, QMimeData, QPoint, QTimer
from PyQt5.QtGui import QDrag, QColor, QPainter, QPen, QFont
from datetime import datetime, timedelta
import os
import json

from core.database import Order
from core.database_manager import DatabaseManager
from .state_manager import StateManager
from .payment_window import PaymentWindow
from .new_order_window import NewOrderWindow
from .client_info_window import ClientInfoWindow
from .detailed_info_window import DetailedInfoWindow
from .order_info_window import OrderInfoWindow
from ui.message_utils import show_question
from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QLabel,
                            QGraphicsDropShadowEffect)
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QColor


# –¶–≤–µ—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤
STATUS_COLORS = {
    '–ù–æ–≤—ã–π': '#3498db',
    '–í —Ä–∞–±–æ—Ç–µ': '#f39c12',
    '–í –æ–∂–∏–¥–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã': '#e74c3c',
    '–í—ã–ø–æ–ª–Ω–µ–Ω': '#2ecc71',
    '–û—Ç–∫–∞–∑': '#95a5a6'
}


class OrderCard(QWidget):
    """–ö–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–∫–∞–∑–∞"""
    drag_started = pyqtSignal(dict)  # –°–∏–≥–Ω–∞–ª –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    status_changed = pyqtSignal(int, str)  # –°–∏–≥–Ω–∞–ª –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞

    def __init__(self, order_data, parent=None):
        super().__init__(parent)
        self.order_data = order_data
        self.initUI()
        self.setAcceptDrops(True)
        self.setCursor(Qt.PointingHandCursor)

    def initUI(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∫–∞—Ä—Ç–æ—á–∫–∏"""
        layout = QVBoxLayout(self)
        layout.setSpacing(6)
        layout.setContentsMargins(8, 8, 8, 8)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∫–∞—Ä—Ç–æ—á–∫–∏
        self.setFixedWidth(200)
        self.setMinimumHeight(120)

        # –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å: –§–ò–û –∏ ID
        top_layout = QHBoxLayout()
        name_label = QLabel(self.order_data['fio'])
        name_label.setStyleSheet("""
            color: #0b5394; 
            font-weight: bold;
            font-size: 13px;
        """)
        id_label = QLabel(f"#{self.order_data['id']}")
        id_label.setStyleSheet("color: #666; font-size: 12px;")
        id_label.setAlignment(Qt.AlignRight | Qt.AlignVCenter)
        top_layout.addWidget(name_label, stretch=1)  # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –∏–º—è
        top_layout.addWidget(id_label)
        layout.addLayout(top_layout)

        # –ì—Ä—É–ø–ø–∞
        group_layout = QHBoxLayout()
        group_label = QLabel("–ì—Ä—É–ø–ø–∞:")
        group_label.setStyleSheet("color: #666; font-size: 12px;")
        group_value = QLabel(self.order_data['group'])
        group_value.setStyleSheet("color: #666; font-size: 12px;")
        group_layout.addWidget(group_label)
        group_layout.addWidget(group_value)
        group_layout.addStretch()
        layout.addLayout(group_layout)

        # –£—Å–ª—É–≥–∞
        service_layout = QHBoxLayout()
        service_label = QLabel("–£—Å–ª—É–≥–∞:")
        service_label.setStyleSheet("color: #666; font-size: 12px;")
        service_value = QLabel(self.order_data['service'])
        service_value.setStyleSheet("color: #666; font-size: 12px;")
        service_value.setWordWrap(True)
        service_layout.addWidget(service_label)
        service_layout.addWidget(service_value)
        service_layout.addStretch()
        layout.addLayout(service_layout)

        # –°—Ä–æ–∫
        if self.order_data.get('deadline'):
            remaining_layout = QHBoxLayout()
            clock_label = QLabel("üïí")
            remaining_text = QLabel(f"–û—Å—Ç–∞–ª–æ—Å—å: {self.order_data['deadline']}")
            remaining_text.setStyleSheet("color: #f39c12; font-size: 12px;")
            remaining_layout.addWidget(clock_label)
            remaining_layout.addWidget(remaining_text)
            remaining_layout.addStretch()
            layout.addLayout(remaining_layout)

        # –°—Ç–æ–∏–º–æ—Å—Ç—å
        cost_layout = QHBoxLayout()
        cost_value = QLabel(f"{self.order_data['cost']:.0f}‚ÇΩ")
        cost_value.setStyleSheet("font-size: 12px; font-weight: bold; color: #666;")
        paid_label = QLabel(f"–û–ø–ª–∞—á–µ–Ω–æ: {self.order_data.get('paid_amount', 0):.0f}‚ÇΩ")
        paid_label.setStyleSheet("font-size: 12px; color: #27ae60;")
        paid_label.setAlignment(Qt.AlignRight | Qt.AlignVCenter)
        cost_layout.addWidget(cost_value)
        cost_layout.addStretch()
        cost_layout.addWidget(paid_label)
        layout.addLayout(cost_layout)

        # –û—Å—Ç–∞—Ç–æ–∫
        if self.order_data.get('remaining_amount', 0) > 0:
            remaining_layout = QHBoxLayout()
            remaining_label = QLabel("–û—Å—Ç–∞—Ç–æ–∫:")
            remaining_label.setStyleSheet("color: #e74c3c; font-size: 12px;")
            remaining_value = QLabel(f"{self.order_data.get('remaining_amount', 0):.0f}‚ÇΩ")
            remaining_value.setStyleSheet("color: #e74c3c; font-size: 12px; font-weight: bold;")
            remaining_layout.addWidget(remaining_label)
            remaining_layout.addWidget(remaining_value)
            remaining_layout.addStretch()
            layout.addLayout(remaining_layout)

        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å (—Å–∫–∏–¥–∫–∞ –∏ —Å—Ç–∞—Ç—É—Å)
        bottom_layout = QHBoxLayout()

        # –°–∫–∏–¥–∫–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        if self.order_data.get('discount'):
            discount_label = QLabel(f"üéÅ {self.order_data['discount']}")
            discount_label.setStyleSheet("""
                color: #e67e22;
                font-size: 12px;
                background-color: #fff3cd;
                padding: 2px 4px;
                border-radius: 3px;
            """)
            bottom_layout.addWidget(discount_label)

        # –°—Ç–∞—Ç—É—Å
        status_text = "‚úì –í—ã–ø–æ–ª–Ω–µ–Ω" if self.order_data['status'] == '–í—ã–ø–æ–ª–Ω–µ–Ω' else self.order_data['status']
        status_label = QLabel(status_text)
        if self.order_data['status'] == '–í—ã–ø–æ–ª–Ω–µ–Ω':
            status_color = "#27ae60"  # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö
        else:
            status_color = "#666"  # –°–µ—Ä—ã–π –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
        status_label.setStyleSheet(f"""
            color: {status_color};
            font-size: 12px;
            background-color: #f8f9fa;
            padding: 2px 4px;
            border-radius: 3px;
        """)
        bottom_layout.addWidget(status_label)
        bottom_layout.addStretch()
        layout.addLayout(bottom_layout)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—â–∏–π—Å—è —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω–µ—Ü
        layout.addStretch()

        # –°—Ç–∏–ª—å –≤—Å–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏
        bg_color = "#f8fef9" if self.order_data['status'] == '–í—ã–ø–æ–ª–Ω–µ–Ω' else "#ffffff"
        border_color = "#c8e6c9" if self.order_data['status'] == '–í—ã–ø–æ–ª–Ω–µ–Ω' else "#e0e0e0"

        self.setStyleSheet(f"""
            QWidget {{
                background-color: {bg_color};
                border: 1px solid {border_color};
                border-radius: 6px;
            }}
            QLabel {{
                border: none;
                background-color: transparent;
            }}
        """)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–Ω—å
        shadow = QGraphicsDropShadowEffect(self)
        shadow.setBlurRadius(10)
        shadow.setXOffset(0)
        shadow.setYOffset(2)
        shadow.setColor(QColor(0, 0, 0, 30))
        self.setGraphicsEffect(shadow)
    def create_payment_progress(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –æ–ø–ª–∞—Ç—ã"""
        progress = QWidget()
        progress.setFixedHeight(5)
        paid = self.order_data.get('paid_amount', 0)
        total = self.order_data['cost']

        if total > 0:
            progress_percent = min((paid / total) * 100, 100)
        else:
            progress_percent = 0

        progress.paintEvent = lambda e: self.paint_progress(progress, progress_percent)
        return progress

    def paint_progress(self, widget, percent):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
        painter = QPainter(widget)
        painter.setRenderHint(QPainter.Antialiasing)

        # –§–æ–Ω
        painter.setPen(Qt.NoPen)
        painter.setBrush(QColor(255, 255, 255, 50))
        painter.drawRoundedRect(0, 0, widget.width(), widget.height(), 2, 2)

        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        if percent > 0:
            width = int((widget.width() * percent) / 100)
            painter.setBrush(QColor(255, 255, 255))
            painter.drawRoundedRect(0, 0, width, widget.height(), 2, 2)

        painter.end()

    def contextMenuEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é"""
        menu = QMenu(self)

        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        edit_action = menu.addAction("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
        edit_action.triggered.connect(self.edit_order)

        # –û–ø–ª–∞—Ç–∞
        payment_action = menu.addAction("üí∞ –í–Ω–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É")
        payment_action.triggered.connect(self.add_payment)

        # –ù–æ–≤—ã–π –∑–∞–∫–∞–∑
        new_order_action = menu.addAction("üìù –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –∫–ª–∏–µ–Ω—Ç—É")
        new_order_action.triggered.connect(self.create_new_order)

        # –°—Ç–∞—Ç—É—Å—ã
        status_menu = menu.addMenu("üîÑ –°–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
        statuses = {
            "üÜï –ù–æ–≤—ã–π": "–ù–æ–≤—ã–π",
            "‚öôÔ∏è –í —Ä–∞–±–æ—Ç–µ": "–í —Ä–∞–±–æ—Ç–µ",
            "‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã": "–í –æ–∂–∏–¥–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã",
            "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω": "–í—ã–ø–æ–ª–Ω–µ–Ω",
            "‚ùå –û—Ç–∫–∞–∑": "–û—Ç–∫–∞–∑"
        }

        for label, status in statuses.items():
            action = status_menu.addAction(label)
            action.triggered.connect(lambda x, s=status: self.change_status(s))

        # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        comments_menu = menu.addMenu("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")
        comments_menu.addAction("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π").triggered.connect(self.add_comment)
        comments_menu.addAction("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤").triggered.connect(self.view_comments)

        # –ü–µ—á–∞—Ç—å
        print_menu = menu.addMenu("üñ®Ô∏è –ü–µ—á–∞—Ç—å")
        print_menu.addAction("üìÑ –ö–≤–∏—Ç–∞–Ω—Ü–∏—è").triggered.connect(self.print_receipt)
        print_menu.addAction("üßæ –ß–µ–∫").triggered.connect(self.print_check)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_menu = menu.addMenu("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        info_menu.addAction("üë§ –û –∫–ª–∏–µ–Ω—Ç–µ").triggered.connect(self.show_client_info)
        info_menu.addAction("üìã –û –∑–∞–∫–∞–∑–µ").triggered.connect(self.show_order_info)
        info_menu.addAction("üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è").triggered.connect(self.show_detailed_info)

        # –ü–∞–ø–∫–∞
        open_folder_action = menu.addAction("üìÅ –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É")
        open_folder_action.triggered.connect(self.open_folder)

        menu.addSeparator()

        # –û—Ç–º–µ–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ
        cancel_action = menu.addAction("‚õî –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑")
        cancel_action.triggered.connect(self.cancel_order)
        delete_action = menu.addAction("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å")
        delete_action.triggered.connect(self.delete_order)

        menu.exec_(event.globalPos())

    def mousePressEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –º—ã—à–∏"""
        if event.button() == Qt.LeftButton:
            drag = QDrag(self)
            mime = QMimeData()

            # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
            order_data = {
                'id': self.order_data['id'],
                'status': self.order_data['status']
            }
            mime.setText(json.dumps(order_data))

            drag.setMimeData(mime)
            drag.exec_(Qt.MoveAction)

            # –ò—Å–ø—É—Å–∫–∞–µ–º —Å–∏–≥–Ω–∞–ª –æ –Ω–∞—á–∞–ª–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
            self.drag_started.emit(self.order_data)

    def edit_order(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
        dialog = NewOrderWindow(self, order_id=self.order_data['id'])
        dialog.exec_()

    def add_payment(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã"""
        dialog = PaymentWindow(self, order_id=self.order_data['id'])
        dialog.exec_()

    def create_new_order(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
        dialog = NewOrderWindow(self)
        dialog.fio_input.setText(self.order_data['fio'])
        dialog.group_input.setText(self.order_data['group'])
        dialog.exec_()

    def change_status(self, new_status):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
        db_manager = DatabaseManager()
        try:
            with db_manager.session_scope() as session:
                order = session.query(Order).get(self.order_data['id'])
                if order:
                    order.status = new_status
                    session.commit()
                    self.status_changed.emit(self.order_data['id'], new_status)
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")

    def show_client_info(self):
        """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ"""
        dialog = ClientInfoWindow(self, client_fio=self.order_data['fio'])
        dialog.exec_()

    def show_order_info(self):
        """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ"""
        dialog = OrderInfoWindow(self, order_id=self.order_data['id'])
        dialog.exec_()

    def show_detailed_info(self):
        """–ü–æ–∫–∞–∑ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        dialog = DetailedInfoWindow(self, client_fio=self.order_data['fio'])
        dialog.exec_()

    def open_folder(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–ø–∫–∏ –∑–∞–∫–∞–∑–∞"""
        try:
            base_path = r"D:\Users\mgurbanmuradov\Documents\–û–±—â–∞—è"
            client_path = os.path.join(base_path, self.order_data['fio'])
            service_path = os.path.join(client_path, self.order_data['service'])

            os.makedirs(service_path, exist_ok=True)
            os.startfile(service_path)
        except Exception as e:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–ø–∫–∏: {str(e)}")


class KanbanColumn(QWidget):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∏"""
    status_changed = pyqtSignal(int, str)

    def __init__(self, title, status, parent=None):
        super().__init__(parent)
        self.title = title
        self.status = status
        self.cached_cards = {}  # –ö—ç—à –∫–∞—Ä—Ç–æ—á–µ–∫
        self.initUI()
        self.setAcceptDrops(True)

    def initUI(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∫–æ–ª–æ–Ω–∫–∏"""
        layout = QVBoxLayout(self)
        layout.setSpacing(8)
        layout.setContentsMargins(8, 8, 8, 8)

        # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–∫–∏ —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–º–µ—Ä–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
        self.setFixedWidth(220)  # 200px —à–∏—Ä–∏–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ + –æ—Ç—Å—Ç—É–ø—ã

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–ª–æ–Ω–∫–∏
        title_label = QLabel(self.title)
        title_label.setAlignment(Qt.AlignCenter)
        title_label.setStyleSheet("""
            color: #2c3e50;
            font-weight: bold;
            font-size: 14px;
            padding: 8px;
            background-color: white;
            border-bottom: 2px solid #e0e0e0;
        """)
        layout.addWidget(title_label)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        scroll.setStyleSheet("""
            QScrollArea {
                border: none;
                background-color: #f5f5f5;
            }
            QScrollBar:vertical {
                border: none;
                background: #f0f0f0;
                width: 6px;
                margin: 0;
            }
            QScrollBar::handle:vertical {
                background: #c0c0c0;
                min-height: 20px;
                border-radius: 3px;
            }
        """)

        cards_widget = QWidget()
        self.cards_layout = QVBoxLayout(cards_widget)
        self.cards_layout.setSpacing(6)
        self.cards_layout.setContentsMargins(0, 0, 0, 0)
        self.cards_layout.setAlignment(Qt.AlignTop)
        self.cards_layout.addStretch()

        scroll.setWidget(cards_widget)
        layout.addWidget(scroll)
    def dragEnterEvent(self, event):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è"""
        if event.mimeData().hasText():
            event.acceptProposedAction()
            self.setStyleSheet("""
                QWidget {
                    background-color: #f8f9fa;
                }
            """)

    def dragLeaveEvent(self, event):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è"""
        self.setStyleSheet("")
        event.accept()

    def dropEvent(self, event):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±—Ä–æ—Å–∞ –∫–∞—Ä—Ç–æ—á–∫–∏"""
        try:
            data = json.loads(event.mimeData().text())
            order_id = data['id']
            old_status = data['status']

            if old_status != self.status and order_id not in self.cached_cards:
                self.status_changed.emit(order_id, self.status)

            event.acceptProposedAction()

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏: {str(e)}")

    def update_counter(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤"""
        count = 0
        for i in range(self.cards_layout.count()):
            if self.cards_layout.itemAt(i).widget():
                count += 1
        self.counter_label.setText(f"{count} –∑–∞–∫–∞–∑–æ–≤")



    def dragEnterEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è"""
        if event.mimeData().hasText():
            event.accept()
            self.setStyleSheet("""
                QWidget {
                    background-color: #e3f2fd;
                    border-radius: 8px;
                }
            """)
        else:
            event.ignore()

    def dragLeaveEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –∑–∞ –ø—Ä–µ–¥–µ–ª—ã"""
        self.setStyleSheet("""
            QWidget {
                background-color: #f8f9fa;
                border-radius: 8px;
            }
        """)
        event.accept()

    def dropEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±—Ä–æ—Å–∞ –∫–∞—Ä—Ç–æ—á–∫–∏"""
        try:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å
            self.setStyleSheet("""
                QWidget {
                    background-color: #f8f9fa;
                    border-radius: 8px;
                }
            """)

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            data = json.loads(event.mimeData().text())
            order_id = data['id']
            old_status = data['status']

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
            if not self.validate_status_change(old_status, self.status, order_id):
                event.ignore()
                return

            # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
            self.status_changed.emit(order_id, self.status)
            event.accept()

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")
            event.ignore()

    def validate_status_change(self, old_status, new_status, order_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞"""
        db_manager = DatabaseManager()

        try:
            with db_manager.session_scope() as session:
                order = session.query(Order).get(order_id)
                if not order:
                    return False

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤ "–í—ã–ø–æ–ª–Ω–µ–Ω"
                if new_status == "–í—ã–ø–æ–ª–Ω–µ–Ω" and order.remaining_amount > 0:
                    QMessageBox.warning(
                        self,
                        "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                        "–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –≤ '–í—ã–ø–æ–ª–Ω–µ–Ω' –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏"
                    )
                    return False

                # –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–º–µ—â–∞—Ç—å –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
                if old_status == "–û—Ç–∫–∞–∑":
                    QMessageBox.warning(
                        self,
                        "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                        "–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"
                    )
                    return False

                return True

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏: {e}")
            return False



class KanbanBoard(QWidget):
    """–ö–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏"""

    def __init__(self, parent=None):
        super().__init__(parent)
        self.db_manager = DatabaseManager()
        self.state_manager = StateManager()
        self.state_manager.add_observer(self)
        self.initUI()
        self.setupUpdateTimer()

    def initUI(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–æ—Å–∫–∏"""
        main_layout = QVBoxLayout(self)
        main_layout.setSpacing(10)
        main_layout.setContentsMargins(10, 10, 10, 10)

        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –ø–æ–∏—Å–∫–æ–º
        top_panel = QHBoxLayout()

        # –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText("üîç –ü–æ–∏—Å–∫ –ø–æ –∑–∞–∫–∞–∑–∞–º...")
        self.search_input.textChanged.connect(self.search_orders)
        self.search_input.setStyleSheet("""
            QLineEdit {
                padding: 8px 15px;
                border: 1px solid #ddd;
                border-radius: 20px;
                background: white;
                min-width: 300px;
            }
            QLineEdit:focus {
                border: 2px solid #2196F3;
            }
        """)
        top_panel.addWidget(self.search_input)
        top_panel.addStretch()

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Ö–Ω—é—é –ø–∞–Ω–µ–ª—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout.addLayout(top_panel)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫
        columns_container = QWidget()
        columns_layout = QHBoxLayout(columns_container)
        columns_layout.setSpacing(10)
        columns_layout.setContentsMargins(0, 0, 0, 0)

        # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
        self.columns = {}
        columns_data = [
            ("–ù–æ–≤—ã–µ", "–ù–æ–≤—ã–π"),
            ("–í —Ä–∞–±–æ—Ç–µ", "–í —Ä–∞–±–æ—Ç–µ"),
            ("–û–∂–∏–¥–∞—é—Ç –æ–ø–ª–∞—Ç—ã", "–í –æ–∂–∏–¥–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã"),
            ("–í—ã–ø–æ–ª–Ω–µ–Ω—ã", "–í—ã–ø–æ–ª–Ω–µ–Ω"),
            ("–û—Ç–º–µ–Ω–µ–Ω—ã", "–û—Ç–∫–∞–∑")
        ]

        for title, status in columns_data:
            column = KanbanColumn(title, status)
            column.status_changed.connect(self.on_status_changed)
            self.columns[status] = column
            columns_layout.addWidget(column)

        # –°–æ–∑–¥–∞–µ–º scroll area –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scroll = QScrollArea()
        scroll.setWidget(columns_container)
        scroll.setWidgetResizable(True)
        scroll.setHorizontalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        scroll.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        scroll.setStyleSheet("""
            QScrollArea {
                border: none;
                background-color: #f5f5f5;
            }
            QScrollBar:horizontal {
                border: none;
                background: #f0f0f0;
                height: 8px;
            }
            QScrollBar::handle:horizontal {
                background: #c0c0c0;
                min-width: 50px;
                border-radius: 4px;
            }
        """)

        main_layout.addWidget(scroll)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã
        self.loadOrders()
    def setupUpdateTimer(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        self.update_timer = QTimer(self)
        self.update_timer.timeout.connect(self.loadOrders)
        self.update_timer.start(300000)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

    def loadOrders(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤"""
        try:
            with self.db_manager.session_scope() as session:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã
                orders = session.query(Order).order_by(Order.created_date.desc()).all()

                # –û—á–∏—â–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
                for column in self.columns.values():
                    while column.cards_layout.count() > 0:
                        item = column.cards_layout.takeAt(0)
                        if item.widget():
                            item.widget().deleteLater()

                # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–∫–∞–∑—ã –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º
                for order in orders:
                    if order.status in self.columns:
                        card = OrderCard(order.to_dict())
                        card.status_changed.connect(self.on_status_changed)

                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–æ–ª–æ–Ω–∫—É
                        self.columns[order.status].cards_layout.addWidget(card)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
                for column in self.columns.values():
                    column.update_counter()

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤: {e}")
    def createOptimizedCard(self, order):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–∫–∞–∑–∞"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –≤ —Å–ª–æ–≤–∞—Ä—å
            order_data = {
                'id': order.id,
                'fio': order.fio,
                'group': order.group,
                'service': order.service,
                'deadline': order.deadline,
                'cost': order.cost,
                'paid_amount': order.paid_amount or 0,
                'remaining_amount': order.remaining_amount or 0,
                'discount': order.discount,
                'status': order.status
            }

            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            card = OrderCard(order_data)
            card.status_changed.connect(self.on_status_changed)
            return card

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏: {str(e)}")
            return None

    def search_orders(self, text):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∑–∞–∫–∞–∑–∞–º"""
        try:
            # –ë–ª–æ–∫–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –Ω–∞ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞
            self.setUpdatesEnabled(False)

            search_text = text.lower().strip()

            with self.db_manager.session_scope() as session:
                # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
                query = session.query(Order)

                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–∏—Å–∫–∞
                if search_text:
                    query = query.filter(
                        Order.fio.ilike(f"%{search_text}%") |
                        Order.group.ilike(f"%{search_text}%") |
                        Order.service.ilike(f"%{search_text}%")
                    )

                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
                orders = query.order_by(Order.created_date.desc()).all()

                # –û—á–∏—â–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
                self.clearColumns()

                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
                orders_by_status = {}
                for order in orders:
                    if order.status not in orders_by_status:
                        orders_by_status[order.status] = []
                    orders_by_status[order.status].append(order)

                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∫–æ–ª–æ–Ω–∫—É
                for status, column in self.columns.items():
                    status_orders = orders_by_status.get(status, [])

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫
                    count_text = f"{len(status_orders)} –∑–∞–∫–∞–∑–æ–≤"
                    column.counter_label.setText(count_text)

                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
                    for order in status_orders:
                        card = self.createOptimizedCard(order)
                        if card:
                            column.cards_layout.insertWidget(
                                column.cards_layout.count() - 1,
                                card
                            )

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")
        finally:
            self.setUpdatesEnabled(True)  # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
            self.update()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç

    def clearColumns(self):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–æ–ª–æ–Ω–æ–∫"""
        try:
            for column in self.columns.values():
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤–∏–¥–∂–µ—Ç—ã, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ (—Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—â–µ–≥–æ—Å—è —ç–ª–µ–º–µ–Ω—Ç–∞)
                while column.cards_layout.count() > 1:
                    item = column.cards_layout.takeAt(0)
                    if item.widget():
                        item.widget().deleteLater()
                column.update()

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ–ª–æ–Ω–æ–∫: {str(e)}")

    def on_status_changed(self, order_id, new_status):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
        try:
            with self.db_manager.session_scope() as session:
                order = session.query(Order).get(order_id)
                if order:
                    order.status = new_status
                    session.commit()

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ –∫–æ–ª–æ–Ω–∫–∏
                    QTimer.singleShot(100, self.loadOrders)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")

    def setupUpdateTimer(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        self.update_timer = QTimer(self)
        self.update_timer.timeout.connect(self.loadOrders)
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        self.update_timer.start(300000)

    def clearColumns(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫"""
        for column in self.columns.values():
            while column.cards_layout.count() > 1:  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—â–∏–π—Å—è —ç–ª–µ–º–µ–Ω—Ç
                item = column.cards_layout.takeAt(0)
                if item.widget():
                    item.widget().deleteLater()

    def search_orders(self, text):
        """–ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤"""
        text = text.lower()
        try:
            with self.db_manager.session_scope() as session:
                query = session.query(Order)

                if text:
                    query = query.filter(
                        (Order.fio.ilike(f"%{text}%")) |
                        (Order.group.ilike(f"%{text}%")) |
                        (Order.service.ilike(f"%{text}%"))
                    )

                orders = query.all()
                self.clearColumns()

                for order in orders:
                    card = OrderCard(order.to_dict())
                    card.status_changed.connect(self.on_status_changed)

                    if order.status in self.columns:
                        self.columns[order.status].cards_layout.insertWidget(
                            self.columns[order.status].cards_layout.count() - 1,
                            card
                        )

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
                for column in self.columns.values():
                    column.update_counter()

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")

    def on_status_changed(self, order_id, new_status):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
        try:
            with self.db_manager.session_scope() as session:
                order = session.query(Order).get(order_id)
                if order:
                    old_status = order.status
                    order.status = new_status
                    session.commit()

                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å–∫—É
                    self.loadOrders()

                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
                    self.state_manager.notify_all()

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")

    def showSettings(self):
        """–ü–æ–∫–∞–∑ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        from .settings_dialog import SettingsDialog
        dialog = SettingsDialog(self)
        dialog.exec_()

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏"""
        if hasattr(self, 'update_timer'):
            self.update_timer.stop()