# statistics_window.py

from PyQt5.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout, QTabWidget,
                             QLabel, QTableWidget, QTableWidgetItem, QGroupBox,
                             QWidget, QPushButton,QFileDialog,QDateEdit,QMessageBox, QHeaderView)

from core.database import init_database, Order

from PyQt5.QtGui import QColor
from sqlalchemy import func, desc
from PyQt5.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout, QTabWidget,
                           QLabel, QWidget,QGridLayout, QScrollArea, QPushButton,
                           QGraphicsDropShadowEffect)
from PyQt5.QtCore import Qt, QSettings
from PyQt5.QtCore import QDate
from sqlalchemy import and_
import pandas as pd
from datetime import datetime

class StatisticsWindow(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.session = init_database()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞
        settings = QSettings("OrderManager", "Statistics")
        self.resize(
            settings.value("window_size/width", 1200, type=int),
            settings.value("window_size/height", 800, type=int)
        )

        # –í–∫–ª—é—á–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        self.setWindowFlags(
            Qt.Window |
            Qt.WindowCloseButtonHint |
            Qt.WindowMinimizeButtonHint |
            Qt.WindowMaximizeButtonHint
        )

        self.initUI()

    def initUI(self):
        self.setWindowTitle("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(10, 10, 10, 10)

        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–º
        size_control = QHBoxLayout()

        # –ö–Ω–æ–ø–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        maximize_btn = QPushButton("üî≤ –ù–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω")
        maximize_btn.clicked.connect(self.toggleMaximize)
        maximize_btn.setStyleSheet("""
            QPushButton {
                background-color: #2196F3;
                color: white;
                border: none;
                padding: 5px 10px;
                border-radius: 4px;
                font-size: 12px;
            }
            QPushButton:hover {
                background-color: #1976D2;
            }
        """)
        size_control.addWidget(maximize_btn)

        # –ö–Ω–æ–ø–∫–∏ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
        size_btn_1 = QPushButton("1200x800")
        size_btn_2 = QPushButton("1400x900")
        size_btn_3 = QPushButton("1600x1000")

        for btn, size in [(size_btn_1, (1200, 800)),
                          (size_btn_2, (1400, 900)),
                          (size_btn_3, (1600, 1000))]:
            btn.clicked.connect(lambda checked, s=size: self.resize(*s))
            btn.setStyleSheet("""
                QPushButton {
                    background-color: #4CAF50;
                    color: white;
                    border: none;
                    padding: 5px 10px;
                    border-radius: 4px;
                    font-size: 12px;
                }
                QPushButton:hover {
                    background-color: #388E3C;
                }
            """)
            size_control.addWidget(btn)

        size_control.addStretch()
        main_layout.addLayout(size_control)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll.setStyleSheet("""
            QScrollArea {
                border: none;
                background: transparent;
            }
            QScrollBar:vertical {
                border: none;
                background: #f0f0f0;
                width: 10px;
                margin: 0px;
            }
            QScrollBar::handle:vertical {
                background: #c0c0c0;
                border-radius: 5px;
                min-height: 30px;
            }
            QScrollBar::handle:vertical:hover {
                background: #a0a0a0;
            }
        """)

        content_widget = QWidget()
        content_layout = QVBoxLayout(content_widget)

        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        tabs = QTabWidget()

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏...
        top_clients_tab = self.createTopClientsTab()
        tabs.addTab(top_clients_tab, "üë• –¢–æ–ø –∫–ª–∏–µ–Ω—Ç—ã")

        profit_tab = self.createProfitTab()
        tabs.addTab(profit_tab, "üí∞ –û—Ç—á–µ—Ç –æ –ø—Ä–∏–±—ã–ª–∏")

        analysis_tab = self.createDetailedAnalysisTab()
        tabs.addTab(analysis_tab, "üìà –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")

        services_tab = self.createServicesAnalysisTab()
        tabs.addTab(services_tab, "üåü –ê–Ω–∞–ª–∏–∑ —É—Å–ª—É–≥")

        content_layout.addWidget(tabs)
        scroll.setWidget(content_widget)
        main_layout.addWidget(scroll)

    def toggleMaximize(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        if self.isMaximized():
            self.showNormal()
        else:
            self.showMaximized()

    def resizeEvent(self, event):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –æ–∫–Ω–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏"""
        settings = QSettings("OrderManager", "Statistics")
        settings.setValue("window_size/width", event.size().width())
        settings.setValue("window_size/height", event.size().height())
        super().resizeEvent(event)

    def createTopClientsTab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Å —Ç–æ–ø –∫–ª–∏–µ–Ω—Ç–∞–º–∏"""
        tab_widget = QWidget()
        layout = QVBoxLayout(tab_widget)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("üèÜ –¢–æ–ø 10 –∫–ª–∏–µ–Ω—Ç–æ–≤")
        title.setStyleSheet("""
            QLabel {
                font-size: 24px;
                font-weight: bold;
                color: #2c3e50;
                padding: 20px;
            }
        """)
        title.setAlignment(Qt.AlignCenter)
        layout.addWidget(title)

        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll.setStyleSheet("""
            QScrollArea {
                border: none;
                background-color: transparent;
            }
        """)

        scroll_content = QWidget()
        scroll_layout = QVBoxLayout(scroll_content)
        scroll_layout.setSpacing(20)  # –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–∫–∞–∑–æ–≤
        top_by_orders = (
            self.session.query(
                Order.fio,
                func.count(Order.id).label('order_count'),
                func.sum(Order.cost).label('total_cost'),
                (func.sum(Order.cost) / func.count(Order.id)).label('avg_cost')
            )
            .group_by(Order.fio)
            .order_by(desc('order_count'))
            .limit(10)
            .all()
        )

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–±—â–µ–π —Å—É–º–º–µ
        top_by_amount = (
            self.session.query(
                Order.fio,
                func.sum(Order.cost).label('total_cost'),
                func.count(Order.id).label('order_count'),
                (func.sum(Order.cost) / func.count(Order.id)).label('avg_cost')
            )
            .group_by(Order.fio)
            .order_by(desc('total_cost'))
            .limit(10)
            .all()
        )

        # –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
        columns_widget = QWidget()
        columns_layout = QHBoxLayout(columns_widget)

        # –ö–æ–ª–æ–Ω–∫–∞ "–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–∫–∞–∑–æ–≤"
        orders_column = QWidget()
        orders_layout = QVBoxLayout(orders_column)

        orders_title = QLabel("–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–∫–∞–∑–æ–≤")
        orders_title.setStyleSheet("font-size: 18px; font-weight: bold; color: #2c3e50; margin-bottom: 10px;")
        orders_layout.addWidget(orders_title)

        for i, client in enumerate(top_by_orders):
            card = self.createClientCard(
                position=i + 1,
                name=client.fio,
                orders=client.order_count,
                total=client.total_cost,
                average=client.avg_cost
            )
            orders_layout.addWidget(card)

        columns_layout.addWidget(orders_column)

        # –ö–æ–ª–æ–Ω–∫–∞ "–ü–æ –æ–±—â–µ–π —Å—É–º–º–µ"
        amount_column = QWidget()
        amount_layout = QVBoxLayout(amount_column)

        amount_title = QLabel("–ü–æ –æ–±—â–µ–π —Å—É–º–º–µ")
        amount_title.setStyleSheet("font-size: 18px; font-weight: bold; color: #2c3e50; margin-bottom: 10px;")
        amount_layout.addWidget(amount_title)

        for i, client in enumerate(top_by_amount):
            card = self.createClientCard(
                position=i + 1,
                name=client.fio,
                orders=client.order_count,
                total=client.total_cost,
                average=client.avg_cost
            )
            amount_layout.addWidget(card)

        columns_layout.addWidget(amount_column)
        scroll_layout.addWidget(columns_widget)

        scroll.setWidget(scroll_content)
        layout.addWidget(scroll)

        return tab_widget

    def createClientCard(self, position, name, orders, total, average):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
        card = QWidget()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ–¥–∞–ª–∏ –∏ —Ü–≤–µ—Ç–∞
        medal_style = {
            1: ("ü•á", "#FFD700"),
            2: ("ü•à", "#C0C0C0"),
            3: ("ü•â", "#CD7F32")
        }.get(position, (f"#{position}", "#FFFFFF"))

        medal, color = medal_style

        card.setStyleSheet(f"""
            QWidget {{
                background-color: {color};
                border-radius: 8px;
                padding: 5px;
                margin: 3px;
            }}
            QLabel {{
                color: #2c3e50;
                background-color: transparent;
                font-size: 14px;
            }}
        """)

        layout = QVBoxLayout(card)
        layout.setSpacing(2)
        layout.setContentsMargins(5, 5, 5, 5)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = QHBoxLayout()
        position_label = QLabel(medal)
        position_label.setStyleSheet("font-size: 16px;")
        name_label = QLabel(name)
        name_label.setStyleSheet("font-size: 15px; font-weight: bold;")
        header.addWidget(position_label)
        header.addWidget(name_label)
        header.addStretch()
        layout.addLayout(header)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        layout.addWidget(QLabel(f"üìä –ó–∞–∫–∞–∑–æ–≤: {orders}"))
        layout.addWidget(QLabel(f"üí∞ –°—É–º–º–∞: {total:,.0f} ‚ÇΩ"))
        layout.addWidget(QLabel(f"üìà –°—Ä–µ–¥–Ω–∏–π: {average:,.0f} ‚ÇΩ"))

        # –¢–µ–Ω—å
        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(5)
        shadow.setXOffset(2)
        shadow.setYOffset(2)
        shadow.setColor(QColor("#cccccc"))
        card.setGraphicsEffect(shadow)

        return card
    def createFinancialTab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        widget = QWidget()
        layout = QVBoxLayout(widget)

        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        summary_group = QGroupBox("–û–±—â–∞—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        summary_layout = QVBoxLayout()

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        stats = self.session.query(
            func.count(Order.id).label('total_orders'),
            func.sum(Order.cost).label('total_revenue'),
            func.sum(Order.paid_amount).label('total_paid'),
            func.avg(Order.cost).label('avg_order_cost')
        ).first()

        # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        summary_layout.addWidget(QLabel(f"–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {stats.total_orders}"))
        summary_layout.addWidget(QLabel(f"–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {stats.total_revenue:.2f} ‚ÇΩ"))
        summary_layout.addWidget(QLabel(f"–û–ø–ª–∞—á–µ–Ω–æ: {stats.total_paid:.2f} ‚ÇΩ"))
        summary_layout.addWidget(QLabel(f"–°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {stats.avg_order_cost:.2f} ‚ÇΩ"))

        summary_group.setLayout(summary_layout)
        layout.addWidget(summary_group)

        # –î–æ–±–∞–≤–ª—è–µ–º React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        layout.addWidget(QLabel("–ì—Ä–∞—Ñ–∏–∫–∏:"))

        return widget

    def createServicesTab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ —É—Å–ª—É–≥–∞–º"""
        widget = QWidget()
        layout = QVBoxLayout(widget)

        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —É—Å–ª—É–≥
        services_group = QGroupBox("–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏")
        services_layout = QVBoxLayout()

        services_table = QTableWidget()
        services_table.setColumnCount(4)
        services_table.setHorizontalHeaderLabels([
            "–£—Å–ª—É–≥–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤", "–û–±—â–∞—è —Å—É–º–º–∞", "–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å"
        ])

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        services_stats = (
            self.session.query(
                Order.service,
                func.count(Order.id).label('order_count'),
                func.sum(Order.cost).label('total_cost'),
                (func.sum(Order.cost) / func.count(Order.id)).label('avg_cost')
            )
            .group_by(Order.service)
            .order_by(desc('order_count'))
            .all()
        )

        services_table.setRowCount(len(services_stats))
        for i, service in enumerate(services_stats):
            services_table.setItem(i, 0, QTableWidgetItem(service.service))
            services_table.setItem(i, 1, QTableWidgetItem(str(service.order_count)))
            services_table.setItem(i, 2, QTableWidgetItem(f"{service.total_cost:.2f} ‚ÇΩ"))
            services_table.setItem(i, 3, QTableWidgetItem(f"{service.avg_cost:.2f} ‚ÇΩ"))

        services_layout.addWidget(services_table)
        services_group.setLayout(services_layout)
        layout.addWidget(services_group)

        return widget

    def createProfitTab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–∏–±—ã–ª–∏"""
        tab_widget = QWidget()
        layout = QVBoxLayout(tab_widget)
        layout.setAlignment(Qt.AlignCenter)  # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("üí∞ –û—Ç—á–µ—Ç –æ –ø—Ä–∏–±—ã–ª–∏")
        title.setStyleSheet("""
            font-size: 24px;
            font-weight: bold;
            color: #2c3e50;
            padding: 20px;
        """)
        title.setAlignment(Qt.AlignCenter)
        layout.addWidget(title)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
        cards_container = QWidget()
        cards_layout = QGridLayout(cards_container)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ç–∫—É –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
        cards_layout.setSpacing(20)  # –û—Ç—Å—Ç—É–ø—ã –º–µ–∂–¥—É –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        results = self.session.query(
            func.sum(Order.cost).label('total_revenue'),
            func.sum(Order.paid_amount).label('total_paid'),
            func.count(Order.id).label('total_orders'),
            func.avg(Order.cost).label('avg_order')
        ).one()

        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        revenue_card = self.createStatsCard(
            "üìà –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞",
            f"{results.total_revenue:,.0f} ‚ÇΩ",
            "#4CAF50"
        )
        paid_card = self.createStatsCard(
            "üíµ –û–ø–ª–∞—á–µ–Ω–æ",
            f"{results.total_paid:,.0f} ‚ÇΩ",
            "#2196F3"
        )
        orders_card = self.createStatsCard(
            "üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤",
            str(results.total_orders),
            "#9C27B0"
        )
        avg_card = self.createStatsCard(
            "üíé –°—Ä–µ–¥–Ω–∏–π —á–µ–∫",
            f"{results.avg_order:,.0f} ‚ÇΩ",
            "#FF9800"
        )

        # –†–∞–∑–º–µ—â–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ —Å–µ—Ç–∫–µ 2x2
        cards_layout.addWidget(revenue_card, 0, 0)
        cards_layout.addWidget(paid_card, 0, 1)
        cards_layout.addWidget(orders_card, 1, 0)
        cards_layout.addWidget(avg_card, 1, 1)

        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
        cards_container.setMaximumWidth(800)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É
        layout.addWidget(cards_container, alignment=Qt.AlignCenter)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—â–∏–π—Å—è —ç–ª–µ–º–µ–Ω—Ç —Å–Ω–∏–∑—É
        layout.addStretch()

        return tab_widget

    def createStatsCard(self, title, value, color):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        card = QWidget()
        card.setFixedSize(350, 150)  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏
        card.setStyleSheet(f"""
            QWidget {{
                background-color: white;
                border-radius: 10px;
                padding: 15px;
            }}
            QLabel {{
                background-color: transparent;
            }}
        """)

        layout = QVBoxLayout(card)
        layout.setSpacing(10)
        layout.setAlignment(Qt.AlignCenter)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel(title)
        title_label.setStyleSheet(f"""
            color: {color};
            font-weight: bold;
            font-size: 16px;
        """)
        title_label.setAlignment(Qt.AlignCenter)

        # –ó–Ω–∞—á–µ–Ω–∏–µ
        value_label = QLabel(value)
        value_label.setStyleSheet("""
            font-size: 24px;
            font-weight: bold;
            color: #2c3e50;
        """)
        value_label.setAlignment(Qt.AlignCenter)

        layout.addWidget(title_label)
        layout.addWidget(value_label)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–Ω—å
        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(15)
        shadow.setXOffset(0)
        shadow.setYOffset(5)
        shadow.setColor(QColor(0, 0, 0, 30))
        card.setGraphicsEffect(shadow)

        return card

    def createDetailedAnalysisTab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        tab_widget = QWidget()
        layout = QVBoxLayout(tab_widget)

        # –ü–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥)
        filters_group = QGroupBox("–§–∏–ª—å—Ç—Ä—ã")
        filters_layout = QHBoxLayout()

        period_label = QLabel("–ü–µ—Ä–∏–æ–¥:")
        self.date_from = QDateEdit()
        self.date_from.setCalendarPopup(True)
        self.date_from.setDate(QDate.currentDate().addYears(-1))
        self.date_to = QDateEdit()
        self.date_to.setCalendarPopup(True)
        self.date_to.setDate(QDate.currentDate())

        filters_layout.addWidget(period_label)
        filters_layout.addWidget(self.date_from)
        filters_layout.addWidget(QLabel("-"))
        filters_layout.addWidget(self.date_to)

        apply_filter_btn = QPushButton("üîç –ü—Ä–∏–º–µ–Ω–∏—Ç—å")
        apply_filter_btn.clicked.connect(self.update_monthly_stats)
        filters_layout.addWidget(apply_filter_btn)

        export_btn = QPushButton("üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel")
        export_btn.clicked.connect(self.export_monthly_stats)
        filters_layout.addWidget(export_btn)

        filters_layout.addStretch()
        filters_group.setLayout(filters_layout)
        layout.addWidget(filters_group)

        # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
        self.monthly_table = QTableWidget()
        self.monthly_table.setColumnCount(5)
        self.monthly_table.setHorizontalHeaderLabels([
            "–ú–µ—Å—è—Ü", "–ö–æ–ª-–≤–æ –∑–∞–∫–∞–∑–æ–≤", "–í—ã—Ä—É—á–∫–∞", "–û–ø–ª–∞—á–µ–Ω–æ", "–û—Å—Ç–∞–ª–æ—Å—å"
        ])

        # –í–∫–ª—é—á–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª—å
        self.monthly_table.setSortingEnabled(True)
        self.monthly_table.setSelectionBehavior(QTableWidget.SelectRows)
        self.monthly_table.setSelectionMode(QTableWidget.SingleSelection)

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
        self.monthly_table.itemClicked.connect(self.on_month_selected)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
        header = self.monthly_table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.ResizeToContents)
        for i in range(1, 5):
            header.setSectionResizeMode(i, QHeaderView.Stretch)

        layout.addWidget(self.monthly_table)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –º–µ—Å—è—Ü
        self.orders_detail_table = QTableWidget()
        self.orders_detail_table.setColumnCount(7)
        self.orders_detail_table.setHorizontalHeaderLabels([
            "ID", "–î–∞—Ç–∞", "–ö–ª–∏–µ–Ω—Ç", "–£—Å–ª—É–≥–∞", "–°—Ç–æ–∏–º–æ—Å—Ç—å", "–û–ø–ª–∞—á–µ–Ω–æ", "–°—Ç–∞—Ç—É—Å"
        ])
        self.orders_detail_table.setSelectionBehavior(QTableWidget.SelectRows)
        self.orders_detail_table.setSelectionMode(QTableWidget.SingleSelection)
        self.orders_detail_table.itemClicked.connect(self.on_order_selected)
        self.orders_detail_table.hide()  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
        header = self.orders_detail_table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.ResizeToContents)
        header.setSectionResizeMode(1, QHeaderView.ResizeToContents)
        header.setSectionResizeMode(2, QHeaderView.Stretch)
        header.setSectionResizeMode(3, QHeaderView.Stretch)
        header.setSectionResizeMode(4, QHeaderView.ResizeToContents)
        header.setSectionResizeMode(5, QHeaderView.ResizeToContents)
        header.setSectionResizeMode(6, QHeaderView.ResizeToContents)

        layout.addWidget(self.orders_detail_table)

        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
        totals_group = QGroupBox("–ò—Ç–æ–≥–æ")
        totals_layout = QHBoxLayout()

        self.total_orders_label = QLabel("–ó–∞–∫–∞–∑–æ–≤: 0")
        self.total_revenue_label = QLabel("–í—ã—Ä—É—á–∫–∞: 0 ‚ÇΩ")
        self.total_paid_label = QLabel("–û–ø–ª–∞—á–µ–Ω–æ: 0 ‚ÇΩ")
        self.total_remaining_label = QLabel("–û—Å—Ç–∞–ª–æ—Å—å: 0 ‚ÇΩ")

        totals_layout.addWidget(self.total_orders_label)
        totals_layout.addWidget(self.total_revenue_label)
        totals_layout.addWidget(self.total_paid_label)
        totals_layout.addWidget(self.total_remaining_label)

        totals_group.setLayout(totals_layout)
        layout.addWidget(totals_group)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.update_monthly_stats()

        return tab_widget

    def on_month_selected(self, item):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—è—Ü –∏–∑ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
            row = item.row()
            month_item = self.monthly_table.item(row, 0)
            if not month_item:
                return

            selected_month = month_item.text()

            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü
            date_parts = selected_month.split('-')
            if len(date_parts) != 2:
                return

            year, month = date_parts

            # –§–æ—Ä–º–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –º–µ—Å—è—Ü—É
            month_filter = and_(
                func.strftime('%Y', Order.created_date) == year,
                func.strftime('%m', Order.created_date) == month
            )

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤
            orders = (
                self.session.query(Order)
                .filter(month_filter)
                .order_by(Order.created_date)
                .all()
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–µ—Ç–∞–ª–µ–π
            self.orders_detail_table.setRowCount(len(orders))
            for i, order in enumerate(orders):
                # ID –∑–∞–∫–∞–∑–∞
                id_item = QTableWidgetItem(str(order.id))
                id_item.setData(Qt.UserRole, order.id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –∫–ª–∏–∫–µ
                self.orders_detail_table.setItem(i, 0, id_item)

                # –î–∞—Ç–∞
                date_str = order.created_date.strftime('%d.%m.%Y') if order.created_date else ''
                self.orders_detail_table.setItem(i, 1, QTableWidgetItem(date_str))

                # –ö–ª–∏–µ–Ω—Ç
                self.orders_detail_table.setItem(i, 2, QTableWidgetItem(order.fio))

                # –£—Å–ª—É–≥–∞
                self.orders_detail_table.setItem(i, 3, QTableWidgetItem(order.service))

                # –°—Ç–æ–∏–º–æ—Å—Ç—å
                cost_item = QTableWidgetItem(f"{order.cost:,.2f} ‚ÇΩ")
                cost_item.setTextAlignment(Qt.AlignRight | Qt.AlignVCenter)
                self.orders_detail_table.setItem(i, 4, cost_item)

                # –û–ø–ª–∞—á–µ–Ω–æ
                paid_item = QTableWidgetItem(f"{order.paid_amount:,.2f} ‚ÇΩ")
                paid_item.setTextAlignment(Qt.AlignRight | Qt.AlignVCenter)
                self.orders_detail_table.setItem(i, 5, paid_item)

                # –°—Ç–∞—Ç—É—Å
                status_item = QTableWidgetItem(order.status)
                if order.remaining_amount > 0:
                    status_item.setForeground(QColor("#f44336"))
                self.orders_detail_table.setItem(i, 6, status_item)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–µ—Ç–∞–ª–µ–π
            self.orders_detail_table.show()

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
            self.orders_detail_table.resizeColumnsToContents()

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

    def on_order_selected(self, item):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–∞–∫–∞–∑–∞ –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏–∑ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏
            row = item.row()
            id_item = self.orders_detail_table.item(row, 0)
            if not id_item:
                return

            order_id = id_item.data(Qt.UserRole)
            if not order_id:
                return

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
            order = self.session.query(Order).get(order_id)
            if not order:
                return

            # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            dialog = QDialog(self)
            dialog.setWindowTitle(f"–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{order.id}")
            dialog.setMinimumWidth(600)
            dialog.setStyleSheet("""
                QDialog {
                    background-color: white;
                }
                QLabel {
                    padding: 5px;
                }
                QLabel[labelType="header"] {
                    font-weight: bold;
                    color: #2196F3;
                }
                QGroupBox {
                    margin-top: 10px;
                }
            """)

            layout = QVBoxLayout(dialog)

            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            main_info = QGroupBox("–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            main_layout = QGridLayout()

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            fields = [
                ("ID –∑–∞–∫–∞–∑–∞:", str(order.id)),
                ("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:", order.created_date.strftime('%d.%m.%Y') if order.created_date else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'),
                ("–ö–ª–∏–µ–Ω—Ç:", order.fio),
                ("–ì—Ä—É–ø–ø–∞:", order.group),
                ("–£—Å–ª—É–≥–∞:", order.service),
                ("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", order.direction or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                ("–¢–µ–º–∞:", order.theme or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'),
                ("–°—Ç–∞—Ç—É—Å:", order.status)
            ]

            for i, (label, value) in enumerate(fields):
                label_widget = QLabel(label)
                label_widget.setProperty('labelType', 'header')
                value_widget = QLabel(value)
                main_layout.addWidget(label_widget, i, 0)
                main_layout.addWidget(value_widget, i, 1)

            main_info.setLayout(main_layout)
            layout.addWidget(main_info)

            # –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            financial_info = QGroupBox("–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            financial_layout = QGridLayout()

            financial_fields = [
                ("–°—Ç–æ–∏–º–æ—Å—Ç—å:", f"{order.cost:,.2f} ‚ÇΩ"),
                ("–û–ø–ª–∞—á–µ–Ω–æ:", f"{order.paid_amount:,.2f} ‚ÇΩ"),
                ("–û—Å—Ç–∞–ª–æ—Å—å:", f"{order.remaining_amount:,.2f} ‚ÇΩ"),
                ("–°–∫–∏–¥–∫–∞:", order.discount or '–ù–µ—Ç'),
            ]

            for i, (label, value) in enumerate(financial_fields):
                label_widget = QLabel(label)
                label_widget.setProperty('labelType', 'header')
                value_widget = QLabel(value)
                if "–û—Å—Ç–∞–ª–æ—Å—å" in label and order.remaining_amount > 0:
                    value_widget.setStyleSheet("color: #f44336;")
                financial_layout.addWidget(label_widget, i, 0)
                financial_layout.addWidget(value_widget, i, 1)

            financial_info.setLayout(financial_layout)
            layout.addWidget(financial_info)

            # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            contact_info = QGroupBox("–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            contact_layout = QGridLayout()

            contact_fields = [
                ("–¢–µ–ª–µ—Ñ–æ–Ω:", order.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'),
                ("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:", order.teacher_name or '–ù–µ —É–∫–∞–∑–∞–Ω'),
                ("Email –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:", order.teacher_email or '–ù–µ —É–∫–∞–∑–∞–Ω'),
            ]

            for i, (label, value) in enumerate(contact_fields):
                label_widget = QLabel(label)
                label_widget.setProperty('labelType', 'header')
                value_widget = QLabel(value)
                contact_layout.addWidget(label_widget, i, 0)
                contact_layout.addWidget(value_widget, i, 1)

            contact_info.setLayout(contact_layout)
            layout.addWidget(contact_info)

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if order.comment:
                comment_group = QGroupBox("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
                comment_layout = QVBoxLayout()
                comment_label = QLabel(order.comment)
                comment_label.setWordWrap(True)
                comment_layout.addWidget(comment_label)
                comment_group.setLayout(comment_layout)
                layout.addWidget(comment_group)

            # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
            close_btn = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
            close_btn.clicked.connect(dialog.accept)
            close_btn.setStyleSheet("""
                QPushButton {
                    background-color: #2196F3;
                    color: white;
                    border: none;
                    padding: 8px 16px;
                    border-radius: 4px;
                }
                QPushButton:hover {
                    background-color: #1976D2;
                }
            """)
            layout.addWidget(close_btn, alignment=Qt.AlignCenter)

            dialog.exec_()

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞: {str(e)}")

    def update_monthly_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –¥–∞—Ç–∞–º
            date_filter = and_(
                Order.created_date >= self.date_from.date().toPyDate(),
                Order.created_date <= self.date_to.date().toPyDate()
            )

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            monthly_data = (
                self.session.query(
                    func.strftime('%Y-%m', Order.created_date).label('month'),
                    func.count(Order.id).label('orders'),
                    func.sum(Order.cost).label('revenue'),
                    func.sum(Order.paid_amount).label('paid'),
                    func.sum(Order.remaining_amount).label('remaining')
                )
                .filter(date_filter)
                .group_by('month')
                .order_by('month')
                .all()
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            self.monthly_table.setRowCount(len(monthly_data))

            total_orders = 0
            total_revenue = 0
            total_paid = 0
            total_remaining = 0

            for i, data in enumerate(monthly_data):
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É
                self.monthly_table.setItem(i, 0, QTableWidgetItem(data.month))
                self.monthly_table.setItem(i, 1, QTableWidgetItem(str(data.orders)))
                self.monthly_table.setItem(i, 2, QTableWidgetItem(f"{data.revenue:,.0f} ‚ÇΩ"))
                self.monthly_table.setItem(i, 3, QTableWidgetItem(f"{data.paid:,.0f} ‚ÇΩ"))
                self.monthly_table.setItem(i, 4, QTableWidgetItem(f"{data.remaining:,.0f} ‚ÇΩ"))

                # –°—É–º–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–∏
                total_orders += data.orders
                total_revenue += data.revenue
                total_paid += data.paid
                total_remaining += data.remaining

                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏
                for col in range(2, 5):
                    item = self.monthly_table.item(i, col)
                    if item:
                        item.setTextAlignment(Qt.AlignRight | Qt.AlignVCenter)

                # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –¥–æ–ª–≥–æ–≤
                remaining_item = self.monthly_table.item(i, 4)
                if remaining_item and data.remaining > 0:
                    remaining_item.setForeground(QColor("#f44336"))

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            self.total_orders_label.setText(f"–ó–∞–∫–∞–∑–æ–≤: {total_orders}")
            self.total_revenue_label.setText(f"–í—ã—Ä—É—á–∫–∞: {total_revenue:,.0f} ‚ÇΩ")
            self.total_paid_label.setText(f"–û–ø–ª–∞—á–µ–Ω–æ: {total_paid:,.0f} ‚ÇΩ")
            self.total_remaining_label.setText(f"–û—Å—Ç–∞–ª–æ—Å—å: {total_remaining:,.0f} ‚ÇΩ")

            if total_remaining > 0:
                self.total_remaining_label.setStyleSheet("color: #f44336;")
            else:
                self.total_remaining_label.setStyleSheet("")

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

    def export_monthly_stats(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ Excel"""
        try:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            file_path, _ = QFileDialog.getSaveFileName(
                self,
                "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
                f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx",
                "Excel files (*.xlsx)"
            )

            if file_path:
                # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã
                data = []
                headers = []

                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                for col in range(self.monthly_table.columnCount()):
                    headers.append(self.monthly_table.horizontalHeaderItem(col).text())

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                for row in range(self.monthly_table.rowCount()):
                    row_data = []
                    for col in range(self.monthly_table.columnCount()):
                        item = self.monthly_table.item(row, col)
                        # –û—á–∏—â–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç —Å–∏–º–≤–æ–ª–æ–≤ –≤–∞–ª—é—Ç—ã
                        value = item.text().replace(" ‚ÇΩ", "").replace(",", "")
                        row_data.append(value)
                    data.append(row_data)

                # –°–æ–∑–¥–∞–µ–º DataFrame
                df = pd.DataFrame(data, columns=headers)

                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
                numeric_columns = ["–ö–æ–ª-–≤–æ –∑–∞–∫–∞–∑–æ–≤", "–í—ã—Ä—É—á–∫–∞", "–û–ø–ª–∞—á–µ–Ω–æ", "–û—Å—Ç–∞–ª–æ—Å—å"]
                for col in numeric_columns:
                    df[col] = pd.to_numeric(df[col], errors='coerce')

                # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
                totals = df[numeric_columns].sum()
                totals_df = pd.DataFrame([totals], columns=numeric_columns)
                totals_df["–ú–µ—Å—è—Ü"] = "–ò–¢–û–ì–û:"
                df = pd.concat([df, totals_df], ignore_index=True)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                writer = pd.ExcelWriter(file_path, engine='xlsxwriter')
                df.to_excel(writer, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', index=False)

                # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç workbook –∏ worksheet
                workbook = writer.book
                worksheet = writer.sheets['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']

                # –§–æ—Ä–º–∞—Ç—ã –¥–ª—è —á–∏—Å–µ–ª
                money_format = workbook.add_format({'num_format': '#,##0 ‚ÇΩ'})
                number_format = workbook.add_format({'num_format': '#,##0'})

                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –∫ –∫–æ–ª–æ–Ω–∫–∞–º
                worksheet.set_column('B:B', 15, number_format)  # –ö–æ–ª-–≤–æ –∑–∞–∫–∞–∑–æ–≤
                worksheet.set_column('C:E', 15, money_format)  # –î–µ–Ω–µ–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏

                # –ó–∞–∫—Ä—ã–≤–∞–µ–º writer –≤–º–µ—Å—Ç–æ save()
                writer.close()

                QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞!")

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

    def createServicesAnalysisTab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ —É—Å–ª—É–≥"""
        tab_widget = QWidget()
        layout = QVBoxLayout(tab_widget)

        # –¢–æ–ø 10 —É—Å–ª—É–≥
        top_services_group = QGroupBox("üåü –¢–æ–ø 10 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —É—Å–ª—É–≥")
        top_services_layout = QVBoxLayout()

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —É—Å–ª—É–≥–∞–º
        top_services = (
            self.session.query(
                Order.service,
                func.count(Order.id).label('orders_count'),
                func.sum(Order.cost).label('total_revenue'),
                func.avg(Order.cost).label('avg_cost')
            )
            .group_by(Order.service)
            .order_by(desc('orders_count'))
            .limit(10)
            .all()
        )

        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —É—Å–ª—É–≥–∏
        for i, service in enumerate(top_services):
            card = self.createServiceCard(
                position=i + 1,
                name=service.service,
                count=service.orders_count,
                revenue=service.total_revenue,
                avg_cost=service.avg_cost
            )
            top_services_layout.addWidget(card)

        top_services_group.setLayout(top_services_layout)
        layout.addWidget(top_services_group)

        return tab_widget

    def createServiceCard(self, position, name, count, revenue, avg_cost):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —É—Å–ª—É–≥–∏"""
        card = QWidget()
        card.setStyleSheet("""
            QWidget {
                background-color: white;
                border-radius: 8px;
                padding: 10px;
            }
            QLabel {
                background-color: transparent;
            }
        """)

        layout = QHBoxLayout(card)

        # –ü–æ–∑–∏—Ü–∏—è –∏ –º–µ–¥–∞–ª—å
        medal = "ü•á" if position == 1 else "ü•à" if position == 2 else "ü•â" if position == 3 else f"#{position}"
        position_label = QLabel(medal)
        position_label.setStyleSheet("font-size: 20px;")
        layout.addWidget(position_label)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–µ
        info_layout = QVBoxLayout()
        name_label = QLabel(name)
        name_label.setStyleSheet("font-weight: bold; font-size: 18px;")
        stats_label = QLabel(f"üìä –ó–∞–∫–∞–∑–æ–≤: {count} | üí∞ –í—ã—Ä—É—á–∫–∞: {revenue:,.0f} ‚ÇΩ | üíé –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_cost:,.0f} ‚ÇΩ")

        info_layout.addWidget(name_label)
        info_layout.addWidget(stats_label)
        layout.addLayout(info_layout)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–Ω—å
        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(5)
        shadow.setXOffset(2)
        shadow.setYOffset(2)
        shadow.setColor(QColor("#cccccc"))
        card.setGraphicsEffect(shadow)

        return card
