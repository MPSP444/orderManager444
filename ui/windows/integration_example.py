import sys
import os
from PyQt5.QtWidgets import (QApplication, QMainWindow, QDialog, QVBoxLayout,
                             QHBoxLayout, QPushButton, QLabel, QLineEdit,
                             QTableWidget, QTableWidgetItem, QMessageBox,
                             QToolBar, QWidget, QDoubleValidator)
from PyQt5.QtCore import Qt, QSettings
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from path_manager import PathManager, PathManagerDialog
from excel_manager import ExcelManager, ExcelWriteErrorDialog


# –ò–º–∏—Ç–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
class Order:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""

    def __init__(self, id, fio, group, service, cost, paid_amount=0):
        self.id = id
        self.fio = fio
        self.group = group
        self.service = service
        self.cost = cost
        self.paid_amount = paid_amount
        self.remaining_amount = cost - paid_amount
        self.status = "–ù–æ–≤—ã–π"
        self.discount = None
        self.created_date = datetime.now().date()


# –ò–º–∏—Ç–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
class DatabaseManager:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""

    def __init__(self):
        self.orders = [
            Order(1, "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω", "–ü–ò-101", "–ö—É—Ä—Å–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞", 5000, 0),
            Order(2, "–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä", "–ò–°-202", "–î–∏–ø–ª–æ–º–Ω–∞—è —Ä–∞–±–æ—Ç–∞", 12000, 5000),
            Order(3, "–°–∏–¥–æ—Ä–æ–≤ –°–∏–¥–æ—Ä", "–ú–û-303", "–†–∞—Å—á–µ—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞", 3000, 3000)
        ]

    def session_scope(self):
        """–ò–º–∏—Ç–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏"""

        class SessionContext:
            def __init__(self, manager):
                self.manager = manager

            def __enter__(self):
                return self

            def __exit__(self, exc_type, exc_val, exc_tb):
                pass

            def query(self, cls):
                class Query:
                    def __init__(self, objects):
                        self.objects = objects

                    def get(self, id):
                        for obj in self.objects:
                            if obj.id == id:
                                return obj
                        return None

                return Query(self.manager.orders)

        return SessionContext(self)


# –ò–º–∏—Ç–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
class StateManager:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""

    def __init__(self):
        self.observers = []

    def add_observer(self, observer):
        self.observers.append(observer)

    def notify_all(self):
        for observer in self.observers:
            if hasattr(observer, 'update_data'):
                observer.update_data()


# –ö–ª–∞—Å—Å –æ–∫–Ω–∞ –æ–ø–ª–∞—Ç—ã
class PaymentWindow(QDialog):
    """–û–∫–Ω–æ –≤–Ω–µ—Å–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã"""

    def __init__(self, parent=None, order=None):
        super().__init__(parent)
        self.db_manager = DatabaseManager()
        self.state_manager = StateManager()

        if order:
            self.original_order_id = order.id
        else:
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑
            self.original_order_id = 1

        try:
            self.load_order_data()
            self.setup_ui()

            # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø—É—Ç–µ–π
            self.integrate_path_manager()

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–∫–Ω–∞: {str(e)}")

    def load_order_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞"""
        with self.db_manager.session_scope() as session:
            order = session.query(Order).get(self.original_order_id)
            if not order:
                raise ValueError(f"–ó–∞–∫–∞–∑ —Å ID {self.original_order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            self.current_data = {
                'id': order.id,
                'fio': order.fio,
                'group': order.group,
                'service': order.service,
                'cost': float(order.cost) if order.cost not in (None, '–ù–µ —É–∫–∞–∑–∞–Ω–æ') else 0.0,
                'paid_amount': float(order.paid_amount) if order.paid_amount not in (None, '–ù–µ —É–∫–∞–∑–∞–Ω–æ') else 0.0,
                'discount': order.discount if order.discount not in (None, '–ù–µ —É–∫–∞–∑–∞–Ω–æ') else None,
                'status': order.status
            }

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—ã
            self.discount_amount = 0
            self.discounted_total = self.current_data['cost']
            self.remaining = max(0, self.discounted_total - self.current_data['paid_amount'])

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.setWindowTitle("–í–Ω–µ—Å–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã")
        self.setGeometry(300, 300, 400, 300)

        layout = QVBoxLayout(self)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ
        info_group = QVBoxLayout()
        self.fio_label = QLabel(f"–§–ò–û: {self.current_data['fio']}")
        self.group_label = QLabel(f"–ì—Ä—É–ø–ø–∞: {self.current_data['group']}")
        self.service_label = QLabel(f"–£—Å–ª—É–≥–∞: {self.current_data['service']}")
        self.cost_label = QLabel(f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {self.current_data['cost']:.2f} —Ä—É–±.")
        self.paid_label = QLabel(f"–£–∂–µ –æ–ø–ª–∞—á–µ–Ω–æ: {self.current_data['paid_amount']:.2f} —Ä—É–±.")
        self.remaining_label = QLabel(f"–û—Å—Ç–∞–ª–æ—Å—å: {self.remaining:.2f} —Ä—É–±.")

        if self.current_data['discount']:
            self.discount_label = QLabel(f"–°–∫–∏–¥–∫–∞: {self.current_data['discount']}")
            self.discounted_cost_label = QLabel(f"–°—É–º–º–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π: {self.discounted_total:.2f} —Ä—É–±.")
            info_group.addWidget(self.discount_label)
            info_group.addWidget(self.discounted_cost_label)

        for label in [self.fio_label, self.group_label, self.service_label,
                      self.cost_label, self.paid_label, self.remaining_label]:
            info_group.addWidget(label)

        layout.addLayout(info_group)

        # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã
        payment_layout = QHBoxLayout()
        self.payment_label = QLabel("–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã:")
        self.payment_input = QLineEdit()
        self.payment_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É")
        validator = QDoubleValidator(0, 999999.99, 2)
        validator.setNotation(QDoubleValidator.StandardNotation)
        self.payment_input.setValidator(validator)

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞
        self.fill_remaining_btn = QPushButton("–ó–∞–ø–æ–ª–Ω–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫")
        self.fill_remaining_btn.clicked.connect(self.fill_remaining_amount)
        self.fill_remaining_btn.setObjectName("fill_remaining_btn")

        payment_layout.addWidget(self.payment_label)
        payment_layout.addWidget(self.payment_input)
        payment_layout.addWidget(self.fill_remaining_btn)

        layout.addLayout(payment_layout)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.buttons_layout = QHBoxLayout()
        self.save_btn = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        self.save_btn.clicked.connect(self.save_payment)
        self.cancel_btn = QPushButton("–û—Ç–º–µ–Ω–∞")
        self.cancel_btn.clicked.connect(self.reject)

        self.buttons_layout.addWidget(self.save_btn)
        self.buttons_layout.addWidget(self.cancel_btn)
        layout.addLayout(self.buttons_layout)

    def integrate_path_manager(self):
        """–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—É—Ç–µ–π"""
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É—Ç–µ–π
        settings_btn = QPushButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")

        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é –¥–ª—è –∫–Ω–æ–ø–∫–∏
        from PyQt5.QtWidgets import QMenu, QAction
        settings_menu = QMenu(self)

        # –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç—è–º–∏
        path_action = settings_menu.addAction("üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç—è–º–∏")
        path_action.triggered.connect(lambda: self.show_path_manager())

        # –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Excel
        test_excel_action = settings_menu.addAction("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Excel")
        test_excel_action.triggered.connect(lambda: self.test_excel_connection())

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –¥–ª—è –∫–Ω–æ–ø–∫–∏
        settings_btn.setMenu(settings_menu)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–∫–Ω–∞ –æ–ø–ª–∞—Ç—ã
        self.buttons_layout.addWidget(settings_btn)

    def show_path_manager(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç—è–º–∏"""
        dialog = PathManagerDialog(self)
        dialog.exec_()

    def test_excel_connection(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Excel"""
        path_manager = PathManager()
        excel_path = path_manager.get_path('payment_excel')

        if not excel_path:
            QMessageBox.warning(
                self,
                "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                "–ü—É—Ç—å –∫ Excel-—Ñ–∞–π–ª—É –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ —É–∫–∞–∑–∞–Ω.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."
            )
            return

        excel_manager = ExcelManager(self)
        success, message = excel_manager.test_excel_connection(excel_path)

        if success:
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", message)
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", message)

    def fill_remaining_amount(self):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–π—Å—è —Å—É–º–º—ã"""
        self.payment_input.setText(str(self.remaining))

    def save_payment(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã"""
        try:
            if not self.validate_payment():
                return False

            payment_amount = float(self.payment_input.text())

            with self.db_manager.session_scope() as session:
                # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂—É—é –≤–µ—Ä—Å–∏—é –∑–∞–∫–∞–∑–∞
                order = session.query(Order).get(self.original_order_id)
                if not order:
                    QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False

                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
                order.paid_amount = (order.paid_amount or 0) + payment_amount
                order.remaining_amount = self.discounted_total - order.paid_amount

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –ø—Ä–∏ –ª—é–±–æ–π –æ–ø–ª–∞—Ç–µ
                order.payment_date = datetime.now().date()

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                if order.remaining_amount <= 0:
                    order.status = '–í—ã–ø–æ–ª–Ω–µ–Ω'
                elif order.remaining_amount > 0 and order.status != '–í —Ä–∞–±–æ—Ç–µ':
                    order.status = '–í –æ–∂–∏–¥–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã'

                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ Excel
                self.add_excel_record(order, payment_amount)

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
                self.state_manager.notify_all()

                QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω–∞!")
                self.accept()
                return True

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã: {str(e)}")
            return False

    def add_excel_record(self, order, payment_amount):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ Excel –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–Ω–µ—Å–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Excel
            excel_manager = ExcelManager(self)

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
            payment_data = {
                'date': datetime.now(),
                'client': order.fio,
                'service': order.service,
                'amount': payment_amount
            }

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ Excel
            excel_manager.add_payment_to_excel(payment_data)

        except Exception as e:
            QMessageBox.warning(
                self,
                "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ Excel: {str(e)}"
            )

    def validate_payment(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            if not self.payment_input.text():
                raise ValueError("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã")

            payment_amount = float(self.payment_input.text())
            if payment_amount <= 0:
                raise ValueError("–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")

            if payment_amount > self.remaining:
                raise ValueError("–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã –ø—Ä–µ–≤—ã—à–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫")

            return True
        except ValueError as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", str(e))
            return False


# –ö–ª–∞—Å—Å –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class MainWindow(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

    def __init__(self):
        super().__init__()
        self.db_manager = DatabaseManager()
        self.state_manager = StateManager()
        self.state_manager.add_observer(self)
        self.initUI()

    def initUI(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.setWindowTitle('–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏')
        self.setGeometry(100, 100, 800, 600)

        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        main_layout = QVBoxLayout(central_widget)

        # –°–æ–∑–¥–∞–µ–º —Ç—É–ª–±–∞—Ä
        self.toolbar = QToolBar()
        self.addToolBar(self.toolbar)

        # –ö–Ω–æ–ø–∫–∏
        new_payment_btn = QPushButton("üí∞ –í–Ω–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É")
        new_payment_btn.clicked.connect(self.show_payment_window)
        self.toolbar.addWidget(new_payment_btn)

        path_manager_btn = QPushButton("üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç—è–º–∏")
        path_manager_btn.clicked.connect(self.show_path_manager)
        self.toolbar.addWidget(path_manager_btn)

        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤
        self.table = QTableWidget()
        self.table.setColumnCount(5)
        self.table.setHorizontalHeaderLabels(['ID', '–§–ò–û', '–ì—Ä—É–ø–ø–∞', '–£—Å–ª—É–≥–∞', '–°—É–º–º–∞'])
        self.load_data()

        main_layout.addWidget(self.table)

    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É"""
        with self.db_manager.session_scope() as session:
            orders = session.query(Order).get_all()

            self.table.setRowCount(len(orders))
            for row, order in enumerate(orders):
                self.table.setItem(row, 0, QTableWidgetItem(str(order.id)))
                self.table.setItem(row, 1, QTableWidgetItem(order.fio))
                self.table.setItem(row, 2, QTableWidgetItem(order.group))
                self.table.setItem(row, 3, QTableWidgetItem(order.service))
                self.table.setItem(row, 4, QTableWidgetItem(f"{order.cost:.2f}"))

        self.table.resizeColumnsToContents()

    def show_payment_window(self):
        """–ü–æ–∫–∞–∑ –æ–∫–Ω–∞ –≤–Ω–µ—Å–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã"""
        current_row = self.table.currentRow()
        if current_row >= 0:
            order_id = int(self.table.item(current_row, 0).text())

            with self.db_manager.session_scope() as session:
                order = session.query(Order).get(order_id)
                if order:
                    dialog = PaymentWindow(self, order)
                    if dialog.exec_() == QDialog.Accepted:
                        self.load_data()
        else:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã")

    def show_path_manager(self):
        """–ü–æ–∫–∞–∑ –æ–∫–Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç—è–º–∏"""
        dialog = PathManagerDialog(self)
        dialog.exec_()

    def update_data(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        self.load_data()


# –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ DatabaseManager
def get_all(self):
    return self.objects


DatabaseManager.session_scope().query(Order).get_all = get_all


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main():
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())


if __name__ == "__main__":
    main()