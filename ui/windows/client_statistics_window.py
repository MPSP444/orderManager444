import os

from PyQt5.QtWidgets import (QDialog, QWidget, QVBoxLayout, QHBoxLayout,
                             QTabWidget, QLabel, QPushButton, QFileDialog,
                             QFrame, QScrollArea, QTreeWidget, QTreeWidgetItem, QMessageBox, QGridLayout)
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QFont
import react
from datetime import datetime, timedelta
from core.database import Order
from sqlalchemy import func, case
from reportlab.lib import colors
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, PageBreak
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from sqlalchemy import case, func
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QHeaderView  # –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∫–æ–ª–æ–Ω–æ–∫
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont


class ClientStatisticsWindow(QDialog):
    def __init__(self, session, client_fio, parent=None):
        super().__init__(None)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º parent=None –¥–ª—è –ø–æ–ª–Ω–æ–π –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        self.session = session
        self.client_fio = client_fio

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –æ–∫–Ω–∞
        self.setWindowFlags(Qt.Window | Qt.WindowCloseButtonHint | Qt.WindowMinMaxButtonsHint)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        self.setMinimumSize(1000, 700)  # –ú–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∫–∞–∫ –Ω—É–∂–Ω–æ

        # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ–Ω–∞
        self.setAutoFillBackground(False)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç–∏–ª–∏
        self.setStyleSheet("")

        self.initUI()

    def initUI(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.setWindowTitle(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ - {self.client_fio}")
        self.setMinimumSize(1000, 700)

        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(20, 20, 20, 20)  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã
        main_layout.setSpacing(15)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = QLabel(f"–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞: {self.client_fio}")
        header.setFont(QFont("Arial", 14, QFont.Bold))
        header.setAlignment(Qt.AlignLeft)  # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é
        header.setStyleSheet("padding: 10px;")
        main_layout.addWidget(header)

        # –í–∫–ª–∞–¥–∫–∏
        self.tabs = QTabWidget()
        self.tabs.setStyleSheet("""
            QTabWidget::pane {
                border: 1px solid #ddd;
                border-radius: 4px;
                padding: 10px;
            }
            QTabBar::tab {
                padding: 8px 16px;
                margin: 2px;
                background: #f0f0f0;
                border: 1px solid #ddd;
                border-radius: 4px;
            }
            QTabBar::tab:selected {
                background: #2196F3;
                color: white;
            }
        """)

        self.tabs.addTab(self.create_general_tab(), "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        self.tabs.addTab(self.create_orders_analysis_tab(), "üìà –ê–Ω–∞–ª–∏–∑ –∑–∞–∫–∞–∑–æ–≤")
        self.tabs.addTab(self.create_orders_history_tab(), "üìÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤")
        self.tabs.addTab(self.create_payment_history_tab(), "üí∞ –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç")
        self.tabs.addTab(self.create_client_rating_tab(), "üèÜ –†–µ–π—Ç–∏–Ω–≥ –∫–ª–∏–µ–Ω—Ç–∞")
        self.tabs.addTab(self.create_predictions_tab(), "üîÆ –ü—Ä–æ–≥–Ω–æ–∑—ã")

        main_layout.addWidget(self.tabs)

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        button_layout = QHBoxLayout()
        button_layout.setContentsMargins(0, 10, 0, 0)  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É

        export_btn = QPushButton("üìë –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF")
        export_btn.setMinimumWidth(1000)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –∫–Ω–æ–ø–æ–∫
        export_btn.clicked.connect(self.export_to_pdf)

        close_btn = QPushButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å")
        close_btn.setMinimumWidth(1000)
        close_btn.clicked.connect(self.close)

        button_layout.addWidget(export_btn)
        button_layout.addStretch()  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—â–∏–π—Å—è —ç–ª–µ–º–µ–Ω—Ç
        button_layout.addWidget(close_btn)
        main_layout.addLayout(button_layout)

        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏
        self.setStyleSheet("""
            QDialog {
                background-color: white;
            }
            QLabel {
                background: transparent;
                padding: 5px;
            }
            QPushButton {
                padding: 8px 16px;
                background: #2196F3;
                color: white;
                border: none;
                border-radius: 4px;
                min-width: 150px;
            }
            QPushButton:hover {
                background: #1976D2;
            }
            QFrame {
                background: white;
                border: 1px solid #ddd;
                border-radius: 4px;
                padding: 15px;
                margin: 5px;
            }
        """)

    def create_general_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        layout.setContentsMargins(10, 10, 10, 10)
        layout.setSpacing(5)

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_table = QTreeWidget()
        stats_table.setHeaderHidden(True)
        stats_table.setColumnCount(2)
        stats_table.setRootIsDecorated(False)
        stats_table.setAlternatingRowColors(True)
        stats_table.setStyleSheet("""
            QTreeWidget {
                border: 1px solid #ddd;
                border-radius: 4px;
                background-color: white;
                font-size: 13px;
            }
            QTreeWidget::item {
                padding: 8px;
                border-bottom: 1px solid #eee;
            }
            QTreeWidget::item:selected {
                background-color: #e3f2fd;
                color: #1565C0;
            }
        """)

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = self.session.query(
            func.count(Order.id).label('total_orders'),
            func.sum(Order.cost).label('total_cost'),
            func.avg(Order.cost).label('avg_cost'),
            func.sum(Order.remaining_amount).label('total_debt')
        ).filter(Order.fio == self.client_fio).first()

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        stats_data = [
            ("üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤:", f"{stats.total_orders}"),
            ("üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤:", f"{stats.total_cost:,.2f}‚ÇΩ"),
            ("üìä –°—Ä–µ–¥–Ω–∏–π —á–µ–∫:", f"{stats.avg_cost:,.2f}‚ÇΩ"),
            ("‚ö†Ô∏è –¢–µ–∫—É—â–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å:", f"{stats.total_debt:,.2f}‚ÇΩ")
        ]

        for label_text, value_text in stats_data:
            item = QTreeWidgetItem(stats_table)
            item.setText(0, label_text)
            item.setText(1, value_text)
            item.setTextAlignment(1, Qt.AlignLeft)  # –ú–µ–Ω—è–µ–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –Ω–∞ –ª–µ–≤–æ–µ

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–ª–æ–Ω–æ–∫ - –¥–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –∫–æ–ª–æ–Ω–∫—É —à–∏—Ä–µ, –∞ –≤—Ç–æ—Ä—É—é —É–∂–µ
        stats_table.setColumnWidth(0, 300)  # –£–º–µ–Ω—å—à–∞–µ–º —à–∏—Ä–∏–Ω—É –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏
        stats_table.setColumnWidth(1, 150)  # –£–º–µ–Ω—å—à–∞–µ–º —à–∏—Ä–∏–Ω—É –≤—Ç–æ—Ä–æ–π –∫–æ–ª–æ–Ω–∫–∏

        layout.addWidget(stats_table)
        return tab

    def create_orders_history_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        layout.setContentsMargins(10, 10, 10, 10)
        layout.setSpacing(5)

        tree = QTreeWidget()
        tree.setHeaderLabels([
            "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", "–£—Å–ª—É–≥–∞", "–°—Ç–æ–∏–º–æ—Å—Ç—å", "–°–∫–∏–¥–∫–∞",
            "–û–ø–ª–∞—á–µ–Ω–æ", "–û—Å—Ç–∞—Ç–æ–∫", "–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã", "–°—Ç–∞—Ç—É—Å"
        ])

        tree.setStyleSheet("""
            QTreeWidget {
                border: 1px solid #ddd;
                border-radius: 4px;
                background-color: white;
                font-size: 13px;
            }
            QTreeWidget::item {
                padding: 8px;
                border-bottom: 1px solid #eee;
            }
            QTreeWidget::item:selected {
                background-color: #e3f2fd;
                color: #1565C0;
            }
            QHeaderView::section {
                background-color: #f5f5f5;
                padding: 8px;
                border: none;
                border-right: 1px solid #ddd;
                border-bottom: 1px solid #ddd;
                font-weight: bold;
            }
        """)

        orders = self.session.query(Order).filter(
            Order.fio == self.client_fio
        ).order_by(Order.created_date.desc()).all()

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≥–æ–¥–∞–º –∏ –º–µ—Å—è—Ü–∞–º
        for order in orders:
            year_str = order.created_date.strftime('%Y')
            month_str = order.created_date.strftime('%B %Y')

            # –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –≥–æ–¥–∞
            year_items = tree.findItems(year_str, Qt.MatchExactly)
            if year_items:
                year_item = year_items[0]
            else:
                year_item = QTreeWidgetItem(tree, [year_str])
                year_item.setExpanded(True)
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç –¥–ª—è –≥–æ–¥–∞
                font = year_item.font(0)
                font.setBold(True)
                year_item.setFont(0, font)

            # –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –º–µ—Å—è—Ü–∞
            month_item = None
            for i in range(year_item.childCount()):
                if year_item.child(i).text(0) == month_str:
                    month_item = year_item.child(i)
                    break
            if not month_item:
                month_item = QTreeWidgetItem(year_item, [month_str])
                month_item.setExpanded(True)
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç –¥–ª—è –º–µ—Å—è—Ü–∞
                font = month_item.font(0)
                font.setBold(True)
                month_item.setFont(0, font)

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ —Å –ø–æ–ª–Ω–æ–π –¥–∞—Ç–æ–π —Å–æ–∑–¥–∞–Ω–∏—è
            order_item = QTreeWidgetItem(month_item)
            order_item.setText(0, order.created_date.strftime('%d.%m.%Y %H:%M'))  # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è
            order_item.setText(1, order.service)
            order_item.setText(2, f"{order.cost:,.2f}‚ÇΩ")
            order_item.setText(3, order.discount or "-")
            order_item.setText(4, f"{order.paid_amount:,.2f}‚ÇΩ")
            order_item.setText(5, f"{order.remaining_amount:,.2f}‚ÇΩ")
            order_item.setText(6, order.payment_date.strftime('%d.%m.%Y %H:%M') if order.payment_date else "-")
            order_item.setText(7, order.status)

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            for col in [2, 4, 5]:
                order_item.setTextAlignment(col, Qt.AlignLeft)  # –ú–µ–Ω—è–µ–º –Ω–∞ –ª–µ–≤–æ–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–ª–æ–Ω–æ–∫
        header = tree.header()
        header.setSectionResizeMode(1, QHeaderView.Stretch)  # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫—É —Å —É—Å–ª—É–≥–æ–π
        header.setStretchLastSection(False)

        # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        column_widths = [200, -1, 100, 80, 100, 100, 150, 100]
        for i, width in enumerate(column_widths):
            if width > 0:
                tree.setColumnWidth(i, width)

        layout.addWidget(tree)
        return tab


    def create_orders_analysis_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–∫–∞–∑–æ–≤"""
        tab = QWidget()
        layout = QVBoxLayout(tab)

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º –∑–∞–∫–∞–∑–æ–≤
        services_stats = self.session.query(
            Order.service,
            func.count(Order.id).label('count'),
            func.sum(Order.cost).label('total')
        ).filter(Order.fio == self.client_fio).group_by(Order.service).all()

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —É—Å–ª—É–≥
        services_frame = QFrame()
        services_frame.setStyleSheet("""
            QFrame {
                background: white;
                border: 1px solid #ddd;
                border-radius: 4px;
                padding: 10px;
            }
        """)
        services_layout = QVBoxLayout(services_frame)

        title = QLabel("üîç –ê–Ω–∞–ª–∏–∑ –∑–∞–∫–∞–∑—ã–≤–∞–µ–º—ã—Ö —É—Å–ª—É–≥")
        title.setFont(QFont("Arial", 12, QFont.Bold))
        services_layout.addWidget(title)

        for service, count, total in services_stats:
            service_info = QLabel(
                f"‚Ä¢ {service}: {count} –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å—É–º–º—É {total:,.2f}‚ÇΩ"
            )
            services_layout.addWidget(service_info)

        layout.addWidget(services_frame)

        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≥—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤

        return tab

    def create_payment_history_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–ª–∞—Ç"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        layout.setContentsMargins(10, 10, 10, 10)
        layout.setSpacing(5)

        tree = QTreeWidget()
        tree.setHeaderLabels([
            "–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã", "–£—Å–ª—É–≥–∞", "–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã", "–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞",
            "–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", "–û—Å—Ç–∞—Ç–æ–∫", "–°–∫–∏–¥–∫–∞", "–°—Ç–∞—Ç—É—Å"
        ])

        tree.setStyleSheet("""
            QTreeWidget {
                border: 1px solid #ddd;
                border-radius: 4px;
                background-color: white;
                font-size: 13px;
            }
            QTreeWidget::item {
                padding: 8px;
                border-bottom: 1px solid #eee;
            }
            QTreeWidget::item:selected {
                background-color: #e3f2fd;
                color: #1565C0;
            }
            QHeaderView::section {
                background-color: #f5f5f5;
                padding: 8px;
                border: none;
                border-right: 1px solid #ddd;
                border-bottom: 1px solid #ddd;
                font-weight: bold;
            }
        """)

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã —Å –æ–ø–ª–∞—Ç–∞–º–∏
        orders = self.session.query(Order).filter(
            Order.fio == self.client_fio,
            Order.paid_amount > 0
        ).order_by(Order.payment_date.desc()).all()

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≥–æ–¥–∞–º –∏ –º–µ—Å—è—Ü–∞–º
        for order in orders:
            if order.payment_date:
                year_str = order.payment_date.strftime('%Y')
                month_str = order.payment_date.strftime('%B %Y')

                # –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –≥–æ–¥–∞
                year_items = tree.findItems(year_str, Qt.MatchExactly)
                if year_items:
                    year_item = year_items[0]
                else:
                    year_item = QTreeWidgetItem(tree, [year_str])
                    year_item.setExpanded(True)
                    font = year_item.font(0)
                    font.setBold(True)
                    year_item.setFont(0, font)

                # –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –º–µ—Å—è—Ü–∞
                month_item = None
                for i in range(year_item.childCount()):
                    if year_item.child(i).text(0) == month_str:
                        month_item = year_item.child(i)
                        break
                if not month_item:
                    month_item = QTreeWidgetItem(year_item, [month_str])
                    month_item.setExpanded(True)
                    font = month_item.font(0)
                    font.setBold(True)
                    month_item.setFont(0, font)

                # –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂
                payment_item = QTreeWidgetItem(month_item)
                payment_item.setText(0, order.payment_date.strftime('%d.%m.%Y %H:%M'))
                payment_item.setText(1, order.service)
                payment_item.setText(2, f"{order.paid_amount:,.2f}‚ÇΩ")
                payment_item.setText(3, order.created_date.strftime('%d.%m.%Y %H:%M'))
                payment_item.setText(4, f"{order.cost:,.2f}‚ÇΩ")
                payment_item.setText(5, f"{order.remaining_amount:,.2f}‚ÇΩ")
                payment_item.setText(6, order.discount or "-")
                payment_item.setText(7, order.status)

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                for col in [2, 4, 5]:
                    payment_item.setTextAlignment(col, Qt.AlignLeft)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–ª–æ–Ω–æ–∫
        header = tree.header()
        header.setSectionResizeMode(1, QHeaderView.Stretch)
        header.setStretchLastSection(False)

        column_widths = [200, -1, 100, 150, 100, 100, 80, 100]
        for i, width in enumerate(column_widths):
            if width > 0:
                tree.setColumnWidth(i, width)

        layout.addWidget(tree)
        return tab

    def create_client_rating_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        layout.setContentsMargins(10, 10, 10, 10)
        layout.setSpacing(5)

        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–ª–∏–µ–Ω—Ç–∞
            client_stats = self.session.query(
                func.count(Order.id).label('orders_count'),
                func.sum(Order.cost).label('total_spent'),
                func.avg(Order.cost).label('avg_order'),
                func.sum(case((Order.remaining_amount > 0, 1), else_=0)).label('delayed_payments')
            ).filter(Order.fio == self.client_fio).first()

            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤
            total_clients = self.session.query(func.count(func.distinct(Order.fio))).scalar()

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞
            position_by_orders = self.session.query(
                func.count(func.distinct(Order.fio))
            ).filter(
                self.session.query(func.count(Order.id))
                .filter(Order.fio != self.client_fio)
                .group_by(Order.fio)
                .having(func.count(Order.id) > client_stats.orders_count)
                .scalar_subquery()
            ).scalar() + 1

            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞
            rating_table = QTreeWidget()
            rating_table.setHeaderHidden(True)
            rating_table.setColumnCount(2)
            rating_table.setRootIsDecorated(False)
            rating_table.setAlternatingRowColors(True)
            rating_table.setStyleSheet("""
                QTreeWidget {
                    border: 1px solid #ddd;
                    border-radius: 4px;
                    background-color: white;
                    font-size: 13px;
                }
                QTreeWidget::item {
                    padding: 8px;
                    border-bottom: 1px solid #eee;
                }
                QTreeWidget::item:selected {
                    background-color: #e3f2fd;
                    color: #1565C0;
                }
            """)

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            rating_data = [
                ("üèÜ –†–µ–π—Ç–∏–Ω–≥ –∫–ª–∏–µ–Ω—Ç–∞", ""),
                ("üéØ –ü–æ–∑–∏—Ü–∏—è —Å—Ä–µ–¥–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤:", f"{position_by_orders} –∏–∑ {total_clients}"),
                ("üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤:", f"{client_stats.orders_count}"),
                ("üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤:", f"{client_stats.total_spent:,.2f}‚ÇΩ"),
                ("üìä –°—Ä–µ–¥–Ω–∏–π —á–µ–∫:", f"{client_stats.avg_order:,.2f}‚ÇΩ"),
                ("‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏:", f"{client_stats.delayed_payments}")
            ]

            for label_text, value_text in rating_data:
                item = QTreeWidgetItem(rating_table)
                item.setText(0, label_text)
                item.setText(1, value_text)
                if not value_text:  # –î–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
                    font = item.font(0)
                    font.setBold(True)
                    item.setFont(0, font)
                else:
                    item.setTextAlignment(1, Qt.AlignLeft)

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–ª–æ–Ω–æ–∫
            rating_table.setColumnWidth(0, 200)
            rating_table.setColumnWidth(1, 150)

            layout.addWidget(rating_table)

            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = QTreeWidget()
            recommendations.setHeaderHidden(True)
            recommendations.setColumnCount(1)
            recommendations.setRootIsDecorated(False)
            recommendations.setStyleSheet(rating_table.styleSheet())

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            header_item = QTreeWidgetItem(recommendations, ["üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"])
            font = header_item.font(0)
            font.setBold(True)
            header_item.setFont(0, font)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recs = [
                "‚≠ê –ü—Ä–µ–º–∏—É–º –∫–ª–∏–µ–Ω—Ç - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å VIP-–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ" if client_stats.orders_count >= 10
                else "‚ú® –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–≤–µ–ª–∏—á–∏—Ç—å —Å–∫–∏–¥–∫—É" if client_stats.orders_count >= 5
                else "üìà –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏",

                "üíé –í—ã—Å–æ–∫–∏–π —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ"
                if client_stats.avg_order > 5000 else "",

                "‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –ø–ª–∞—Ç–µ–∂–Ω–∞—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ - –º–æ–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ—Ç—Å—Ä–æ—á–∫—É –ø–ª–∞—Ç–µ–∂–∞"
                if client_stats.delayed_payments == 0
                else "‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ—Å—Ä–æ—á–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞"
            ]

            for rec in recs:
                if rec:  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                    QTreeWidgetItem(recommendations, [rec])

            recommendations.setColumnWidth(0, 400)
            layout.addWidget(recommendations)
            layout.addStretch()

        except Exception as e:
            error_label = QLabel(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            error_label.setStyleSheet("color: red;")
            layout.addWidget(error_label)

        return tab



    def create_predictions_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"""
        tab = QWidget()
        layout = QVBoxLayout(tab)

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞
        orders = self.session.query(
            Order.created_date,
            Order.payment_date,
            Order.service,
            Order.cost,
            Order.paid_amount
        ).filter(
            Order.fio == self.client_fio
        ).order_by(Order.created_date).all()

        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
        predictions_frame = QFrame()
        predictions_frame.setStyleSheet("""
                    QFrame {
                        background: white;
                        border: 1px solid #ddd;
                        border-radius: 4px;
                        padding: 10px;
                    }
                """)
        predictions_layout = QVBoxLayout(predictions_frame)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("üîÆ –ü—Ä–æ–≥–Ω–æ–∑—ã –∏ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏")
        title.setFont(QFont("Arial", 12, QFont.Bold))
        predictions_layout.addWidget(title)

        # –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–æ–≤
        if len(orders) >= 2:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É –∑–∞–∫–∞–∑–∞–º–∏
            time_between_orders = []
            for i in range(1, len(orders)):
                delta = orders[i].created_date - orders[i - 1].created_date
                time_between_orders.append(delta.days)

            avg_time = sum(time_between_orders) / len(time_between_orders)

            # –ü—Ä–æ–≥–Ω–æ–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞
            last_order = orders[-1].created_date
            next_order = last_order + timedelta(days=avg_time)

            prediction = QLabel(f"üìÖ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑ –æ–∂–∏–¥–∞–µ—Ç—Å—è –æ–∫–æ–ª–æ: {next_order.strftime('%d.%m.%Y')}")
            predictions_layout.addWidget(prediction)

        # –ê–Ω–∞–ª–∏–∑ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
        if orders:
            payment_delays = []
            for order in orders:
                if order.payment_date and order.created_date:
                    delay = (order.payment_date - order.created_date).days
                    payment_delays.append(delay)

            if payment_delays:
                avg_payment_delay = sum(payment_delays) / len(payment_delays)
                payment_info = QLabel(f"‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã: {avg_payment_delay:.1f} –¥–Ω–µ–π")
                predictions_layout.addWidget(payment_info)

        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ —É—Å–ª—É–≥–∞–º
        service_counts = {}
        for order in orders:
            service_counts[order.service] = service_counts.get(order.service, 0) + 1

        if service_counts:
            favorite_service = max(service_counts.items(), key=lambda x: x[1])[0]
            service_info = QLabel(f"üëë –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–∞—è —É—Å–ª—É–≥–∞: {favorite_service}")
            predictions_layout.addWidget(service_info)

        layout.addWidget(predictions_frame)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ —Ä–æ—Å—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
        if len(orders) >= 2:
            costs = [order.cost for order in orders]
            avg_growth = (costs[-1] - costs[0]) / len(costs)

            growth_frame = QFrame()
            growth_frame.setStyleSheet("""
                        QFrame {
                            background: white;
                            border: 1px solid #ddd;
                            border-radius: 4px;
                            padding: 10px;
                            margin-top: 20px;
                        }
                    """)
            growth_layout = QVBoxLayout(growth_frame)

            growth_title = QLabel("üìà –ü—Ä–æ–≥–Ω–æ–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤")
            growth_title.setFont(QFont("Arial", 12, QFont.Bold))
            growth_layout.addWidget(growth_title)

            if avg_growth > 0:
                trend = "—Ä–æ—Å—Ç"
                emoji = "üìà"
            else:
                trend = "—Å–Ω–∏–∂–µ–Ω–∏–µ"
                emoji = "üìâ"

            growth_info = QLabel(
                f"{emoji} –ù–∞–±–ª—é–¥–∞–µ—Ç—Å—è {trend} —Å—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞ –Ω–∞ "
                f"{abs(avg_growth):,.2f}‚ÇΩ –∑–∞ –∑–∞–∫–∞–∑"
            )
            growth_layout.addWidget(growth_info)

            # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑
            next_cost = costs[-1] + avg_growth
            next_order_cost = QLabel(
                f"üí∞ –û–∂–∏–¥–∞–µ–º–∞—è —Å—É–º–º–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞: {next_cost:,.2f}‚ÇΩ"
            )
            growth_layout.addWidget(next_order_cost)

            layout.addWidget(growth_frame)

        return tab

    def export_to_pdf(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ PDF"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            file_name = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞_{self.client_fio}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
            file_path, _ = QFileDialog.getSaveFileName(
                self,
                "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
                file_name,
                "PDF files (*.pdf)"
            )

            if file_path:
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —à—Ä–∏—Ñ—Ç –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
                try:
                    pdfmetrics.registerFont(TTFont('Arial', 'C:\\Windows\\Fonts\\arial.ttf'))
                except:
                    try:
                        pdfmetrics.registerFont(TTFont('Arial', '/usr/share/fonts/TTF/DejaVuSans.ttf'))
                    except:
                        QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ü—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —à—Ä–∏—Ñ—Ç–∞")
                        return

                # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
                doc = SimpleDocTemplate(
                    file_path,
                    pagesize=A4,
                    rightMargin=30,
                    leftMargin=30,
                    topMargin=30,
                    bottomMargin=30
                )

                elements = []
                styles = getSampleStyleSheet()

                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏
                title_style = ParagraphStyle(
                    'CustomTitle',
                    parent=styles['Heading1'],
                    fontSize=16,
                    spaceAfter=30,
                    alignment=1,
                    fontName='Arial'
                )

                normal_style = ParagraphStyle(
                    'CustomNormal',
                    parent=styles['Normal'],
                    fontSize=12,
                    fontName='Arial'
                )

                subtitle_style = ParagraphStyle(
                    'CustomSubtitle',
                    parent=styles['Heading2'],
                    fontSize=14,
                    fontName='Arial'
                )

                # –û–±—â–∏–π —Å—Ç–∏–ª—å –¥–ª—è –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
                table_style = TableStyle([
                    ('FONTNAME', (0, 0), (-1, -1), 'Arial'),
                    ('FONTSIZE', (0, 0), (-1, -1), 12),
                    ('GRID', (0, 0), (-1, -1), 1, colors.black),
                    ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                    ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                    ('PADDING', (0, 0), (-1, -1), 6),
                ])

                # 1. –¢–∏—Ç—É–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                elements.append(Paragraph(f"–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç", title_style))
                elements.append(Paragraph(f"–ö–ª–∏–µ–Ω—Ç: {self.client_fio}", subtitle_style))
                elements.append(
                    Paragraph(f"–î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}", normal_style))
                elements.append(PageBreak())

                # 2. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                elements.append(Paragraph("–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", title_style))
                elements.append(Spacer(1, 10))

                stats = self.session.query(
                    func.count(Order.id).label('total_orders'),
                    func.sum(Order.cost).label('total_cost'),
                    func.avg(Order.cost).label('avg_cost'),
                    func.sum(Order.remaining_amount).label('total_debt')
                ).filter(Order.fio == self.client_fio).first()

                stats_data = [
                    ['–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å', '–ó–Ω–∞—á–µ–Ω–∏–µ'],
                    ['–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤', str(stats.total_orders)],
                    ['–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤', f"{stats.total_cost:,.2f}‚ÇΩ"],
                    ['–°—Ä–µ–¥–Ω–∏–π —á–µ–∫', f"{stats.avg_cost:,.2f}‚ÇΩ"],
                    ['–¢–µ–∫—É—â–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å', f"{stats.total_debt:,.2f}‚ÇΩ"]
                ]

                stats_table = Table(stats_data, colWidths=[200, 300])
                stats_table.setStyle(table_style)
                elements.append(stats_table)
                elements.append(PageBreak())

                # 3. –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤
                elements.append(Paragraph("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤", title_style))
                elements.append(Spacer(1, 10))

                orders = self.session.query(Order).filter(
                    Order.fio == self.client_fio
                ).order_by(Order.created_date.desc()).all()

                if orders:
                    orders_data = [['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', '–£—Å–ª—É–≥–∞', '–°—Ç–æ–∏–º–æ—Å—Ç—å', '–°–∫–∏–¥–∫–∞', '–°—Ç–∞—Ç—É—Å']]
                    for order in orders:
                        orders_data.append([
                            order.created_date.strftime('%d.%m.%Y'),
                            order.service,
                            f"{order.cost:,.2f}‚ÇΩ",
                            order.discount or "-",
                            order.status
                        ])

                    orders_table = Table(orders_data, colWidths=[80, 200, 80, 70, 100])
                    orders_table.setStyle(table_style)
                    elements.append(orders_table)
                elements.append(PageBreak())

                # 4. –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç
                elements.append(Paragraph("–ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç", title_style))
                elements.append(Spacer(1, 10))

                payments = self.session.query(Order).filter(
                    Order.fio == self.client_fio,
                    Order.paid_amount > 0
                ).order_by(Order.payment_date.desc()).all()

                if payments:
                    payments_data = [['–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã', '–£—Å–ª—É–≥–∞', '–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã', '–û—Å—Ç–∞—Ç–æ–∫', '–°—Ç–∞—Ç—É—Å']]
                    for payment in payments:
                        payments_data.append([
                            payment.payment_date.strftime('%d.%m.%Y') if payment.payment_date else "-",
                            payment.service,
                            f"{payment.paid_amount:,.2f}‚ÇΩ",
                            f"{payment.remaining_amount:,.2f}‚ÇΩ",
                            payment.status
                        ])

                    payments_table = Table(payments_data, colWidths=[80, 200, 80, 80, 90])
                    payments_table.setStyle(table_style)
                    elements.append(payments_table)
                elements.append(PageBreak())

                # 5. –†–µ–π—Ç–∏–Ω–≥ –∫–ª–∏–µ–Ω—Ç–∞
                elements.append(Paragraph("–†–µ–π—Ç–∏–Ω–≥ –∫–ª–∏–µ–Ω—Ç–∞", title_style))
                elements.append(Spacer(1, 10))

                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞
                client_stats = self.session.query(
                    func.count(Order.id).label('orders_count'),
                    func.sum(Order.cost).label('total_spent'),
                    func.avg(Order.cost).label('avg_order'),
                    func.sum(case((Order.remaining_amount > 0, 1), else_=0)).label('delayed_payments')
                ).filter(Order.fio == self.client_fio).first()

                total_clients = self.session.query(func.count(func.distinct(Order.fio))).scalar()

                position_by_orders = self.session.query(
                    func.count(func.distinct(Order.fio))
                ).filter(
                    self.session.query(func.count(Order.id))
                    .filter(Order.fio != self.client_fio)
                    .group_by(Order.fio)
                    .having(func.count(Order.id) > client_stats.orders_count)
                    .scalar_subquery()
                ).scalar() + 1

                rating_data = [
                    ['–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å', '–ó–Ω–∞—á–µ–Ω–∏–µ'],
                    ['–ü–æ–∑–∏—Ü–∏—è —Å—Ä–µ–¥–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤', f"{position_by_orders} –∏–∑ {total_clients}"],
                    ['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤', f"{client_stats.orders_count}"],
                    ['–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤', f"{client_stats.total_spent:,.2f}‚ÇΩ"],
                    ['–°—Ä–µ–¥–Ω–∏–π —á–µ–∫', f"{client_stats.avg_order:,.2f}‚ÇΩ"],
                    ['–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏', f"{client_stats.delayed_payments}"]
                ]

                rating_table = Table(rating_data, colWidths=[200, 300])
                rating_table.setStyle(table_style)
                elements.append(rating_table)
                elements.append(Spacer(1, 20))

                # 6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                elements.append(Paragraph("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", subtitle_style))
                elements.append(Spacer(1, 10))

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                recs = [
                    "‚≠ê –ü—Ä–µ–º–∏—É–º –∫–ª–∏–µ–Ω—Ç - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å VIP-–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ"
                    if client_stats.orders_count >= 10
                    else "‚ú® –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–≤–µ–ª–∏—á–∏—Ç—å —Å–∫–∏–¥–∫—É"
                    if client_stats.orders_count >= 5
                    else "üìà –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏",

                    "üíé –í—ã—Å–æ–∫–∏–π —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ"
                    if client_stats.avg_order > 5000 else "",

                    "‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –ø–ª–∞—Ç–µ–∂–Ω–∞—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ - –º–æ–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ—Ç—Å—Ä–æ—á–∫—É –ø–ª–∞—Ç–µ–∂–∞"
                    if client_stats.delayed_payments == 0
                    else "‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ—Å—Ä–æ—á–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞"
                ]

                for rec in recs:
                    if rec:
                        elements.append(Paragraph(rec, normal_style))
                        elements.append(Spacer(1, 5))

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
                doc.build(elements)
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")


