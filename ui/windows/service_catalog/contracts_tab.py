from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QLabel,
                             QPushButton, QTreeWidget, QTreeWidgetItem,
                             QTextEdit, QSplitter, QGroupBox, QLineEdit,
                             QComboBox, QMessageBox, QFileDialog)
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QFont
from core.database import init_database, Order
import json
from datetime import datetime
import os
from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QLabel,
                             QPushButton, QTreeWidget, QTreeWidgetItem,
                             QTextEdit, QSplitter, QGroupBox, QLineEdit,
                             QComboBox, QMessageBox, QFileDialog)
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QFont
from core.database import init_database, Order
import json
from datetime import datetime, timedelta  # Added timedelta import
import os


class ContractsTab(QWidget):
    """–í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞–º–∏"""

    def __init__(self, parent=None):
        super().__init__(parent)
        self.session = init_database()
        self.templates_data = self.load_templates_data()
        self.current_template = None
        self.initUI()

    def initUI(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout(self)

        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        splitter = QSplitter(Qt.Horizontal)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
        templates_group = QGroupBox("–®–∞–±–ª–æ–Ω—ã –¥–æ–≥–æ–≤–æ—Ä–æ–≤")
        templates_layout = QVBoxLayout(templates_group)

        # –î–µ—Ä–µ–≤–æ —à–∞–±–ª–æ–Ω–æ–≤
        self.templates_tree = QTreeWidget()
        self.templates_tree.setHeaderLabel("–î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã")
        self.templates_tree.setMinimumWidth(250)
        self.templates_tree.itemClicked.connect(self.on_template_selected)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞–º–∏
        template_buttons = QHBoxLayout()
        add_template_btn = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å")
        add_template_btn.clicked.connect(self.add_template)
        edit_template_btn = QPushButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
        edit_template_btn.clicked.connect(self.edit_template)
        delete_template_btn = QPushButton("‚ùå –£–¥–∞–ª–∏—Ç—å")
        delete_template_btn.clicked.connect(self.delete_template)

        template_buttons.addWidget(add_template_btn)
        template_buttons.addWidget(edit_template_btn)
        template_buttons.addWidget(delete_template_btn)

        templates_layout.addWidget(self.templates_tree)
        templates_layout.addLayout(template_buttons)

        splitter.addWidget(templates_group)

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å
        details_widget = QWidget()
        details_layout = QVBoxLayout(details_widget)

        # –ü–æ–ª—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
        fields_group = QGroupBox("–î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–≥–æ–≤–æ—Ä–∞")
        fields_layout = QVBoxLayout(fields_group)

        # –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞
        client_layout = QHBoxLayout()
        client_layout.addWidget(QLabel("–§–ò–û –∫–ª–∏–µ–Ω—Ç–∞:"))
        self.client_input = QLineEdit()
        self.client_input.textChanged.connect(self.update_preview)
        client_layout.addWidget(self.client_input)

        # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        select_client_btn = QPushButton("üìã –í—ã–±—Ä–∞—Ç—å")
        select_client_btn.clicked.connect(self.select_existing_client)
        client_layout.addWidget(select_client_btn)

        fields_layout.addLayout(client_layout)

        # –£—Å–ª—É–≥–∞
        service_layout = QHBoxLayout()
        service_layout.addWidget(QLabel("–£—Å–ª—É–≥–∞:"))
        self.service_combo = QComboBox()
        self.service_combo.currentTextChanged.connect(self.update_preview)
        service_layout.addWidget(self.service_combo)
        fields_layout.addLayout(service_layout)

        # –°—Ç–æ–∏–º–æ—Å—Ç—å
        cost_layout = QHBoxLayout()
        cost_layout.addWidget(QLabel("–°—Ç–æ–∏–º–æ—Å—Ç—å:"))
        self.cost_input = QLineEdit()
        self.cost_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É")
        self.cost_input.textChanged.connect(self.update_preview)
        cost_layout.addWidget(self.cost_input)
        fields_layout.addLayout(cost_layout)

        # –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        deadline_layout = QHBoxLayout()
        deadline_layout.addWidget(QLabel("–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:"))
        self.deadline_combo = QComboBox()
        self.deadline_combo.addItems(['3 –¥–Ω—è', '5 –¥–Ω–µ–π', '7 –¥–Ω–µ–π', '14 –¥–Ω–µ–π', '30 –¥–Ω–µ–π'])
        self.deadline_combo.currentTextChanged.connect(self.update_preview)
        deadline_layout.addWidget(self.deadline_combo)
        fields_layout.addLayout(deadline_layout)

        details_layout.addWidget(fields_group)

        # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–≥–æ–≤–æ—Ä–∞
        preview_group = QGroupBox("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–≥–æ–≤–æ—Ä–∞")
        preview_layout = QVBoxLayout(preview_group)

        self.preview_text = QTextEdit()
        self.preview_text.setReadOnly(True)
        preview_layout.addWidget(self.preview_text)

        details_layout.addWidget(preview_group)

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        actions_layout = QHBoxLayout()

        self.generate_btn = QPushButton("üìÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä")
        self.generate_btn.clicked.connect(self.generate_contract)

        self.send_btn = QPushButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É")
        self.send_btn.clicked.connect(self.send_to_client)

        self.save_btn = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        self.save_btn.clicked.connect(self.save_contract)

        actions_layout.addWidget(self.generate_btn)
        actions_layout.addWidget(self.send_btn)
        actions_layout.addWidget(self.save_btn)

        details_layout.addLayout(actions_layout)

        splitter.addWidget(details_widget)
        splitter.setStretchFactor(1, 2)

        layout.addWidget(splitter)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self.load_templates()
        self.load_services()

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏
        self.apply_styles()

    def apply_styles(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π"""
        self.setStyleSheet("""
            QGroupBox {
                border: 1px solid #ddd;
                border-radius: 6px;
                margin-top: 10px;
                font-weight: bold;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px;
            }
            QPushButton {
                background-color: #2196F3;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #1976D2;
            }
            QLineEdit, QComboBox {
                padding: 8px;
                border: 1px solid #ddd;
                border-radius: 4px;
            }
            QLineEdit:focus, QComboBox:focus {
                border: 2px solid #2196F3;
            }
            QTreeWidget {
                border: none;
            }
            QTreeWidget::item:selected {
                background: #e3f2fd;
                color: black;
            }
        """)

    def load_templates(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –≤ –¥–µ—Ä–µ–≤–æ"""
        self.templates_tree.clear()

        categories = {
            "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–æ–≥–æ–≤–æ—Ä—ã": [
                "–î–æ–≥–æ–≤–æ—Ä –Ω–∞ –∫—É—Ä—Å–æ–≤—É—é —Ä–∞–±–æ—Ç—É",
                "–î–æ–≥–æ–≤–æ—Ä –Ω–∞ –¥–∏–ø–ª–æ–º–Ω—É—é —Ä–∞–±–æ—Ç—É"
            ],
            "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ–≥–æ–≤–æ—Ä—ã": [
                "–î–æ–≥–æ–≤–æ—Ä —Å —Ä–∞—Å—Å—Ä–æ—á–∫–æ–π",
                "–°—Ä–æ—á–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä"
            ]
        }

        for category, templates in categories.items():
            cat_item = QTreeWidgetItem([category])
            for template in templates:
                template_item = QTreeWidgetItem([template])
                cat_item.addChild(template_item)
            self.templates_tree.addTopLevelItem(cat_item)

    def load_templates_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤"""
        try:
            with open('contract_templates.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            return self.get_default_templates()

    def get_default_templates(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            "–î–æ–≥–æ–≤–æ—Ä –Ω–∞ –∫—É—Ä—Å–æ–≤—É—é —Ä–∞–±–æ—Ç—É": {
                "template": """
–î–û–ì–û–í–û–† –ù–ê –í–´–ü–û–õ–ù–ï–ù–ò–ï –ö–£–†–°–û–í–û–ô –†–ê–ë–û–¢–´ ‚Ññ{contract_number}

–≥. –í–æ—Ä–æ–Ω–µ–∂                                                                      {date}

–û–û–û "MPSP", –∏–º–µ–Ω—É–µ–º–æ–µ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", —Å –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã,
–∏ {client_name}, –∏–º–µ–Ω—É–µ–º—ã–π(–∞—è) –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º "–ó–∞–∫–∞–∑—á–∏–∫", —Å –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã,
–∑–∞–∫–ª—é—á–∏–ª–∏ –Ω–∞—Å—Ç–æ—è—â–∏–π –¥–æ–≥–æ–≤–æ—Ä –æ –Ω–∏–∂–µ—Å–ª–µ–¥—É—é—â–µ–º:

1. –ü–†–ï–î–ú–ï–¢ –î–û–ì–û–í–û–†–ê
1.1. –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ–±—è–∑—É–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫—É—Ä—Å–æ–≤—É—é —Ä–∞–±–æ—Ç—É –ø–æ —Ç–µ–º–µ: {service}
1.2. –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã: {deadline}
1.3. –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {cost} —Ä—É–±–ª–µ–π

2. –û–ë–Ø–ó–ê–ù–ù–û–°–¢–ò –°–¢–û–†–û–ù
2.1. –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ–±—è–∑—É–µ—Ç—Å—è:
    - –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –≤ —Å—Ä–æ–∫
    - –í–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    - –û–±–µ—Å–ø–µ—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å

2.2. –ó–∞–∫–∞–∑—á–∏–∫ –æ–±—è–∑—É–µ—Ç—Å—è:
    - –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    - –û–ø–ª–∞—Ç–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ä–æ–∫

3. –ü–û–†–Ø–î–û–ö –û–ü–õ–ê–¢–´
3.1. –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ:
    - –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ 50%: {prepayment} —Ä—É–±–ª–µ–π
    - –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç: {remaining} —Ä—É–±–ª–µ–π

4. –ö–û–ù–¢–ê–ö–¢–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: –û–û–û "MPSP"
–¢–µ–ª: +7 906 632-25-71
Email: Mukam1@list.ru

–ó–∞–∫–∞–∑—á–∏–∫: {client_name}
–¢–µ–ª: {client_phone}

–ü–û–î–ü–ò–°–ò –°–¢–û–†–û–ù

–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ____________     –ó–∞–∫–∞–∑—á–∏–∫: ____________
"""
            },
            "–î–æ–≥–æ–≤–æ—Ä —Å —Ä–∞—Å—Å—Ä–æ—á–∫–æ–π": {
                "template": """
–î–û–ì–û–í–û–† –° –†–ê–°–°–†–û–ß–ö–û–ô –ü–õ–ê–¢–ï–ñ–ê ‚Ññ{contract_number}

[–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞ —Å —É—Å–ª–æ–≤–∏—è–º–∏ —Ä–∞—Å—Å—Ä–æ—á–∫–∏...]
"""
            }
        }

    def load_services(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥"""
        services = self.session.query(Order.service).distinct().all()
        self.service_combo.clear()
        self.service_combo.addItems([service[0] for service in services if service[0]])

    def select_existing_client(self):
        """–í—ã–±–æ—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            clients = self.session.query(
                Order.fio,
                Order.phone,
                Order.group
            ).distinct().all()

            from PyQt5.QtWidgets import QDialog, QVBoxLayout, QListWidget, QListWidgetItem

            dialog = QDialog(self)
            dialog.setWindowTitle("–í—ã–±–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞")
            dialog.setModal(True)

            layout = QVBoxLayout(dialog)
            client_list = QListWidget()

            for client in clients:
                item = QListWidgetItem(f"{client.fio} ({client.group})")
                item.setData(Qt.UserRole, client)
                client_list.addItem(item)

            layout.addWidget(client_list)

            client_list.itemDoubleClicked.connect(lambda item: self.fill_client_data(item.data(Qt.UserRole)))
            client_list.itemDoubleClicked.connect(dialog.accept)

            dialog.exec_()

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–ª–∏–µ–Ω—Ç–æ–≤: {str(e)}")

    def fill_client_data(self, client):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞"""
        self.client_input.setText(client.fio)
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π

    def on_template_selected(self, item, column):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞"""
        if not item.parent():  # –ï—Å–ª–∏ —ç—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            return

        template_name = item.text(0)
        if template_name in self.templates_data:
            self.current_template = template_name
            self.update_preview()

    def update_preview(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–≥–æ–≤–æ—Ä–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        if not self.current_template:
            return

        try:
            template = self.templates_data[self.current_template]["template"]

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã
            client_phone = self.session.query(Order.phone).filter(
                Order.fio == self.client_input.text()
            ).first()

            # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –¥–æ–≥–æ–≤–æ—Ä–æ–≤
            contract_data = {
                "contract_number": datetime.now().strftime("%Y%m%d%H%M"),
                "date": datetime.now().strftime("%d.%m.%Y"),
                "client_name": self.client_input.text(),
                "service": self.service_combo.currentText(),
                "deadline": self.deadline_combo.currentText(),
                "cost": self.cost_input.text() or "0",
                "client_phone": client_phone[0] if client_phone and client_phone[0] else "–ù–µ —É–∫–∞–∑–∞–Ω"
            }

            # –†–∞—Å—á–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–æ–≥–æ–≤–æ—Ä–∞
            try:
                cost_value = float(self.cost_input.text() or 0)

                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π
                contract_data.update({
                    "prepayment": cost_value / 2,
                    "remaining": cost_value / 2
                })

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–æ–≥–æ–≤–æ—Ä–æ–≤
                if "–º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫" in self.current_template.lower():
                    contract_data.update({
                        "prepayment": cost_value * 0.25,
                        "second_payment": cost_value * 0.25,
                        "third_payment": cost_value * 0.25,
                        "remaining": cost_value * 0.25
                    })
                elif "–¥–∏–ø–ª–æ–º" in self.current_template.lower():
                    contract_data.update({
                        "prepayment": cost_value * 0.3,
                        "intermediate": cost_value * 0.4,
                        "remaining": cost_value * 0.3
                    })
                elif "—Ä–∞—Å—Å—Ä–æ—á–∫" in self.current_template.lower():
                    contract_data.update({
                        "total_cost": cost_value,
                        "initial_payment": cost_value * 0.3,
                        "second_payment": cost_value * 0.25,
                        "third_payment": cost_value * 0.25,
                        "final_payment": cost_value * 0.2,
                        "initial_payment_date": (datetime.now() + timedelta(days=1)).strftime("%d.%m.%Y"),
                        "second_payment_date": (datetime.now() + timedelta(days=7)).strftime("%d.%m.%Y"),
                        "third_payment_date": (datetime.now() + timedelta(days=14)).strftime("%d.%m.%Y"),
                        "final_payment_date": (datetime.now() + timedelta(days=21)).strftime("%d.%m.%Y"),
                        "work_type": self.service_combo.currentText().split()[0]  # –ü–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —É—Å–ª—É–≥–∏
                    })

            except ValueError as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
                contract_data.update({
                    "prepayment": "0",
                    "remaining": "0",
                    "intermediate": "0"
                })

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            for key in contract_data:
                if isinstance(contract_data[key], float):
                    contract_data[key] = "{:.2f}".format(contract_data[key])

            # –ó–∞–ø–æ–ª–Ω—è–µ–º —à–∞–±–ª–æ–Ω —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            filled_template = template
            for key, value in contract_data.items():
                placeholder = "{" + key + "}"
                if placeholder in template:
                    filled_template = filled_template.replace(placeholder, str(value))

            self.preview_text.setPlainText(filled_template)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {str(e)}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
            self.preview_text.setPlainText(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
    def generate_contract(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞"""
        try:
            if not self.validate_fields():
                return

            # –°–æ–∑–¥–∞–µ–º PDF
            from reportlab.lib import colors
            from reportlab.lib.pagesizes import A4
            from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
            from reportlab.lib.units import mm
            from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
            from reportlab.pdfbase import pdfmetrics
            from reportlab.pdfbase.ttfonts import TTFont

            # –í—ã–±–æ—Ä –º–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            file_name = f"–î–æ–≥–æ–≤–æ—Ä_{self.client_input.text()}_{datetime.now().strftime('%Y%m%d_%H%M')}.pdf"
            file_path, _ = QFileDialog.getSaveFileName(
                self,
                "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä",
                file_name,
                "PDF files (*.pdf)"
            )

            if file_path:
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —à—Ä–∏—Ñ—Ç
                try:
                    pdfmetrics.registerFont(TTFont('Arial', 'C:\\Windows\\Fonts\\arial.ttf'))
                except:
                    pdfmetrics.registerFont(TTFont('Arial', '/usr/share/fonts/TTF/DejaVuSans.ttf'))

                # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
                doc = SimpleDocTemplate(
                    file_path,
                    pagesize=A4,
                    rightMargin=20 * mm,
                    leftMargin=20 * mm,
                    topMargin=20 * mm,
                    bottomMargin=20 * mm
                )

                # –°—Ç–∏–ª–∏
                styles = getSampleStyleSheet()
                normal_style = ParagraphStyle(
                    'CustomNormal',
                    parent=styles['Normal'],
                    fontSize=12,
                    fontName='Arial'
                )
                title_style = ParagraphStyle(
                    'CustomTitle',
                    parent=styles['Heading1'],
                    fontSize=14,
                    fontName='Arial',
                    alignment=1,
                    spaceAfter=10 * mm
                )

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                elements = []

                # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–æ–≥–æ–≤–æ—Ä–∞ –Ω–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
                contract_text = self.preview_text.toPlainText()
                for paragraph in contract_text.split('\n'):
                    if paragraph.strip():
                        if paragraph.startswith('–î–û–ì–û–í–û–†'):
                            elements.append(Paragraph(paragraph, title_style))
                        else:
                            elements.append(Paragraph(paragraph, normal_style))
                    else:
                        elements.append(Spacer(1, 5 * mm))

                # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
                doc.build(elements)
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–î–æ–≥–æ–≤–æ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
                return file_path

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–∞: {str(e)}")
            return None

    def validate_fields(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π"""
        if not self.current_template:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–æ–≥–æ–≤–æ—Ä–∞")
            return False

        if not self.client_input.text():
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞")
            return False

        if not self.service_combo.currentText():
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É")
            return False

        if not self.cost_input.text() or not self.cost_input.text().replace('.', '').isdigit():
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å")
            return False

        return True

    def send_to_client(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–≥–æ–≤–æ—Ä–∞ –∫–ª–∏–µ–Ω—Ç—É"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–≥–æ–≤–æ—Ä
            contract_path = self.generate_contract()
            if not contract_path:
                return

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞
            client_phone = self.session.query(Order.phone).filter(
                Order.fio == self.client_input.text()
            ).first()

            if not client_phone or not client_phone[0]:
                QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–£ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message = f"""–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {self.client_input.text()}!

–ù–∞–ø—Ä–∞–≤–ª—è–µ–º –í–∞–º –¥–æ–≥–æ–≤–æ—Ä –Ω–∞ –æ–∫–∞–∑–∞–Ω–∏–µ —É—Å–ª—É–≥:
‚Ä¢ –£—Å–ª—É–≥–∞: {self.service_combo.currentText()}
‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: {self.cost_input.text()} ‚ÇΩ
‚Ä¢ –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {self.deadline_combo.currentText()}

–î–æ–≥–æ–≤–æ—Ä –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ —Å–æ–æ–±—â–µ–Ω–∏—é.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ MPSP"""

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ WhatsApp
            phone = ''.join(filter(str.isdigit, client_phone[0]))
            if not phone.startswith('7'):
                phone = '7' + phone

            from urllib.parse import quote
            import webbrowser
            url = f"https://wa.me/{phone}?text={quote(message)}"
            webbrowser.open(url)

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–≥–æ–≤–æ—Ä–∞: {str(e)}")

    def save_contract(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞ –≤ –±–∞–∑—É"""
        try:
            if not self.validate_fields():
                return

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–≥–æ–≤–æ—Ä
            contract_path = self.generate_contract()
            if not contract_path:
                return

            # TODO: –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–≥–æ–≤–æ—Ä–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–î–æ–≥–æ–≤–æ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–∞: {str(e)}")

    def add_template(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
        from PyQt5.QtWidgets import QDialog, QVBoxLayout, QLabel, QLineEdit, QTextEdit

        dialog = QDialog(self)
        dialog.setWindowTitle("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞")
        dialog.setMinimumWidth(600)
        dialog.setMinimumHeight(400)

        layout = QVBoxLayout(dialog)

        # –ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
        layout.addWidget(QLabel("–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:"))
        name_input = QLineEdit()
        layout.addWidget(name_input)

        # –¢–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞
        layout.addWidget(QLabel("–¢–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞:"))
        template_text = QTextEdit()
        template_text.setPlaceholderText("""–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:
{contract_number} - –Ω–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞
{date} - –¥–∞—Ç–∞ –¥–æ–≥–æ–≤–æ—Ä–∞
{client_name} - –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞
{service} - —É—Å–ª—É–≥–∞
{deadline} - —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
{cost} - —Å—Ç–æ–∏–º–æ—Å—Ç—å
{prepayment} - –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞
{remaining} - –æ—Å—Ç–∞—Ç–æ–∫
{client_phone} - —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞""")
        layout.addWidget(template_text)

        # –ö–Ω–æ–ø–∫–∏
        buttons = QHBoxLayout()
        save_btn = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        cancel_btn = QPushButton("–û—Ç–º–µ–Ω–∞")
        buttons.addWidget(save_btn)
        buttons.addWidget(cancel_btn)
        layout.addLayout(buttons)

        save_btn.clicked.connect(dialog.accept)
        cancel_btn.clicked.connect(dialog.reject)

        if dialog.exec_() == QDialog.Accepted:
            template_name = name_input.text()
            if template_name and template_text.toPlainText():
                self.templates_data[template_name] = {
                    "template": template_text.toPlainText()
                }
                self.save_templates()
                self.load_templates()
            else:
                QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")

    def edit_template(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞"""
        if not self.current_template:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return

        from PyQt5.QtWidgets import QDialog, QVBoxLayout, QLabel, QLineEdit, QTextEdit

        dialog = QDialog(self)
        dialog.setWindowTitle("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞")
        dialog.setMinimumWidth(600)
        dialog.setMinimumHeight(400)

        layout = QVBoxLayout(dialog)

        # –ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
        layout.addWidget(QLabel("–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:"))
        name_input = QLineEdit(self.current_template)
        name_input.setReadOnly(True)
        layout.addWidget(name_input)

        # –¢–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞
        layout.addWidget(QLabel("–¢–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞:"))
        template_text = QTextEdit()
        template_text.setText(self.templates_data[self.current_template]["template"])
        layout.addWidget(template_text)

        # –ö–Ω–æ–ø–∫–∏
        buttons = QHBoxLayout()
        save_btn = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        cancel_btn = QPushButton("–û—Ç–º–µ–Ω–∞")
        buttons.addWidget(save_btn)
        buttons.addWidget(cancel_btn)
        layout.addLayout(buttons)

        save_btn.clicked.connect(dialog.accept)
        cancel_btn.clicked.connect(dialog.reject)

        if dialog.exec_() == QDialog.Accepted:
            self.templates_data[self.current_template]["template"] = template_text.toPlainText()
            self.save_templates()
            self.update_preview()

    def delete_template(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞"""
        if not self.current_template:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        reply = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            f"–£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω '{self.current_template}'?",
            QMessageBox.Yes | QMessageBox.No
        )

        if reply == QMessageBox.Yes:
            del self.templates_data[self.current_template]
            self.save_templates()
            self.load_templates()
            self.current_template = None
            self.preview_text.clear()

    def save_templates(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –≤ —Ñ–∞–π–ª"""
        try:
            with open('contract_templates.json', 'w', encoding='utf-8') as f:
                json.dump(self.templates_data, f, ensure_ascii=False, indent=4)
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤: {str(e)}")