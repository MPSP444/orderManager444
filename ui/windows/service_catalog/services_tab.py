from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QLabel,
                             QPushButton, QTreeWidget, QTreeWidgetItem,
                             QTextEdit, QSplitter, QGroupBox, QSpinBox,
                             QComboBox, QMessageBox, QInputDialog, QLineEdit)
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QFont
from core.database import init_database, Order
from urllib.parse import quote
import webbrowser
import json
from reportlab.lib import colors
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import mm
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from datetime import datetime
from PyQt5.QtWidgets import QFileDialog

class ServicesTab(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.session = init_database()
        self.services_data = self.load_services_data()
        self.initUI()

    def initUI(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout(self)

        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        splitter = QSplitter(Qt.Horizontal)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –¥–µ—Ä–µ–≤–æ —É—Å–ª—É–≥
        services_group = QGroupBox("–ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥")
        services_layout = QVBoxLayout(services_group)

        self.services_tree = QTreeWidget()
        self.services_tree.setHeaderLabel("–£—Å–ª—É–≥–∏")
        self.services_tree.setMinimumWidth(250)
        self.services_tree.itemClicked.connect(self.on_service_selected)

        self.populate_services_tree()
        services_layout.addWidget(self.services_tree)

        splitter.addWidget(services_group)

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å
        details_widget = QWidget()
        details_layout = QVBoxLayout(details_widget)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–µ
        info_group = QGroupBox("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–µ")
        info_layout = QVBoxLayout(info_group)

        self.service_title = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É")
        self.service_title.setFont(QFont("Arial", 14, QFont.Bold))
        info_layout.addWidget(self.service_title)

        self.service_info = QTextEdit()
        self.service_info.setReadOnly(True)
        info_layout.addWidget(self.service_info)

        details_layout.addWidget(info_group)

        # –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        calc_group = QGroupBox("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏")
        calc_layout = QVBoxLayout(calc_group)

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü/—á–∞—Å–æ–≤
        quantity_layout = QHBoxLayout()
        quantity_layout.addWidget(QLabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:"))
        self.quantity_spin = QSpinBox()
        self.quantity_spin.setMinimum(1)
        self.quantity_spin.setMaximum(1000)
        self.quantity_spin.valueChanged.connect(self.calculate_cost)
        quantity_layout.addWidget(self.quantity_spin)
        calc_layout.addLayout(quantity_layout)

        # –°—Ä–æ—á–Ω–æ—Å—Ç—å
        urgency_layout = QHBoxLayout()
        urgency_layout.addWidget(QLabel("–°—Ä–æ—á–Ω–æ—Å—Ç—å:"))
        self.urgency_combo = QComboBox()
        self.urgency_combo.addItems(["–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è", "–°—Ä–æ—á–Ω–æ (+30%)", "–û—á–µ–Ω—å —Å—Ä–æ—á–Ω–æ (+50%)"])
        self.urgency_combo.currentTextChanged.connect(self.calculate_cost)
        urgency_layout.addWidget(self.urgency_combo)
        calc_layout.addLayout(urgency_layout)

        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
        self.total_cost_label = QLabel("–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: 0 ‚ÇΩ")
        self.total_cost_label.setFont(QFont("Arial", 12, QFont.Bold))
        calc_layout.addWidget(self.total_cost_label)

        details_layout.addWidget(calc_group)

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        actions_layout = QHBoxLayout()

        self.share_btn = QPushButton("üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è")
        self.share_btn.clicked.connect(self.share_service)

        self.whatsapp_btn = QPushButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ WhatsApp")
        self.whatsapp_btn.clicked.connect(self.send_to_whatsapp)

        self.create_order_btn = QPushButton("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑")
        self.create_order_btn.clicked.connect(self.create_order)

        actions_layout.addWidget(self.share_btn)
        actions_layout.addWidget(self.whatsapp_btn)
        actions_layout.addWidget(self.create_order_btn)

        details_layout.addLayout(actions_layout)

        splitter.addWidget(details_widget)
        splitter.setStretchFactor(1, 2)

        layout.addWidget(splitter)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏
        self.setStyleSheet("""
            QGroupBox {
                border: 1px solid #ddd;
                border-radius: 6px;
                margin-top: 10px;
                font-weight: bold;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px;
            }
            QPushButton {
                background-color: #2196F3;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #1976D2;
            }
            QTreeWidget {
                border: none;
            }
            QTreeWidget::item:selected {
                background: #e3f2fd;
                color: black;
            }
            QSpinBox, QComboBox {
                padding: 5px;
                border: 1px solid #ddd;
                border-radius: 4px;
            }
        """)

    def load_services_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–± —É—Å–ª—É–≥–∞—Ö"""
        try:
            with open('services_data.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            return {
                "–ö—É—Ä—Å–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã": {
                    "description": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫—É—Ä—Å–æ–≤—ã—Ö —Ä–∞–±–æ—Ç",
                    "subcategories": {
                        "–≠–∫–æ–Ω–æ–º–∏–∫–∞": {
                            "base_price": 2000,
                            "price_per_page": 150,
                            "min_pages": 20,
                            "max_pages": 60,
                            "uniqueness": "70-85%",
                            "requirements": [
                                "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ –ì–û–°–¢",
                                "–ê–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç",
                                "–ù–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—å"
                            ],
                            "deadlines": {
                                "min": "3 –¥–Ω—è",
                                "standard": "7 –¥–Ω–µ–π",
                                "max": "14 –¥–Ω–µ–π"
                            }
                        },
                        "–ü—Ä–∞–≤–æ": {
                            "base_price": 2200,
                            "price_per_page": 170,
                            "min_pages": 25,
                            "max_pages": 70,
                            "uniqueness": "75-90%",
                            "requirements": [
                                "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ –ì–û–°–¢",
                                "–ê–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç",
                                "–ù–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—å",
                                "–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ"
                            ]
                        }
                    }
                },
                "–î–∏–ø–ª–æ–º–Ω—ã–µ —Ä–∞–±–æ—Ç—ã": {
                    "description": "–ù–∞–ø–∏—Å–∞–Ω–∏–µ –¥–∏–ø–ª–æ–º–Ω—ã—Ö —Ä–∞–±–æ—Ç –ø–æ–¥ –∫–ª—é—á",
                    "subcategories": {
                        "–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç": {
                            "base_price": 8000,
                            "price_per_page": 200,
                            "min_pages": 50,
                            "max_pages": 100,
                            "uniqueness": "75-90%"
                        }
                    }
                }
            }

    def populate_services_tree(self):
        """–ù–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ —É—Å–ª—É–≥"""
        self.services_tree.clear()

        for category, data in self.services_data.items():
            cat_item = QTreeWidgetItem([category])

            if "subcategories" in data:
                for subcat in data["subcategories"].keys():
                    subcat_item = QTreeWidgetItem([subcat])
                    cat_item.addChild(subcat_item)

            self.services_tree.addTopLevelItem(cat_item)

    def on_service_selected(self, item, column):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏"""
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —É—Å–ª—É–≥–µ
        path = []
        current = item
        while current:
            path.insert(0, current.text(0))
            current = current.parent()

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        self.service_title.setText(" ‚Üí ".join(path))

        # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è
        if item.parent():
            category = item.parent().text(0)
            subcategory = item.text(0)
            service_data = self.services_data[category]["subcategories"][subcategory]

            # –§–æ—Ä–º–∏—Ä—É–µ–º HTML —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—Å–ª—É–≥–µ
            info = f"""
            <h3>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
            <ul>
                <li>–ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {service_data['base_price']}‚ÇΩ</li>
                <li>–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: {service_data['price_per_page']}‚ÇΩ</li>
                <li>–û–±—ä–µ–º: {service_data['min_pages']}-{service_data['max_pages']} —Å—Ç—Ä–∞–Ω–∏—Ü</li>
                <li>–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å: {service_data['uniqueness']}</li>
            </ul>

            <h3>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è</h3>
            <ul>
            """
            for req in service_data.get('requirements', []):
                info += f"<li>{req}</li>"
            info += "</ul>"

            if 'deadlines' in service_data:
                info += f"""
                <h3>–°—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</h3>
                <ul>
                    <li>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π: {service_data['deadlines']['min']}</li>
                    <li>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π: {service_data['deadlines']['standard']}</li>
                    <li>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π: {service_data['deadlines']['max']}</li>
                </ul>
                """

            self.service_info.setHtml(info)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
            self.quantity_spin.setMinimum(service_data['min_pages'])
            self.quantity_spin.setMaximum(service_data['max_pages'])
            self.calculate_cost()
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            category_data = self.services_data[item.text(0)]
            self.service_info.setHtml(f"<h2>{item.text(0)}</h2><p>{category_data['description']}</p>")
            self.total_cost_label.setText("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏")

    def calculate_cost(self):
        """–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
        selected_items = self.services_tree.selectedItems()
        if not selected_items or not selected_items[0].parent():
            return

        item = selected_items[0]
        category = item.parent().text(0)
        subcategory = item.text(0)
        service_data = self.services_data[category]["subcategories"][subcategory]

        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
        base_cost = service_data['base_price']
        # –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        pages_cost = service_data['price_per_page'] * self.quantity_spin.value()

        # –ù–∞—Ü–µ–Ω–∫–∞ –∑–∞ —Å—Ä–æ—á–Ω–æ—Å—Ç—å
        urgency_multiplier = 1.0
        if "–°—Ä–æ—á–Ω–æ" in self.urgency_combo.currentText():
            urgency_multiplier = 1.3
        elif "–û—á–µ–Ω—å —Å—Ä–æ—á–Ω–æ" in self.urgency_combo.currentText():
            urgency_multiplier = 1.5

        total = (base_cost + pages_cost) * urgency_multiplier
        self.total_cost_label.setText(f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total:,.2f} ‚ÇΩ")

    def share_service(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        if not hasattr(self, 'service_title') or not self.service_title.text():
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        text = f"""
üìã {self.service_title.text()}

üìù –û–ü–ò–°–ê–ù–ò–ï –£–°–õ–£–ì–ò:
{self.service_info.toPlainText().strip()}

üí∞ –°–¢–û–ò–ú–û–°–¢–¨:
{self.total_cost_label.text()}

üìÖ –°–†–û–ö–ò –í–´–ü–û–õ–ù–ï–ù–ò–Ø:
‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π: 7 –¥–Ω–µ–π
‚Ä¢ –°—Ä–æ—á–Ω—ã–π: 3-5 –¥–Ω–µ–π
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π: 14 –¥–Ω–µ–π

üìû –ö–û–ù–¢–ê–ö–¢–´:
‚Ä¢ –¢–µ–ª/WhatsApp: +7 906 632-25-71
‚Ä¢ Email: Mukam1@list.ru

‚úÖ –ì–æ—Ç–æ–≤—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã!"""

        # –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
        from PyQt5.QtWidgets import QApplication
        QApplication.clipboard().setText(text)
        QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")

    def send_to_whatsapp(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ WhatsApp"""
        if not hasattr(self, 'service_title') or not self.service_title.text():
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É")
            return

        phone_input, ok = QInputDialog.getText(
            self,
            '–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ WhatsApp',
            '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:',
            QLineEdit.Normal,
            '+7'
        )

        if ok and phone_input:
            # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä –æ—Ç –≤—Å–µ–≥–æ, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
            phone = ''.join(filter(str.isdigit, phone_input))
            if not phone.startswith('7'):
                phone = '7' + phone

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = f"""–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã

üìã {self.service_title.text()}

üìù –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:
{self.service_info.toPlainText().strip()}

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:
{self.total_cost_label.text()}

‚úÖ –ì–æ—Ç–æ–≤—ã –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞!

üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:
‚Ä¢ –¢–µ–ª/WhatsApp: +7 906 632-25-71
‚Ä¢ Email: Mukam1@list.ru"""

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ WhatsApp
            import webbrowser
            from urllib.parse import quote
            url = f"https://wa.me/{phone}?text={quote(message)}"
            webbrowser.open(url)

    def create_order(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
        if not hasattr(self, 'service_title') or not self.service_title.text():
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É")
            return

        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
            from ui.windows.new_order_window import NewOrderWindow
            dialog = NewOrderWindow(self)

            # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è
            dialog.services_combo.setCurrentText(self.service_title.text())

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
            if hasattr(self, 'quantity_spin'):
                dialog.quantity_spin.setValue(self.quantity_spin.value())

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
            try:
                cost_text = self.total_cost_label.text()
                cost = float(''.join(filter(str.isdigit, cost_text)))
                dialog.cost_spin.setValue(cost)
            except:
                pass

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
            if hasattr(self, 'urgency_combo'):
                urgency = self.urgency_combo.currentText()
                if "–°—Ä–æ—á–Ω–æ" in urgency:
                    dialog.deadline_combo.setCurrentText("3 –¥–Ω—è")
                elif "–û—á–µ–Ω—å —Å—Ä–æ—á–Ω–æ" in urgency:
                    dialog.deadline_combo.setCurrentText("5 –¥–Ω–µ–π")
                else:
                    dialog.deadline_combo.setCurrentText("7 –¥–Ω–µ–π")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
            dialog.exec_()

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {str(e)}")

    def update_service_data(self, service_path, field, value):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–± —É—Å–ª—É–≥–µ"""
        try:
            current_dict = self.services_data
            for key in service_path[:-1]:
                current_dict = current_dict[key]
            current_dict[service_path[-1]][field] = value

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
            with open('services_data.json', 'w', encoding='utf-8') as f:
                json.dump(self.services_data, f, ensure_ascii=False, indent=4)

            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False