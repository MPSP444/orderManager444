from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QLabel,
                             QPushButton, QLineEdit, QGroupBox, QTextEdit,
                             QScrollArea, QFrame,QFileDialog, QSplitter,QMessageBox)
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QFont, QColor
from core.database import init_database, Order
from sqlalchemy import func
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import mm
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from datetime import datetime
from PyQt5.QtWidgets import QFileDialog

class ClientAnalyticsTab(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.session = init_database()
        self.initUI()

    def initUI(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout(self)

        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –ø–æ–∏—Å–∫–æ–º
        search_layout = QHBoxLayout()

        # –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText("üîç –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –§–ò–û –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É...")
        self.search_input.setMinimumWidth(300)
        self.search_input.textChanged.connect(self.search_client)
        self.search_input.setStyleSheet("""
            QLineEdit {
                padding: 8px 15px;
                border: 1px solid #ddd;
                border-radius: 20px;
                background: white;
                font-size: 14px;
            }
            QLineEdit:focus {
                border: 2px solid #2196F3;
            }
        """)
        search_layout.addWidget(self.search_input)

        layout.addLayout(search_layout)

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        content_splitter = QSplitter(Qt.Horizontal)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
        clients_group = QGroupBox("–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤")
        clients_layout = QVBoxLayout(clients_group)

        self.clients_scroll = QScrollArea()
        self.clients_scroll.setWidgetResizable(True)
        self.clients_scroll.setMinimumWidth(300)

        self.clients_widget = QWidget()
        self.clients_layout = QVBoxLayout(self.clients_widget)
        self.clients_scroll.setWidget(self.clients_widget)

        clients_layout.addWidget(self.clients_scroll)
        content_splitter.addWidget(clients_group)

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
        client_info = QWidget()
        info_layout = QVBoxLayout(client_info)

        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        main_info = QGroupBox("–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        main_info_layout = QVBoxLayout(main_info)
        self.client_name_label = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞")
        self.client_name_label.setFont(QFont("Arial", 14, QFont.Bold))
        main_info_layout.addWidget(self.client_name_label)

        self.client_details = QLabel()
        main_info_layout.addWidget(self.client_details)
        info_layout.addWidget(main_info)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_group = QGroupBox("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤")
        stats_layout = QVBoxLayout(stats_group)
        self.stats_label = QLabel()
        stats_layout.addWidget(self.stats_label)
        info_layout.addWidget(stats_group)

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations_group = QGroupBox("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        recommendations_layout = QVBoxLayout(recommendations_group)
        self.recommendations_label = QLabel()
        recommendations_layout.addWidget(self.recommendations_label)
        info_layout.addWidget(recommendations_group)

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        actions_layout = QHBoxLayout()

        new_order_btn = QPushButton("üìù –ù–æ–≤—ã–π –∑–∞–∫–∞–∑")
        new_order_btn.clicked.connect(self.create_new_order)

        send_offer_btn = QPushButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")
        send_offer_btn.clicked.connect(self.send_offer)

        print_info_btn = QPushButton("üñ®Ô∏è –ü–µ—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        print_info_btn.clicked.connect(self.print_client_info)

        actions_layout.addWidget(new_order_btn)
        actions_layout.addWidget(send_offer_btn)
        actions_layout.addWidget(print_info_btn)

        info_layout.addLayout(actions_layout)

        content_splitter.addWidget(client_info)
        content_splitter.setStretchFactor(1, 2)  # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å —à–∏—Ä–µ

        layout.addWidget(content_splitter)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
        self.load_clients()

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏
        self.setStyleSheet("""
            QGroupBox {
                border: 1px solid #ddd;
                border-radius: 6px;
                margin-top: 10px;
                font-weight: bold;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px;
            }
            QPushButton {
                background-color: #2196F3;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #1976D2;
            }
        """)

    def load_clients(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
        while self.clients_layout.count():
            child = self.clients_layout.takeAt(0)
            if child.widget():
                child.widget().deleteLater()

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            clients = self.session.query(
                Order.fio,
                func.count(Order.id).label('total_orders'),
                func.sum(Order.cost).label('total_cost')
            ).group_by(Order.fio).order_by(func.count(Order.id).desc()).all()

            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
            for client in clients:
                client_card = self.create_client_card(
                    name=client.fio,
                    orders=client.total_orders,
                    total=client.total_cost or 0
                )
                self.clients_layout.addWidget(client_card)

            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—â–∏–π—Å—è —ç–ª–µ–º–µ–Ω—Ç
            self.clients_layout.addStretch()

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–ª–∏–µ–Ω—Ç–æ–≤: {e}")

    def create_client_card(self, name, orders, total):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
        card = QFrame()
        card.setFrameShape(QFrame.StyledPanel)
        card.setStyleSheet("""
            QFrame {
                border: 1px solid #ddd;
                border-radius: 4px;
                background: white;
                padding: 10px;
                margin: 5px;
            }
            QFrame:hover {
                background: #f5f5f5;
                border: 1px solid #2196F3;
            }
        """)

        layout = QVBoxLayout(card)

        # –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞
        name_label = QLabel(name)
        name_label.setFont(QFont("Arial", 10, QFont.Bold))
        layout.addWidget(name_label)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = QLabel(f"–ó–∞–∫–∞–∑–æ–≤: {orders} | –°—É–º–º–∞: {total:,.2f}‚ÇΩ")
        stats.setStyleSheet("color: #666;")
        layout.addWidget(stats)

        # –î–µ–ª–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π
        card.mousePressEvent = lambda e: self.show_client_details(name)

        return card

    def show_client_details(self, client_name):
        """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
            client_data = self.session.query(
                Order.fio,
                func.count(Order.id).label('total_orders'),
                func.sum(Order.cost).label('total_cost'),
                func.avg(Order.cost).label('avg_cost'),
                func.sum(Order.remaining_amount).label('debt')
            ).filter(Order.fio == client_name).group_by(Order.fio).first()

            if client_data:
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                self.client_name_label.setText(client_data.fio)

                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                stats_text = f"""
                <h3>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</h3>
                ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {client_data.total_orders}<br>
                ‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {client_data.total_cost:,.2f}‚ÇΩ<br>
                ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {client_data.avg_cost:,.2f}‚ÇΩ<br>
                ‚Ä¢ –¢–µ–∫—É—â–∏–π –¥–æ–ª–≥: {client_data.debt:,.2f}‚ÇΩ
                """
                self.stats_label.setText(stats_text)

                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                recommendations = []

                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ —Å–∫–∏–¥–∫–µ
                if client_data.total_orders >= 5:
                    recommendations.append("‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å–∫–∏–¥–∫–∞: 15%")
                elif client_data.total_orders >= 3:
                    recommendations.append("‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å–∫–∏–¥–∫–∞: 10%")
                else:
                    recommendations.append("‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å–∫–∏–¥–∫–∞: 5%")

                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ
                if client_data.debt > 0:
                    recommendations.append("‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤–Ω–µ—Å—Ç–∏ –æ—Å—Ç–∞—Ç–æ–∫ –æ–ø–ª–∞—Ç—ã")
                else:
                    recommendations.append("‚Ä¢ –ü–ª–∞—Ç–µ–∂–Ω–∞—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: –æ—Ç–ª–∏—á–Ω–∞—è")

                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –∑–∞–∫–∞–∑–∞–º
                if client_data.total_orders > 0:
                    recommendations.append("‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ")

                recommendations_text = f"""
                <h3>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</h3>
                {"<br>".join(recommendations)}
                """
                self.recommendations_label.setText(recommendations_text)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}")

    def search_client(self, text):
        """–ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            # –ï—Å–ª–∏ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç–æ–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
            if not text.strip():
                self.load_clients()
                return

            search_text = text.lower().strip()

            # –†–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞
            if any(char.isdigit() for char in search_text):
                # –ï—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ –ø–æ–∏—Å–∫–∞ –µ—Å—Ç—å —Ü–∏—Ñ—Ä—ã - –∏—â–µ–º –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
                clean_search = ''.join(filter(str.isdigit, search_text))

                clients = self.session.query(
                    Order.fio,
                    Order.phone,
                    func.count(Order.id).label('total_orders'),
                    func.sum(Order.cost).label('total_cost')
                ).group_by(Order.fio, Order.phone).all()

                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
                filtered_clients = [
                    client for client in clients
                    if (client.phone and
                        clean_search in ''.join(filter(str.isdigit, client.phone)))
                ]
            else:
                # –ü–æ–∏—Å–∫ –ø–æ –§–ò–û
                search_words = search_text.split()
                clients = self.session.query(
                    Order.fio,
                    Order.phone,
                    func.count(Order.id).label('total_orders'),
                    func.sum(Order.cost).label('total_cost')
                ).group_by(Order.fio, Order.phone).all()

                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—Å–µ–º —Å–ª–æ–≤–∞–º –∏–∑ –ø–æ–∏—Å–∫–∞
                filtered_clients = [
                    client for client in clients
                    if all(word in client.fio.lower() for word in search_words)
                ]

            # –û–±–Ω–æ–≤–ª—è–µ–º UI
            while self.clients_layout.count():
                child = self.clients_layout.takeAt(0)
                if child.widget():
                    child.widget().deleteLater()

            for client in filtered_clients:
                client_card = self.create_client_card(
                    name=client.fio,
                    orders=client.total_orders,
                    total=client.total_cost or 0
                )
                self.clients_layout.addWidget(client_card)

            self.clients_layout.addStretch()

            if not filtered_clients:
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
                no_results = QLabel("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                no_results.setStyleSheet("color: #666; padding: 20px;")
                self.clients_layout.addWidget(no_results)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–ª–∏–µ–Ω—Ç–æ–≤: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–ª–∏–µ–Ω—Ç–æ–≤: {str(e)}")

    def create_new_order(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
        if not self.client_name_label.text() or self.client_name_label.text() == "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞":
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞")
            return

        try:
            from ui.windows.new_order_window import NewOrderWindow
            dialog = NewOrderWindow(self)
            # –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω—è–µ–º –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞
            dialog.fio_input.setText(self.client_name_label.text())
            dialog.exec_()

            # –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            self.show_client_details(self.client_name_label.text())
            self.load_clients()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {str(e)}")

    def send_offer(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É"""
        if not self.client_name_label.text() or self.client_name_label.text() == "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞":
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞")
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
            client = self.session.query(Order).filter(
                Order.fio == self.client_name_label.text()
            ).first()

            if not client or not client.phone:
                QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–£ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            offer_text = self.generate_offer_text(client)

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º WhatsApp
            from urllib.parse import quote
            import webbrowser

            whatsapp_url = f"https://wa.me/{client.phone.replace('+', '').replace('-', '').replace(' ', '')}?text={quote(offer_text)}"
            webbrowser.open(whatsapp_url)

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {str(e)}")

    def generate_offer_text(self, client):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–ª–∏–µ–Ω—Ç–∞
        stats = self.session.query(
            func.count(Order.id).label('total_orders'),
            func.sum(Order.cost).label('total_cost')
        ).filter(Order.fio == client.fio).first()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é —Å–∫–∏–¥–∫—É
        if stats.total_orders >= 5:
            discount = "15%"
        elif stats.total_orders >= 3:
            discount = "10%"
        else:
            discount = "5%"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        text = f"""–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {client.fio}!

–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –Ω–∞—Å! üôèüôÇ

–î–ª—è –≤–∞—Å, –∫–∞–∫ –¥–ª—è –Ω–∞—à–µ–≥–æ {'–ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ' if stats.total_orders > 1 else '–Ω–æ–≤–æ–≥–æ'} –∫–ª–∏–µ–Ω—Ç–∞:
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞: {discount}
‚Ä¢ –ì–∏–±–∫–∏–µ —É—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã
‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥

–ì–æ—Ç–æ–≤—ã –æ–±—Å—É–¥–∏—Ç—å –≤–∞—à —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑! 

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ MPSP"""

        return text

    def generate_recommendations(self, client_data):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
        recommendations = []

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ —Å–∫–∏–¥–∫–µ
        if client_data.total_orders >= 5:
            recommendations.append("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å–∫–∏–¥–∫–∞: 15%")
        elif client_data.total_orders >= 3:
            recommendations.append("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å–∫–∏–¥–∫–∞: 10%")
        else:
            recommendations.append("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å–∫–∏–¥–∫–∞: 5%")

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ
        if client_data.debt > 0:
            recommendations.append("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤–Ω–µ—Å—Ç–∏ –æ—Å—Ç–∞—Ç–æ–∫ –æ–ø–ª–∞—Ç—ã")
        else:
            recommendations.append("–ü–ª–∞—Ç–µ–∂–Ω–∞—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: –æ—Ç–ª–∏—á–Ω–∞—è")

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –∑–∞–∫–∞–∑–∞–º
        if client_data.total_orders > 0:
            recommendations.append("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ")

        return recommendations

    def print_client_info(self):
        """–ü–µ—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ"""
        if not self.client_name_label.text() or self.client_name_label.text() == "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞":
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞")
            return

        try:
            from reportlab.lib import colors
            from reportlab.lib.pagesizes import A4
            from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
            from reportlab.lib.units import mm
            from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
            from reportlab.pdfbase import pdfmetrics
            from reportlab.pdfbase.ttfonts import TTFont

            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            file_name = f"–ö–ª–∏–µ–Ω—Ç_{self.client_name_label.text()}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
            file_path, _ = QFileDialog.getSaveFileName(
                self,
                "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç",
                file_name,
                "PDF files (*.pdf)"
            )

            if file_path:
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —à—Ä–∏—Ñ—Ç DejaVu (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—É)
                try:
                    pdfmetrics.registerFont(TTFont('DejaVu', 'C:\\Windows\\Fonts\\DejaVuSans.ttf'))
                except:
                    try:
                        pdfmetrics.registerFont(TTFont('DejaVu', '/usr/share/fonts/TTF/DejaVuSans.ttf'))
                    except:
                        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ DejaVu, –ø—Ä–æ–±—É–µ–º Arial
                        try:
                            pdfmetrics.registerFont(TTFont('DejaVu', 'C:\\Windows\\Fonts\\arial.ttf'))
                        except:
                            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à—Ä–∏—Ñ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã")

                # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
                doc = SimpleDocTemplate(
                    file_path,
                    pagesize=A4,
                    rightMargin=20 * mm,
                    leftMargin=20 * mm,
                    topMargin=20 * mm,
                    bottomMargin=20 * mm,
                    encoding='utf-8'
                )

                # –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª–∏ —Å –Ω–∞—à–∏–º —à—Ä–∏—Ñ—Ç–æ–º
                styles = getSampleStyleSheet()
                title_style = ParagraphStyle(
                    'CustomTitle',
                    parent=styles['Heading1'],
                    fontSize=16,
                    fontName='DejaVu',
                    spaceAfter=30,
                    encoding='utf-8'
                )
                normal_style = ParagraphStyle(
                    'CustomNormal',
                    parent=styles['Normal'],
                    fontSize=12,
                    fontName='DejaVu',
                    encoding='utf-8'
                )

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
                client_data = self.session.query(
                    Order.fio,
                    func.count(Order.id).label('total_orders'),
                    func.sum(Order.cost).label('total_cost'),
                    func.avg(Order.cost).label('avg_cost'),
                    func.sum(Order.remaining_amount).label('debt')
                ).filter(Order.fio == self.client_name_label.text()).group_by(Order.fio).first()

                elements = []

                # –ó–∞–≥–æ–ª–æ–≤–æ–∫
                elements.append(Paragraph(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ: {client_data.fio}", title_style))
                elements.append(Spacer(1, 20))

                # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                elements.append(Paragraph("–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê", title_style))
                elements.append(Paragraph(f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {client_data.total_orders}", normal_style))
                elements.append(Paragraph(f"‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤: {client_data.total_cost:,.2f}‚ÇΩ", normal_style))
                elements.append(Paragraph(f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {client_data.avg_cost:,.2f}‚ÇΩ", normal_style))
                elements.append(Paragraph(f"‚Ä¢ –¢–µ–∫—É—â–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å: {client_data.debt:,.2f}‚ÇΩ", normal_style))
                elements.append(Spacer(1, 20))

                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                elements.append(Paragraph("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò", title_style))
                recommendations = self.generate_recommendations(client_data)
                for rec in recommendations:
                    elements.append(Paragraph(f"‚Ä¢ {rec}", normal_style))

                # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
                doc.build(elements)
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")
