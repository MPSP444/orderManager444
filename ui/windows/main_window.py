import base64

from google.auth.transport import requests

from core.database import init_database
from PyQt5.QtCore import QTimer
from PyQt5.QtWidgets import QInputDialog, QAction, QDialogButtonBox, QFormLayout
import os
from datetime import datetime
from PyQt5.QtWidgets import (QFileDialog)
import json
from ui.components.kanban_board import KanbanBoard
from .discount_manager import DiscountManager
from ..buttons import *
from .new_order_window import NewOrderWindow
from core.database import Order
from core.database_manager import DatabaseManager
from .state_manager import StateManager
from .payment_window import PaymentWindow
from ui.message_utils import show_error
from PyQt5.QtWidgets import (QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
                             QTabWidget, QTableWidget, QToolBar,
                             QDialog, QTableWidgetItem, QMessageBox, QMenu)
from PyQt5.QtCore import Qt
from ui.styles import MAIN_THEME
from PyQt5.QtWidgets import QLineEdit, QLabel
from sqlalchemy import or_, cast, String
from ui.windows.path_settings import PathSettingsDialog
from PyQt5.QtCore import QSettings
from reviews_manager import init_reviews_module


import logging

logger = logging.getLogger(__name__)

class MainWindow(QMainWindow):
    def __init__(self, parent=None):
        super().__init__(parent)
        print("MainWindow.__init__ - –Ω–∞—á–∞–ª–æ")
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
            self.db_manager = DatabaseManager()
            print("Database manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–∑—ã–≤–æ–≤ –∫–∞–∫ None, –æ–Ω –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            self.review_manager = None

            self.state_manager = StateManager()
            print("State manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            self.state_manager.add_observer(self)
            print("Observer –¥–æ–±–∞–≤–ª–µ–Ω")

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
            self.setupShortcuts()
            print("–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
            self.initUI()
            print("UI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞–º–∏ –ü–û–°–õ–ï –æ—Å–Ω–æ–≤–Ω–æ–≥–æ UI
            # –≠—Ç–∞ —á–∞—Å—Ç—å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
            # –∏ self.tabs —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if hasattr(self, 'tabs'):
                try:
                    from reviews_manager import init_reviews_module
                    print("–ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –º–æ–¥—É–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞–º–∏")
                    init_reviews_module(self)
                    print("–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞–º–∏ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞–º–∏: {e}")
                    import traceback
                    traceback.print_exc()
            else:
                print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –∞—Ç—Ä–∏–±—É—Ç 'tabs' –Ω–µ –Ω–∞–π–¥–µ–Ω, –º–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞–º–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ MainWindow.__init__: {e}")
            import traceback
            traceback.print_exc()

        print("MainWindow.__init__ - –∫–æ–Ω–µ—Ü")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        QTimer.singleShot(1000, lambda: self.setupUpdateTimer() if hasattr(self, 'setupUpdateTimer') else None)
    def initUI(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.setWindowTitle('–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏')
        self.setGeometry(100, 100, 1200, 800)

        # –°–æ–∑–¥–∞–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç –∏ –≥–ª–∞–≤–Ω—ã–π layout
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        main_layout = QVBoxLayout(central_widget)
        main_layout.setContentsMargins(10, 10, 10, 10)
        main_layout.setSpacing(10)

        # –°–æ–∑–¥–∞–µ–º —Ç—É–ª–±–∞—Ä
        self.createToolBar()

        # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–±—ã
        self.tabs = QTabWidget()
        self.tabs.currentChanged.connect(self.on_tab_changed)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∫–ª–∞–¥–∫—É –∑–∞–∫–∞–∑–æ–≤
        self.init_orders_tab()

        # –í–∫–ª–∞–¥–∫–∞ Kanban
        self.kanban_tab = QWidget()
        kanban_layout = QVBoxLayout(self.kanban_tab)
        kanban_layout.setContentsMargins(0, 0, 0, 0)
        kanban_layout.setSpacing(0)
        self.kanban_board = KanbanBoard(parent=self)
        kanban_layout.addWidget(self.kanban_board)

        # –í–∫–ª–∞–¥–∫–∞ "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —É—Å–ª—É–≥"
        from .service_catalog.main_catalog_window import ServiceCatalogWindow
        self.catalog_tab = ServiceCatalogWindow()

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫–∏ –≤ —Ç–∞–±-–≤–∏–¥–∂–µ—Ç
        self.tabs.addTab(self.orders_tab, "üìù –í—Å–µ –∑–∞–∫–∞–∑—ã")
        self.tabs.addTab(self.kanban_tab, "üìã Kanban")
        self.tabs.addTab(self.catalog_tab, "üìö –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —É—Å–ª—É–≥")

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫–∏ –≤ –≥–ª–∞–≤–Ω—ã–π layout
        main_layout.addWidget(self.tabs)

        # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É
        self.statusBar().showMessage('–ì–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ')

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≥–ª–∞–≤–Ω—É—é —Ç–µ–º—É
        self.setStyleSheet(MAIN_THEME)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        self.table.setContextMenuPolicy(Qt.CustomContextMenu)
        self.table.customContextMenuRequested.connect(self.show_context_menu)

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫–Ω–∞
        settings = QSettings("OrderManager", "MainWindow")
        if settings.value("geometry"):
            self.restoreGeometry(settings.value("geometry"))
        if settings.value("windowState"):
            self.restoreState(settings.value("windowState"))

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        last_tab = settings.value("lastTab", 0, type=int)
        if last_tab < self.tabs.count():
            self.tabs.setCurrentIndex(last_tab)

        self.load_data()

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.setupUpdateTimer()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
        if hasattr(self, 'search_input'):
            self.search_input.setFocus()

    def test_github_token(self, token):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞ GitHub"""
        try:
            import requests
            headers = {"Authorization": f"token {token}"}
            response = requests.get("https://api.github.com/user", headers=headers)

            if response.status_code == 200:
                user_data = response.json()
                QMessageBox.information(
                    self,
                    "–£—Å–ø–µ—Ö",
                    f"–¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω! –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {user_data.get('login')}"
                )
            else:
                QMessageBox.warning(
                    self,
                    "–û—à–∏–±–∫–∞",
                    f"–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø—Ä–∞–≤. –ö–æ–¥: {response.status_code}"
                )
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞: {str(e)}")



    def init_orders_tab(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∫–ª–∞–¥–∫–∏ —Å–æ –≤—Å–µ–º–∏ –∑–∞–∫–∞–∑–∞–º–∏"""
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫—É
        self.orders_tab = QWidget()

        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π layout –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
        orders_layout = QVBoxLayout()

        # –°–æ–∑–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–∏—Å–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
        search_layout = QHBoxLayout()
        search_label = QLabel("üîç –ü–æ–∏—Å–∫:")
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –∏–ª–∏ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞")
        self.search_input.textChanged.connect(self.search_orders)
        self.search_input.setMinimumWidth(200)
        self.search_input.setStyleSheet("""
            QLineEdit {
                padding: 5px 10px;
                border: 1px solid #ddd;
                border-radius: 15px;
                background: white;
            }
            QLineEdit:focus {
                border: 2px solid #2196F3;
            }
        """)
        search_layout.addWidget(search_label)
        search_layout.addWidget(self.search_input)
        search_layout.addStretch()

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∏—Å–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π layout
        orders_layout.addLayout(search_layout)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filters_layout = self.setup_filters()
        orders_layout.addLayout(filters_layout)

        # –°–æ–∑–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        self.table = QTableWidget()
        self.table.setObjectName("mainTable")
        self.init_table()
        orders_layout.addWidget(self.table)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º layout –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
        self.orders_tab.setLayout(orders_layout)

    def setup_filters(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
        filters_layout = QHBoxLayout()

        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        self.all_clients_btn = AllClientsButton()
        self.all_clients_btn.clicked.connect(lambda: self.apply_filter('all'))

        self.new_orders_filter_btn = NewOrdersButton()
        self.new_orders_filter_btn.clicked.connect(lambda: self.apply_filter('new'))

        self.in_progress_btn = InProgressButton()
        self.in_progress_btn.clicked.connect(lambda: self.apply_filter('in_progress'))

        self.paid_orders_btn = PaidOrdersButton()
        self.paid_orders_btn.clicked.connect(lambda: self.apply_filter('paid'))

        self.debtors_btn = DebtorsButton()
        self.debtors_btn.clicked.connect(lambda: self.apply_filter('debtors'))

        self.completed_btn = CompletedOrdersButton()
        self.completed_btn.clicked.connect(lambda: self.apply_filter('completed'))

        self.waiting_payment_btn = WaitingPaymentButton()
        self.waiting_payment_btn.clicked.connect(lambda: self.apply_filter('waiting'))

        self.canceled_btn = CanceledOrdersButton()
        self.canceled_btn.clicked.connect(lambda: self.apply_filter('canceled'))

        self.unique_clients_btn = UniqueClientsButton()
        self.unique_clients_btn.clicked.connect(self.load_unique_clients)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ layout
        filters_layout.addWidget(self.unique_clients_btn)
        filters_layout.addWidget(self.all_clients_btn)
        filters_layout.addWidget(self.new_orders_filter_btn)
        filters_layout.addWidget(self.in_progress_btn)
        filters_layout.addWidget(self.paid_orders_btn)
        filters_layout.addWidget(self.debtors_btn)
        filters_layout.addWidget(self.completed_btn)
        filters_layout.addWidget(self.waiting_payment_btn)
        filters_layout.addWidget(self.canceled_btn)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö
        self.update_filter_counts()

        return filters_layout

    # –í –º–µ—Ç–æ–¥–µ setupUpdateTimer –∫–ª–∞—Å—Å–∞ MainWindow –¥–æ–±–∞–≤–∏–º:
    def setupUpdateTimer(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–Ω –ª–∏ —É–∂–µ —Ç–∞–π–º–µ—Ä
        if hasattr(self, 'discount_timer'):
            return
        self.update_timer = QTimer(self)
        self.update_timer.timeout.connect(self.refreshData)

        # –î–æ–±–∞–≤–∏–º —Ç–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫–∏–¥–æ–∫
        self.discount_timer = QTimer(self)
        self.discount_timer.timeout.connect(self.check_discounts)
        self.discount_timer.start(360000)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å

    def check_discounts(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–æ–∫"""
        try:
            print("=== –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫–∏–¥–æ–∫ ===")
            with self.db_manager.session_scope() as session:
                upcoming = DiscountManager.get_upcoming_expirations(session)
                print(f"–ü–æ–ª—É—á–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å–∫–∏–¥–∫–∞–º–∏: {len(upcoming) if upcoming else 0}")

                if upcoming:
                    message = "–°–∫–æ—Ä–æ –∏—Å—Ç–µ–∫—É—Ç —Å–∫–∏–¥–∫–∏:\n"
                    processed_orders = set()

                    for order in upcoming:
                        print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ ID: {order.id}, –§–ò–û: {order.fio}")
                        if order.id in processed_orders:
                            print(f"–ó–∞–∫–∞–∑ {order.id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                            continue

                        now = datetime.now()
                        time_diff = order.discount_end_date - now
                        time_str = f"{time_diff.days}–¥ {time_diff.seconds // 3600}—á {(time_diff.seconds % 3600) // 60}–º"

                        message += f"‚Ä¢ –ó–∞–∫–∞–∑ #{order.id} - {order.fio}\n"
                        message += f"  –°–∫–∏–¥–∫–∞ {order.discount} –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {time_str}\n"
                        processed_orders.add(order.id)
                        print(f"–ó–∞–∫–∞–∑ {order.id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")

                    if processed_orders:
                        print(f"–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {len(processed_orders)} –∑–∞–∫–∞–∑–æ–≤")
                        print("–°–æ–æ–±—â–µ–Ω–∏–µ:", message)
                        QMessageBox.warning(self, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∫–∏–¥–∫–∞—Ö", message)

            print("=== –ö–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫–∏–¥–æ–∫ ===")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∫–∏–¥–æ–∫: {str(e)}")
            show_error(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∫–∏–¥–æ–∫: {str(e)}")


    def refreshData(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–∞–π–º–µ—Ä—É"""
        if not hasattr(self, 'is_refreshing') or not self.is_refreshing:
            try:
                self.is_refreshing = True
                self.load_data()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ

                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–Ω–±–∞–Ω –µ—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ –µ–≥–æ –≤–∫–ª–∞–¥–∫–µ
                if hasattr(self, 'kanban_board') and self.tabs.currentWidget() == self.kanban_tab:
                    self.kanban_board.loadOrders()

            finally:
                self.is_refreshing = False

    def setupShortcuts(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à"""
        from PyQt5.QtWidgets import QShortcut
        from PyQt5.QtGui import QKeySequence

        shortcuts = [
            (QKeySequence("Ctrl+N"), self.showNewOrderDialog),
            (QKeySequence("Ctrl+K"), lambda: self.tabs.setCurrentWidget(self.kanban_tab)),
            (QKeySequence("Ctrl+T"), lambda: self.tabs.setCurrentWidget(self.orders_tab)),
            (QKeySequence("Ctrl+R"), self.refreshCurrentTab),
            (QKeySequence("Ctrl+F"), self.focusSearch),
            (QKeySequence("Ctrl+B"), self.createBackup),
            (QKeySequence("Ctrl+Return"), self.open_selected_folder),
            (QKeySequence("Ctrl+E"), self.edit_selected_order),
            (QKeySequence("Ctrl+Q"), self.cancel_selected_order),
            (QKeySequence("Ctrl+O"), self.add_payment_selected)
        ]

        for key, callback in shortcuts:
            QShortcut(key, self).activated.connect(callback)

    def refreshCurrentTab(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏"""
        current_tab = self.tabs.currentWidget()
        if current_tab == self.kanban_tab:
            self.kanban_board.loadOrders()
        elif current_tab == self.orders_tab:
            self.load_data()

    def focusSearch(self):
        """–§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞"""
        if hasattr(self, 'search_input'):
            self.search_input.setFocus()

    def createBackup(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        self.create_backup()
    def on_tab_changed(self, index):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã –≤–∫–ª–∞–¥–∫–∏"""
        try:
            current_tab = self.tabs.widget(index)

            # –ï—Å–ª–∏ —ç—Ç–æ –≤–∫–ª–∞–¥–∫–∞ —Å Kanban –¥–æ—Å–∫–æ–π
            if current_tab == self.kanban_tab:
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–∞–Ω–±–∞–Ω-–±–æ—Ä–¥–µ
                if hasattr(self, 'kanban_board'):
                    self.kanban_board.loadOrders()

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–∫–ª–∞–¥–∫–∏: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–∫–ª–∞–¥–∫–∏: {str(e)}")

    def update_data(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        print("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –≥–ª–∞–≤–Ω–æ–º –æ–∫–Ω–µ")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–Ω–±–∞–Ω –µ—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫–µ –∫–∞–Ω–±–∞–Ω–∞
        if hasattr(self, 'kanban_board') and self.tabs.currentWidget() == self.kanban_tab:
            self.kanban_board.loadOrders()

    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        try:
            # –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –∫–∞–Ω–±–∞–Ω-–±–æ—Ä–¥–∞ –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if hasattr(self, 'kanban_board'):
                self.kanban_board.cleanup()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            settings = QSettings("OrderManager", "MainWindow")
            settings.setValue("geometry", self.saveGeometry())
            settings.setValue("windowState", self.saveState())
            settings.setValue("lastTab", self.tabs.currentIndex())

            event.accept()

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞: {e}")
            event.accept()



    def showEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞ –æ–∫–Ω–∞"""
        super().showEvent(event)

        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            settings = QSettings("OrderManager", "MainWindow")

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –æ–∫–Ω–∞
            if settings.value("geometry"):
                self.restoreGeometry(settings.value("geometry"))

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∫–Ω–∞
            if settings.value("windowState"):
                self.restoreState(settings.value("windowState"))

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
            last_tab = settings.value("lastTab", 0, type=int)
            if last_tab < self.tabs.count():
                self.tabs.setCurrentIndex(last_tab)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏
            self.on_tab_changed(self.tabs.currentIndex())

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –æ–∫–Ω–∞: {e}")
    def load_data(self, filter_condition=None):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
            with open('column_settings.json', 'r', encoding='utf-8') as f:
                settings = json.load(f)

            visible_columns = [col for col, enabled in settings.items() if enabled]

            self.table.setColumnCount(len(visible_columns))
            self.table.setHorizontalHeaderLabels(visible_columns)

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ DatabaseManager
            with self.db_manager.session_scope() as session:
                query = session.query(Order)

                if filter_condition is not None:
                    query = query.filter(filter_condition)

                orders = query.all()

                self.table.setRowCount(0)
                self.table.setRowCount(len(orders))

                for row, order in enumerate(orders):
                    for col, column_name in enumerate(visible_columns):
                        attr_name = self.column_to_attr(column_name)
                        value = getattr(order, attr_name, '')

                        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
                        if value is None:
                            formatted_value = ''
                        elif isinstance(value, (int, float)):
                            formatted_value = f"{value:,.2f}" if isinstance(value, float) else str(value)
                        elif isinstance(value, datetime):
                            formatted_value = value.strftime('%d.%m.%Y')
                        else:
                            formatted_value = str(value)

                        item = QTableWidgetItem(formatted_value)
                        item.setData(Qt.UserRole, order.id)

                        if isinstance(value, (int, float)):
                            item.setTextAlignment(Qt.AlignRight | Qt.AlignVCenter)

                        self.table.setItem(row, col, item)

            self.table.resizeColumnsToContents()
            self.update_filter_counts()

        except Exception as e:
            show_error(self, '–û—à–∏–±–∫–∞', f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}')


    def edit_order(self, row):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
        try:
            order_id = self.table.item(row, 0).data(Qt.UserRole)

            with self.db_manager.session_scope() as session:
                order = session.query(Order).get(order_id)
                if order:
                    dialog = NewOrderWindow(self, order=order)
                    if dialog.exec_() == QDialog.Accepted:
                        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç —á–µ—Ä–µ–∑ StateManager
                        self.state_manager.notify_all()

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")

    def add_payment(self, row):
        """–í–Ω–µ—Å–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã"""
        try:
            order_id = self.table.item(row, 0).data(Qt.UserRole)

            with self.db_manager.session_scope() as session:
                order = session.query(Order).get(order_id)
                if order:
                    session.refresh(order)  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
                    dialog = PaymentWindow(self, order=order)
                    if dialog.exec_() == QDialog.Accepted:
                        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç —á–µ—Ä–µ–∑ StateManager
                        self.state_manager.notify_all()

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–Ω–µ—Å–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã: {str(e)}")
    def search_orders(self, text):
        """–ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤"""
        try:
            with self.db_manager.session_scope() as session:
                if not text.strip():
                    self.load_data()
                    return

                search_pattern = f"%{text.strip()}%"

                query = session.query(Order).filter(
                    or_(
                        Order.fio.ilike(search_pattern),
                        Order.group.ilike(search_pattern),
                        cast(Order.id, String).ilike(search_pattern),
                        Order.phone.ilike(search_pattern),
                        Order.teacher_name.ilike(search_pattern),
                        Order.service.ilike(search_pattern)
                    )
                )

                orders = query.all()
                self.update_table_with_orders(orders)

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")

    def update_table_with_orders(self, orders):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""
        try:
            with open('column_settings.json', 'r', encoding='utf-8') as f:
                settings = json.load(f)
            visible_columns = [col for col, enabled in settings.items() if enabled]

            self.table.setRowCount(0)
            self.table.setRowCount(len(orders))

            for row, order in enumerate(orders):
                for col, column_name in enumerate(visible_columns):
                    attr_name = self.column_to_attr(column_name)
                    value = getattr(order, attr_name, '')

                    if value is None:
                        formatted_value = ''
                    elif isinstance(value, (int, float)):
                        formatted_value = f"{value:,.2f}" if isinstance(value, float) else str(value)
                    else:
                        formatted_value = str(value)

                    item = QTableWidgetItem(formatted_value)
                    item.setData(Qt.UserRole, order.id)
                    self.table.setItem(row, col, item)

            self.update_filter_counts()

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {str(e)}")


    def fill_fields(self, order):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞"""
        self.fio_input.setText(order.fio)
        self.group_input.setText(order.group)
        self.services_combo.setCurrentText(order.service)
        self.direction_input.setText(order.direction)
        self.theme_input.setText(order.theme)
        self.quantity_spin.setValue(order.quantity or 1)
        self.login_input.setText(order.login)
        self.password_input.setText(order.password)
        self.website_input.setText(order.website)
        self.cost_spin.setValue(order.cost or 0)
        self.prepay_spin.setValue(order.paid_amount or 0)
        self.discount_combo.setCurrentText(order.discount or '0%')
        self.phone_input.setText(order.phone)
        self.teacher_input.setText(order.teacher_name)
        self.teacher_email_input.setText(order.teacher_email)
        self.comment_text.setText(order.comment)
        if order.deadline:
            index = self.deadline_combo.findText(order.deadline)
            if index >= 0:
                self.deadline_combo.setCurrentIndex(index)



    def showImportDialog(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –∏–º–ø–æ—Ä—Ç–∞ Excel"""
        print("–ú–µ—Ç–æ–¥ showImportDialog –≤—ã–∑–≤–∞–Ω!")
        from ui.windows.excel_preview import ExcelPreviewDialog  # –ò–∑–º–µ–Ω–∏–ª–∏ –∏–º–ø–æ—Ä—Ç
        dialog = ExcelPreviewDialog(self)
        dialog.exec_()

    def init_table(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã —Å –¥–∞–Ω–Ω—ã–º–∏"""
        self.table = QTableWidget()
        self.table.setSortingEnabled(True)
        self.table.setContextMenuPolicy(Qt.CustomContextMenu)  # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
        self.table.customContextMenuRequested.connect(self.show_context_menu)  # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        self.update_table_columns()
        return self.table

    def setup_shortcuts(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à"""
        from PyQt5.QtWidgets import QShortcut
        from PyQt5.QtGui import QKeySequence

        # Ctrl+N - –ù–æ–≤—ã–π –∑–∞–∫–∞–∑
        new_order_shortcut = QShortcut(QKeySequence("Ctrl+N"), self)
        new_order_shortcut.activated.connect(self.showNewOrderDialog)

        # Ctrl+Enter - –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–ø–∫–∏
        open_folder_shortcut = QShortcut(QKeySequence("Ctrl+Return"), self)
        open_folder_shortcut.activated.connect(self.open_selected_folder)

        # Ctrl+E - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        edit_shortcut = QShortcut(QKeySequence("Ctrl+E"), self)
        edit_shortcut.activated.connect(self.edit_selected_order)

        # Ctrl+Q - –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞
        cancel_shortcut = QShortcut(QKeySequence("Ctrl+Q"), self)
        cancel_shortcut.activated.connect(self.cancel_selected_order)

        # Ctrl+O - –í–Ω–µ—Å–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
        payment_shortcut = QShortcut(QKeySequence("Ctrl+O"), self)
        payment_shortcut.activated.connect(self.add_payment_selected)

    def open_selected_folder(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–ø–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
        if not self.table:
            return

        current_row = self.table.currentRow()
        if current_row >= 0:
            try:
                # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞
                order_id = self.table.item(current_row, 0).data(Qt.UserRole)
                session = init_database()
                order = session.query(Order).filter(Order.id == order_id).first()

                if order:
                    # –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–∞–º –∫–ª–∏–µ–Ω—Ç–æ–≤
                    base_path = r"D:\Users\mgurbanmuradov\Documents\–û–±—â–∞—è"
                    client_path = os.path.join(base_path, order.fio)
                    works_path = os.path.join(client_path, "–†–∞–±–æ—Ç—ã")
                    service_path = os.path.join(works_path, order.service)

                    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
                    os.makedirs(service_path, exist_ok=True)
                    os.startfile(service_path)

            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–ø–∫–∏: {str(e)}")
            finally:
                if session:
                    session.close()

    def edit_selected_order(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
        if not self.table:
            return

        current_row = self.table.currentRow()
        if current_row >= 0:
            self.edit_order(current_row)

    def cancel_selected_order(self):
        """–û—Ç–º–µ–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
        if not self.table:
            return

        current_row = self.table.currentRow()
        if current_row >= 0:
            self.cancel_order(current_row)

    def add_payment_selected(self):
        """–í–Ω–µ—Å–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
        if not self.table:
            return

        current_row = self.table.currentRow()
        if current_row >= 0:
            self.add_payment(current_row)


    def show_context_menu(self, position):
        menu = QMenu()

        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
        row = self.table.rowAt(position.y())
        if row >= 0:
            self.table.selectRow(row)

            # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é
            edit_action = menu.addAction("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
            payment_action = menu.addAction("üí∞ –í–Ω–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É")
            status_action = menu.addAction("üîÑ –°–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å")

            menu.addSeparator()
            info_menu = menu.addMenu("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            client_info_action = info_menu.addAction("üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ")
            order_info_action = info_menu.addAction("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ")
            detailed_info_action = info_menu.addAction("üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤
            menu.addSeparator()
            review_action = menu.addAction("üåü –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç–∑—ã–≤–∞")
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é
            menu.addSeparator()
            open_folder_action = menu.addAction("üìÅ –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É")

            menu.addSeparator()
            cancel_action = menu.addAction("‚õî –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑")
            delete_action = menu.addAction("‚ùå –£–¥–∞–ª–∏—Ç—å")

            action = menu.exec_(self.table.viewport().mapToGlobal(position))

            if action == edit_action:
                self.edit_order(row)
            elif action == payment_action:
                self.add_payment(row)
            elif action == status_action:
                self.change_status(row)
            elif action == client_info_action:
                self.show_client_info(row)
            elif action == cancel_action:
                self.cancel_order(row)
            elif action == delete_action:
                self.delete_order(row)
            elif action == order_info_action:
                self.show_order_info(row)
            elif action == detailed_info_action:
                self.show_detailed_info(row)
            elif action == open_folder_action:
                self.open_client_folder(row)
            elif action == review_action:
                self.generate_review_link_for_order(row)

    def generate_review_link_for_order(self, row):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ—Ç–∑—ã–≤–∞"""
        try:
            order_id = self.table.item(row, 0).data(Qt.UserRole)
            session = init_database()
            try:
                order = session.query(Order).filter(Order.id == order_id).first()
                if order:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –≤ —Å—Ç–∞—Ç—É—Å–µ "–í—ã–ø–æ–ª–Ω–µ–Ω"
                    if order.status != '–í—ã–ø–æ–ª–Ω–µ–Ω':
                        reply = QMessageBox.question(
                            self,
                            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                            f"–ó–∞–∫–∞–∑ #{order.id} –Ω–µ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π. –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∏ —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç–∑—ã–≤–∞?",
                            QMessageBox.Yes | QMessageBox.No,
                            QMessageBox.Yes
                        )

                        if reply == QMessageBox.Yes:
                            order.status = '–í—ã–ø–æ–ª–Ω–µ–Ω'
                            session.commit()
                        else:
                            return

                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–∑—ã–≤–æ–≤, –µ—Å–ª–∏ –æ–Ω –Ω–µ –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
                    if self.review_manager is None:
                        self.init_review_manager()

                    if self.review_manager is None:
                        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–∑—ã–≤–æ–≤")

                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
                    review_link = self.review_manager.generate_review_link(
                        order_id=order.id,
                        service_name=order.service,
                        client_name=order.fio
                    )

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å —Å—Å—ã–ª–∫–æ–π
            finally:
                session.close()
        except Exception as e:
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç–∑—ã–≤–∞: {str(e)}"
            )

    def open_client_folder(self, row):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–ø–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
            order_id = self.table.item(row, 0).data(Qt.UserRole)
            session = init_database()
            order = session.query(Order).filter(Order.id == order_id).first()

            if order:
                # –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–∞–º –∫–ª–∏–µ–Ω—Ç–æ–≤
                base_path = r"D:\Users\mgurbanmuradov\Documents\–û–±—â–∞—è"

                # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –∫–ª–∏–µ–Ω—Ç–∞
                client_path = os.path.join(base_path, order.fio)
                works_path = os.path.join(client_path, "–†–∞–±–æ—Ç—ã")
                service_path = os.path.join(works_path, order.service)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–æ–∫ –∏ —Å–æ–∑–¥–∞–µ–º –∏—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                os.makedirs(service_path, exist_ok=True)

                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–ø–∫—É
                os.startfile(service_path)

            session.close()

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–ø–∫–∏: {str(e)}")
    def show_detailed_info(self, row):
        """–ü–æ–∫–∞–∑ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞
            item = self.table.item(row, 0)
            if not item:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏")

            order_id = item.data(Qt.UserRole)
            if not order_id:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∑–∞–∫–∞–∑–∞")

            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ –±–∞–∑—ã
            session = init_database()
            try:
                order = session.query(Order).filter(Order.id == order_id).first()
                if order:
                    from .detailed_info_window import DetailedInfoWindow
                    dialog = DetailedInfoWindow(self, client_fio=order.fio)
                    dialog.exec_()
            finally:
                session.close()

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}")
    def show_client_info(self, row):
        """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞
            item = self.table.item(row, 0)
            if not item:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏")

            order_id = item.data(Qt.UserRole)
            if not order_id:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∑–∞–∫–∞–∑–∞")

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã
            session = init_database()
            try:
                order = session.query(Order).filter(Order.id == order_id).first()
                if order:
                    from .client_info_window import ClientInfoWindow
                    dialog = ClientInfoWindow(self, client_fio=order.fio)
                    dialog.exec_()
            finally:
                session.close()

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ: {str(e)}")
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ: {e}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

    def show_order_info(self, row):
        """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞
            item = self.table.item(row, 0)
            if not item:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏")

            order_id = item.data(Qt.UserRole)
            if not order_id:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∑–∞–∫–∞–∑–∞")

            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ –±–∞–∑—ã
            session = init_database()
            try:
                order = session.query(Order).filter(Order.id == order_id).first()
                if order:
                    from .order_info_window import OrderInfoWindow
                    dialog = OrderInfoWindow(self, order=order)
                    dialog.exec_()
            finally:
                session.close()

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ: {str(e)}")

    def change_status(self, row):
        try:
            order_id = self.table.item(row, 0).data(Qt.UserRole)
            session = init_database()
            try:
                order = session.query(Order).filter(Order.id == order_id).first()
                if order:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞
                    statuses = ['–ù–æ–≤—ã–π', '–í —Ä–∞–±–æ—Ç–µ', '–í –æ–∂–∏–¥–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã', '–í—ã–ø–æ–ª–Ω–µ–Ω', '–û—Ç–∫–∞–∑']
                    status, ok = QInputDialog.getItem(
                        self, "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞",
                        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:",
                        statuses, 0, False
                    )

                    if ok and status:
                        old_status = order.status
                        order.status = status

                        # –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—ã —Å–∫–∏–¥–∫–∏
                        if status == '–í –æ–∂–∏–¥–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã':
                            order.update_discount_dates()

                        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "–í—ã–ø–æ–ª–Ω–µ–Ω", –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç–∑—ã–≤–∞
                        if status == '–í—ã–ø–æ–ª–Ω–µ–Ω' and old_status != '–í—ã–ø–æ–ª–Ω–µ–Ω':
                            self.offer_review_link(order)

                        session.commit()
                        self.load_data()
            finally:
                session.close()
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")

    def configure_reviews_manager(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤"""
        dialog = QDialog(self)
        dialog.setWindowTitle("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤")
        dialog.setMinimumWidth(400)

        layout = QVBoxLayout(dialog)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = QSettings("OrderManager", "ReviewsManager")
        mysql_host = settings.value("mysql_host", "localhost")
        mysql_user = settings.value("mysql_user", "u3054108_Mukam1")
        mysql_password = settings.value("mysql_password", "vYL-f2w-cNk-fuJ")
        mysql_database = settings.value("mysql_database", "u3054108_reviews_db")

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ MySQL
        form_layout = QFormLayout()

        host_input = QLineEdit(mysql_host)
        form_layout.addRow("–•–æ—Å—Ç MySQL:", host_input)

        user_input = QLineEdit(mysql_user)
        form_layout.addRow("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", user_input)

        password_input = QLineEdit(mysql_password)
        password_input.setEchoMode(QLineEdit.Password)
        form_layout.addRow("–ü–∞—Ä–æ–ª—å:", password_input)

        database_input = QLineEdit(mysql_database)
        form_layout.addRow("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:", database_input)

        layout.addLayout(form_layout)

        # –ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        test_btn = QPushButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
        test_btn.clicked.connect(lambda: self.test_mysql_connection(
            host_input.text(),
            user_input.text(),
            password_input.text(),
            database_input.text()
        ))
        layout.addWidget(test_btn)

        # –ö–Ω–æ–ø–∫–∏ OK/Cancel
        button_box = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        button_box.accepted.connect(lambda: self.save_mysql_settings(
            host_input.text(),
            user_input.text(),
            password_input.text(),
            database_input.text(),
            dialog
        ))
        button_box.rejected.connect(dialog.reject)
        layout.addWidget(button_box)

        dialog.exec_()




    def get_selected_order_id(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
        selected_rows = self.table.selectedItems()
        if not selected_rows:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return None

        row = self.table.currentRow()
        # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã
        order_id = self.table.item(row, 0).data(Qt.UserRole)  # –ë—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å ID –≤ UserRole
        return order_id



    def cancel_order(self, row):
        """–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞"""
        reply = QMessageBox.question(self, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
                                     '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑?',
                                     QMessageBox.Yes | QMessageBox.No)

        if reply == QMessageBox.Yes:
            session = init_database()
            try:
                order_id = self.table.item(row, 0).data(Qt.UserRole)
                order = session.query(Order).filter(Order.id == order_id).first()
                if order:
                    order.status = '–û—Ç–∫–∞–∑'
                    session.commit()
                    self.load_data()
            finally:
                session.close()

    def delete_order(self, row):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
        reply = QMessageBox.question(self, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
                                     '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑?',
                                     QMessageBox.Yes | QMessageBox.No)

        if reply == QMessageBox.Yes:
            session = init_database()
            try:
                order_id = self.table.item(row, 0).data(Qt.UserRole)
                order = session.query(Order).filter(Order.id == order_id).first()
                if order:
                    session.delete(order)
                    session.commit()
                    self.load_data()
            finally:
                session.close()

    def update_table_columns(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–≥–ª–∞—Å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
            with open('column_settings.json', 'r', encoding='utf-8') as f:
                settings = json.load(f)

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            columns = [col for col, enabled in settings.items() if enabled]

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫
            self.table.setColumnCount(len(columns))
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            self.table.setHorizontalHeaderLabels(columns)

        except FileNotFoundError:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏
            columns = ['–§–ò–û', '–ì—Ä—É–ø–ø–∞', '–£—Å–ª—É–≥–∏', '–°–¢–û–ò–ú–û–°–¢–¨', '–°—Ç–∞—Ç—É—Å']  # –±–∞–∑–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            self.table.setColumnCount(len(columns))
            self.table.setHorizontalHeaderLabels(columns)

    def showColumnSettings(self):
        """–ü–æ–∫–∞–∑ –¥–∏–∞–ª–æ–≥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–æ–Ω–æ–∫"""
        from .column_settings import ColumnSettingsDialog
        dialog = ColumnSettingsDialog(self)
        if dialog.exec_() == QDialog.Accepted:
            self.update_table_columns()  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫



    def column_to_attr(self, column_name):
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ –≤ –∏–º—è –∞—Ç—Ä–∏–±—É—Ç–∞"""
        mapping = {
            '–§–ò–û': 'fio',
            '–ì—Ä—É–ø–ø–∞': 'group',
            '–£—Å–ª—É–≥–∏': 'service',
            '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ': 'direction',
            '–¢–µ–º–∞': 'theme',
            '–ö–æ–ª-–≤–æ': 'quantity',
            '–õ–æ–≥–∏–Ω': 'login',
            '–ü–∞—Ä–æ–ª—å': 'password',
            '–°–∞–π—Ç': 'website',
            '–°–¢–û–ò–ú–û–°–¢–¨': 'cost',
            '–û–ø–ª–∞—Ç–∏–ª': 'paid_amount',
            '–û—Å—Ç–∞–ª–æ—Å—å': 'remaining_amount',
            '–û–±—â–∞—è —Å—É–º–º–∞': 'total_amount',
            '–§–ò–û –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–Ø': 'teacher_name',
            '–ü–û–ß–¢–ê –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–Ø': 'teacher_email',
            '–¢–µ–ª–µ—Ñ–æ–Ω': 'phone',
            '–î–∞—Ç–∞': 'created_date',
            '–°—Ä–æ–∫': 'deadline',
            '–î–∞—Ç–∞ –û–ø–ª–∞—Ç—ã': 'payment_date',
            '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π': 'comment',
            '–°—Ç–∞—Ç—É—Å': 'status',
            '–°–∫–∏–¥–∫–∞': 'discount'
        }
        return mapping.get(column_name, column_name.lower())
    def update_table_columns(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–≥–ª–∞—Å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"""
        try:
            with open('column_settings.json', 'r', encoding='utf-8') as f:
                settings = json.load(f)

            columns = [col for col, enabled in settings.items() if enabled]

            self.table.setColumnCount(len(columns))
            self.table.setHorizontalHeaderLabels(columns)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
            self.load_data()

        except FileNotFoundError:
            columns = ['–§–ò–û', '–ì—Ä—É–ø–ø–∞', '–£—Å–ª—É–≥–∏', '–°–¢–û–ò–ú–û–°–¢–¨', '–°—Ç–∞—Ç—É—Å']
            self.table.setColumnCount(len(columns))
            self.table.setHorizontalHeaderLabels(columns)
            self.load_data()

    def createToolBar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        # –°–æ–∑–¥–∞–µ–º —Ç—É–ª–±–∞—Ä
        self.toolbar = QToolBar()
        self.toolbar.setObjectName("mainToolBar")  # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ
        self.toolbar.setMovable(False)
        self.addToolBar(self.toolbar)

        # –ö–Ω–æ–ø–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
        new_order_btn = QPushButton("üìù –ù–æ–≤—ã–π –∑–∞–∫–∞–∑")
        new_order_btn.clicked.connect(self.showNewOrderDialog)
        self.toolbar.addWidget(new_order_btn)
        self.toolbar.addSeparator()

        # –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_btn = QPushButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        stats_btn.clicked.connect(self.showStatistics)
        self.toolbar.addWidget(stats_btn)





        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏...
        loyalty_btn = QPushButton("üíé –°–∏—Å—Ç–µ–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏")
        loyalty_btn.clicked.connect(self.showLoyaltySystem)
        self.toolbar.addWidget(loyalty_btn)

        import_btn = QPushButton("üì• –ò–º–ø–æ—Ä—Ç Excel")
        import_btn.clicked.connect(self.showImportDialog)
        self.toolbar.addWidget(import_btn)
        self.toolbar.addSeparator()

        export_btn = QPushButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç")
        export_btn.clicked.connect(self.showExportDialog)
        self.toolbar.addWidget(export_btn)

        columns_btn = QPushButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫")
        columns_btn.clicked.connect(self.showColumnSettings)
        self.toolbar.addWidget(columns_btn)
        self.toolbar.addSeparator()

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É—Ç–µ–π
        path_manager_btn = QPushButton("üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç—è–º–∏")
        path_manager_btn.clicked.connect(self.showPathManager)
        self.toolbar.addWidget(path_manager_btn)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
        theme_menu = QMenu()
        theme_menu.addAction("üåû –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞").triggered.connect(lambda: self.changeTheme("light"))
        theme_menu.addAction("üåô –¢–µ–º–Ω–∞—è —Ç–µ–º–∞").triggered.connect(lambda: self.changeTheme("dark"))
        theme_menu.addAction("üåä –°–∏–Ω–∏–π –≥—Ä–∞–¥–∏–µ–Ω—Ç").triggered.connect(lambda: self.changeTheme("blue_gradient"))
        theme_menu.addAction("üçá –≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–π —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π").triggered.connect(lambda: self.changeTheme("elegant_purple"))
        theme_menu.addAction("üåø –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∑–µ–ª–µ–Ω—ã–π").triggered.connect(lambda: self.changeTheme("modern_green"))
        theme_menu.addAction("üçä –ú—è–≥–∫–∏–π –æ—Ä–∞–Ω–∂–µ–≤—ã–π").triggered.connect(lambda: self.changeTheme("soft_orange"))
        theme_menu.addAction("üå´Ô∏è –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å–µ—Ä—ã–π").triggered.connect(lambda: self.changeTheme("minimal_gray"))
        theme_menu.addAction("‚ú® –£–ª—É—á—à–µ–Ω–Ω—ã–π –º–∏–Ω–∏–º–∞–ª–∏–∑–º").triggered.connect(lambda: self.changeTheme("minimal_enhanced"))

        theme_btn = QPushButton("üé® –¢–µ–º–∞")
        theme_btn.setMenu(theme_menu)
        self.toolbar.addWidget(theme_btn)
        self.toolbar.addSeparator()

        refresh_btn = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
        refresh_btn.clicked.connect(self.load_data)
        self.toolbar.addWidget(refresh_btn)
        self.toolbar.addSeparator()

        help_btn = QPushButton("‚ùì –°–ø—Ä–∞–≤–∫–∞")
        help_btn.clicked.connect(self.show_help)
        help_btn.setToolTip("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –∏ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à–∞—Ö")
        self.toolbar.addWidget(help_btn)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —Ç—É–ª–±–∞—Ä–∞
        self.toolbar.setStyleSheet("""
            QToolBar {
                spacing: 5px;
                padding: 5px;
            }

            QPushButton {
                padding: 8px 16px;
                border-radius: 6px;
                font-size: 13px;
            }

            QPushButton:hover {
                background-color: rgba(52, 152, 219, 0.1);
            }

            QToolBar::separator {
                width: 2px;
                margin: 5px;
                background-color: #ecf0f1;
                border-radius: 1px;
            }
        """)

    def show_help(self):
        """–ü–æ–∫–∞–∑ –æ–∫–Ω–∞ —Å–ø—Ä–∞–≤–∫–∏"""
        from .help_window import HelpWindow
        help_dialog = HelpWindow(self)
        help_dialog.exec_()
    def showServiceCatalog(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —É—Å–ª—É–≥"""
        from ui.windows.service_catalog.main_catalog_window import ServiceCatalogWindow
        dialog = ServiceCatalogWindow(self)
        dialog.exec_()
    def showLoyaltySystem(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏"""
        from ui.windows.loyalty_system import LoyaltySystem
        dialog = LoyaltySystem(self)
        dialog.exec_()
    def showStatistics(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        from ui.windows.statistics_window import StatisticsWindow
        dialog = StatisticsWindow(self)
        dialog.exec_()


    def changeTheme(self, theme_name):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        from ui.windows.themes import (LIGHT_THEME, DARK_THEME,
                                             BLUE_GRADIENT_THEME, ELEGANT_PURPLE_THEME,
                                             MODERN_GREEN_THEME, SOFT_ORANGE_THEME,
                                             MINIMAL_GRAY_THEME, MINIMAL_ENHANCED_THEME)

        themes = {
            "light": LIGHT_THEME,
            "dark": DARK_THEME,
            "blue_gradient": BLUE_GRADIENT_THEME,
            "elegant_purple": ELEGANT_PURPLE_THEME,
            "modern_green": MODERN_GREEN_THEME,
            "soft_orange": SOFT_ORANGE_THEME,
            "minimal_gray": MINIMAL_GRAY_THEME,
            "minimal_enhanced": MINIMAL_ENHANCED_THEME
        }

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É
        selected_theme = themes.get(theme_name, LIGHT_THEME)
        self.setStyleSheet(selected_theme)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä —Ç–µ–º—ã
        settings = QSettings("OrderManager", "Settings")
        settings.setValue("theme", theme_name)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.update()


    def showPathManager(self):
        from ui.windows.path_manager import PathManagerDialog
        dialog = PathManagerDialog(self)
        dialog.exec_()
    def showPathSettings(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É—Ç–µ–π"""
        try:
            dialog = PathSettingsDialog(self)
            dialog.exec_()
        except Exception as e:
            show_error(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—É—Ç–µ–π: {str(e)}")
    def showExportDialog(self):
        """–ü–æ–∫–∞–∑ –¥–∏–∞–ª–æ–≥–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
        from PyQt5.QtWidgets import QMenu, QAction

        menu = QMenu(self)
        export_excel = QAction("üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", self)
        export_excel.triggered.connect(self.export_to_excel)

        export_backup = QAction("üíæ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é", self)
        export_backup.triggered.connect(self.create_backup)

        menu.addAction(export_excel)
        menu.addAction(export_backup)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ–¥ –∫–Ω–æ–ø–∫–æ–π
        button = self.sender()
        menu.exec_(button.mapToGlobal(button.rect().bottomLeft()))

    def export_to_excel(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel"""
        try:
            import pandas as pd
            from datetime import datetime

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º DatabaseManager –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            with self.db_manager.session_scope() as session:
                orders = session.query(Order).all()

                # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                data = []
                for order in orders:
                    data.append({
                        'ID': order.id,
                        '–§–ò–û': order.fio,
                        '–ì—Ä—É–ø–ø–∞': order.group,
                        '–£—Å–ª—É–≥–∞': order.service,
                        '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ': order.direction,
                        '–¢–µ–º–∞': order.theme,
                        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': order.quantity,
                        '–õ–æ–≥–∏–Ω': order.login,
                        '–ü–∞—Ä–æ–ª—å': order.password,
                        '–°–∞–π—Ç': order.website,
                        '–°—Ç–æ–∏–º–æ—Å—Ç—å': order.cost,
                        '–û–ø–ª–∞—á–µ–Ω–æ': order.paid_amount,
                        '–û—Å—Ç–∞—Ç–æ–∫': order.remaining_amount,
                        '–û–±—â–∞—è —Å—É–º–º–∞': order.total_amount,
                        '–°–∫–∏–¥–∫–∞': order.discount,
                        '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Å–∫–∏–¥–∫–∏': order.discount_start_date.strftime(
                            '%d.%m.%Y %H:%M:%S') if order.discount_start_date else None,
                        '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–∫–∏–¥–∫–∏': order.discount_end_date.strftime(
                            '%d.%m.%Y %H:%M:%S') if order.discount_end_date else None,
                        '–§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è': order.teacher_name,
                        'Email –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è': order.teacher_email,
                        '–¢–µ–ª–µ—Ñ–æ–Ω': order.phone,
                        '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è': order.created_date,
                        '–°—Ä–æ–∫ —Å–¥–∞—á–∏': order.deadline,
                        '–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã': order.payment_date,
                        '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π': order.comment,
                        '–°—Ç–∞—Ç—É—Å': order.status
                    })

                df = pd.DataFrame(data)

                # –ó–∞–ø—Ä–æ—Å –ø—É—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                file_name = f"–≠–∫—Å–ø–æ—Ä—Ç_–∑–∞–∫–∞–∑–æ–≤_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx"
                file_path, _ = QFileDialog.getSaveFileName(
                    self,
                    "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç–∫—Å–ø–æ—Ä—Ç",
                    file_name,
                    "Excel files (*.xlsx)"
                )

                if file_path:
                    # –°–æ–∑–¥–∞–µ–º writer —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                    writer = pd.ExcelWriter(file_path, engine='xlsxwriter')
                    df.to_excel(writer, sheet_name='–ó–∞–∫–∞–∑—ã', index=False)

                    # –ü–æ–ª—É—á–∞–µ–º workbook –∏ worksheet
                    workbook = writer.book
                    worksheet = writer.sheets['–ó–∞–∫–∞–∑—ã']

                    # –§–æ—Ä–º–∞—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
                    money_format = workbook.add_format({
                        'num_format': '#,##0.00 ‚ÇΩ',
                        'align': 'right'
                    })
                    date_format = workbook.add_format({
                        'num_format': 'dd.mm.yyyy',
                        'align': 'center'
                    })
                    datetime_format = workbook.add_format({
                        'num_format': 'dd.mm.yyyy hh:mm:ss',
                        'align': 'center'
                    })
                    text_format = workbook.add_format({
                        'text_wrap': True,
                        'align': 'left',
                        'valign': 'top'
                    })
                    header_format = workbook.add_format({
                        'bold': True,
                        'text_wrap': True,
                        'valign': 'top',
                        'fg_color': '#D7E4BC',
                        'border': 1
                    })

                    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
                    for col_num, value in enumerate(df.columns.values):
                        worksheet.write(0, col_num, value, header_format)

                    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –∫ –∫–æ–ª–æ–Ω–∫–∞–º
                    money_columns = ['K', 'L', 'M', 'N']  # –°—Ç–æ–∏–º–æ—Å—Ç—å, –û–ø–ª–∞—á–µ–Ω–æ, –û—Å—Ç–∞—Ç–æ–∫, –û–±—â–∞—è —Å—É–º–º–∞
                    date_columns = ['T', 'V']  # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è, –î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã
                    datetime_columns = ['P', 'Q']  # –î–∞—Ç—ã —Å–∫–∏–¥–æ–∫
                    text_columns = ['E', 'F', 'W']  # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –¢–µ–º–∞, –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π

                    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
                    for i, col in enumerate(df.columns):
                        col_letter = chr(65 + i) if i < 26 else chr(64 + i // 26) + chr(65 + (i % 26))

                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–∫–∏
                        max_length = max(
                            df[col].astype(str).apply(len).max(),
                            len(col)
                        ) + 2

                        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É
                        col_width = min(max_length, 50)
                        worksheet.set_column(i, i, col_width)

                        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
                        if col_letter in money_columns:
                            worksheet.set_column(i, i, col_width, money_format)
                        elif col_letter in date_columns:
                            worksheet.set_column(i, i, col_width, date_format)
                        elif col_letter in datetime_columns:
                            worksheet.set_column(i, i, col_width, datetime_format)
                        elif col_letter in text_columns:
                            worksheet.set_column(i, i, col_width, text_format)

                    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
                    worksheet.autofilter(0, 0, len(df), len(df.columns) - 1)

                    # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    worksheet.freeze_panes(1, 0)

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                    writer.close()

                    QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!")

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}")

    def create_backup(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            import shutil
            from datetime import datetime

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            file_name = f"Backup_DB_{datetime.now().strftime('%Y%m%d_%H%M')}.db"
            file_path, _ = QFileDialog.getSaveFileName(
                self,
                "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é",
                file_name,
                "Database files (*.db)"
            )

            if file_path:
                # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                shutil.copy2('orders.db', file_path)
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞!")

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {str(e)}")
    def loadTheme(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Ç–µ–º—ã"""
        settings = QSettings("OrderManager", "Settings")
        theme_name = settings.value("theme", "light")
        self.changeTheme(theme_name)

    def setup_filters(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –ø–æ–∏—Å–∫–∞"""
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filters_container = QVBoxLayout()

        # –°–æ–∑–¥–∞–µ–º layout –¥–ª—è –ø–æ–∏—Å–∫–∞
        search_layout = QHBoxLayout()
        search_label = QLabel("üîç –ü–æ–∏—Å–∫:")
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –∏–ª–∏ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞")
        self.search_input.textChanged.connect(self.search_orders)
        self.search_input.setMinimumWidth(200)
        self.search_input.setStyleSheet("""
            QLineEdit {
                padding: 5px 10px;
                border: 1px solid #ddd;
                border-radius: 15px;
                background: white;
            }
            QLineEdit:focus {
                border: 2px solid #2196F3;
            }
        """)
        search_layout.addWidget(search_label)
        search_layout.addWidget(self.search_input)
        search_layout.addStretch()  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç—è–∂–∫—É —Å–ø—Ä–∞–≤–∞

        buttons_layout = QHBoxLayout()

        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        self.all_clients_btn = AllClientsButton()
        self.all_clients_btn.clicked.connect(lambda: self.apply_filter('all'))

        self.new_orders_filter_btn = NewOrdersButton()
        self.new_orders_filter_btn.clicked.connect(lambda: self.apply_filter('new'))

        self.in_progress_btn = InProgressButton()
        self.in_progress_btn.clicked.connect(lambda: self.apply_filter('in_progress'))

        self.paid_orders_btn = PaidOrdersButton()
        self.paid_orders_btn.clicked.connect(lambda: self.apply_filter('paid'))

        self.debtors_btn = DebtorsButton()
        self.debtors_btn.clicked.connect(lambda: self.apply_filter('debtors'))

        self.completed_btn = CompletedOrdersButton()
        self.completed_btn.clicked.connect(lambda: self.apply_filter('completed'))

        self.waiting_payment_btn = WaitingPaymentButton()
        self.waiting_payment_btn.clicked.connect(lambda: self.apply_filter('waiting'))

        self.canceled_btn = CanceledOrdersButton()
        self.canceled_btn.clicked.connect(lambda: self.apply_filter('canceled'))

        self.unique_clients_btn = UniqueClientsButton()
        self.unique_clients_btn.clicked.connect(self.load_unique_clients)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        self.update_filter_counts()

        # –°–æ–∑–¥–∞–µ–º layout –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
        filters_layout = QHBoxLayout()
        filters_layout.addWidget(self.unique_clients_btn)
        filters_layout.addWidget(self.all_clients_btn)
        filters_layout.addWidget(self.new_orders_filter_btn)
        filters_layout.addWidget(self.in_progress_btn)
        filters_layout.addWidget(self.paid_orders_btn)
        filters_layout.addWidget(self.debtors_btn)
        filters_layout.addWidget(self.completed_btn)
        filters_layout.addWidget(self.waiting_payment_btn)
        filters_layout.addWidget(self.canceled_btn)

        return filters_layout



    def apply_filter(self, filter_type):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞"""
        from core.database import Order


        filters = {
            'all': None,  # –í—Å–µ –∑–∞–∫–∞–∑—ã
            'new': Order.status == '–ù–æ–≤—ã–π',
            'in_progress': Order.status == '–í —Ä–∞–±–æ—Ç–µ',
            'paid': Order.paid_amount > 0,
            'debtors': Order.remaining_amount > 0,
            'completed': Order.status == '–í—ã–ø–æ–ª–Ω–µ–Ω',
            'waiting': Order.status == '–í –æ–∂–∏–¥–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã',
            'canceled': Order.status == '–û—Ç–∫–∞–∑'
        }

        filter_condition = filters[filter_type]
        self.load_data(filter_condition)
    def showNewOrderDialog(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
        from .new_order_window import NewOrderWindow
        dialog = NewOrderWindow(self)
        if dialog.exec_() == QDialog.Accepted:
            # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            self.load_data()
    def load_unique_clients(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        print("–ó–∞–≥—Ä—É–∂–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")  # –û—Ç–ª–∞–¥–∫–∞
        from sqlalchemy import func
        from core.database import Order

        session = init_database()

        try:
            # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ö –∑–∞–∫–∞–∑–æ–≤
            clients = session.query(
                Order.fio,
                Order.phone,
                Order.group,
                func.count(Order.id).label('total_orders'),
                func.sum(Order.cost).label('total_cost'),
                func.max(Order.created_date).label('last_order_date')
            ).group_by(Order.fio, Order.phone, Order.group).all()

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            self.table.setColumnCount(6)
            self.table.setHorizontalHeaderLabels([
                '–§–ò–û', '–¢–µ–ª–µ—Ñ–æ–Ω', '–ì—Ä—É–ø–ø–∞',
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤', '–û–±—â–∞—è —Å—É–º–º–∞', '–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑'
            ])

            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            self.table.setRowCount(len(clients))
            for row, client in enumerate(clients):
                self.table.setItem(row, 0, QTableWidgetItem(str(client.fio)))
                self.table.setItem(row, 1, QTableWidgetItem(str(client.phone or '–ù–µ —É–∫–∞–∑–∞–Ω–æ')))
                self.table.setItem(row, 2, QTableWidgetItem(str(client.group or '–ù–µ —É–∫–∞–∑–∞–Ω–æ')))
                self.table.setItem(row, 3, QTableWidgetItem(str(client.total_orders)))
                self.table.setItem(row, 4, QTableWidgetItem(f"{client.total_cost or 0:,.2f}"))
                self.table.setItem(row, 5, QTableWidgetItem(
                    client.last_order_date.strftime('%Y-%m-%d') if client.last_order_date else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
                ))

            print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(clients)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")  # –û—Ç–ª–∞–¥–∫–∞

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–ª–∏–µ–Ω—Ç–æ–≤: {e}")  # –û—Ç–ª–∞–¥–∫–∞
            QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}')
        finally:
            session.close()

    def update_filter_counts(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞"""
        from core.database import init_database, Order

        session = init_database()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
            all_count = session.query(Order).count()
            new_count = session.query(Order).filter(Order.status == '–ù–æ–≤—ã–π').count()
            in_progress_count = session.query(Order).filter(Order.status == '–í —Ä–∞–±–æ—Ç–µ').count()
            paid_count = session.query(Order).filter(Order.paid_amount > 0).count()
            debtors_count = session.query(Order).filter(Order.remaining_amount > 0).count()
            completed_count = session.query(Order).filter(Order.status == '–í—ã–ø–æ–ª–Ω–µ–Ω').count()
            waiting_count = session.query(Order).filter(Order.status == '–í –æ–∂–∏–¥–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã').count()
            canceled_count = session.query(Order).filter(Order.status == '–û—Ç–∫–∞–∑').count()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫
            self.all_clients_btn.setText(f"üë• –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã ({all_count})")
            self.new_orders_filter_btn.setText(f"üÜï –ù–æ–≤—ã–µ ({new_count})")  # –ò–∑–º–µ–Ω–∏–ª–∏ –∏–º—è –∫–Ω–æ–ø–∫–∏
            self.in_progress_btn.setText(f"üîÑ –í —Ä–∞–±–æ—Ç–µ ({in_progress_count})")
            self.paid_orders_btn.setText(f"‚úÖ –û–ø–ª–∞—á–µ–Ω–Ω—ã–µ ({paid_count})")
            self.debtors_btn.setText(f"‚ö†Ô∏è –î–æ–ª–∂–Ω–∏–∫–∏ ({debtors_count})")
            self.completed_btn.setText(f"‚úîÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ ({completed_count})")
            self.waiting_payment_btn.setText(f"‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã ({waiting_count})")
            self.canceled_btn.setText(f"‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ ({canceled_count})")

        finally:
            session.close()

