# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ loyalty_system.py

from PyQt5.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout, QTabWidget,
                           QLabel, QTableWidget, QTableWidgetItem, QPushButton,
                           QTextEdit, QComboBox, QMessageBox, QGroupBox,
                           QScrollArea,QLineEdit, QWidget, QHeaderView)
from PyQt5.QtCore import Qt, QUrl
from PyQt5.QtGui import QDesktopServices, QColor, QFont
from core.database import init_database, Order
from sqlalchemy import func, desc
from datetime import datetime
from urllib.parse import quote
import webbrowser
import re
import json

class TemplateActionWidget(QWidget):
    """–í–∏–¥–∂–µ—Ç —Å –≤—ã–±–æ—Ä–æ–º —à–∞–±–ª–æ–Ω–∞ –∏ –∫–Ω–æ–ø–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    def __init__(self, templates, callback, add_template_callback, parent=None):
        super().__init__(parent)
        layout = QHBoxLayout(self)
        layout.setContentsMargins(2, 2, 2, 2)
        layout.setSpacing(4)

        # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
        self.template_combo = QComboBox()
        self.template_combo.setMinimumWidth(200)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É
        self.template_combo.addItems(templates)
        self.template_combo.setStyleSheet("""
            QComboBox {
                border: 1px solid #ddd;
                border-radius: 4px;
                padding: 4px;
                background: white;
            }
            QComboBox:hover {
                border-color: #2196F3;
            }
        """)
        layout.addWidget(self.template_combo)

        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        send_btn = QPushButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å")
        send_btn.clicked.connect(lambda: callback(self.template_combo.currentText()))
        send_btn.setStyleSheet("""
            QPushButton {
                background-color: #2196F3;
                color: white;
                border: none;
                padding: 4px 12px;
                border-radius: 4px;
                min-width: 80px;
            }
            QPushButton:hover {
                background-color: #1976D2;
            }
        """)
        layout.addWidget(send_btn)

        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
        add_btn = QPushButton("‚ûï")
        add_btn.setToolTip("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω")
        add_btn.clicked.connect(add_template_callback)
        add_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                padding: 4px 8px;
                border-radius: 4px;
                max-width: 30px;
            }
            QPushButton:hover {
                background-color: #388E3C;
            }
        """)
        layout.addWidget(add_btn)

        layout.addStretch()  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—â–∏–π—Å—è —ç–ª–µ–º–µ–Ω—Ç


class NewTemplateDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""

    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("–ù–æ–≤—ã–π —à–∞–±–ª–æ–Ω")
        self.setMinimumWidth(500)

        layout = QVBoxLayout(self)

        # –ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
        name_layout = QHBoxLayout()
        name_label = QLabel("–ù–∞–∑–≤–∞–Ω–∏–µ:")
        self.name_input = QLineEdit()
        name_layout.addWidget(name_label)
        name_layout.addWidget(self.name_input)
        layout.addLayout(name_layout)

        # –¢–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞
        layout.addWidget(QLabel("–¢–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞:"))
        self.text_edit = QTextEdit()
        self.text_edit.setMinimumHeight(200)
        layout.addWidget(self.text_edit)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        variables_info = """
        –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:
        {client} - –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞
        {order_count} - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
        {debt_message} - —Å—É–º–º–∞ –¥–æ–ª–≥–∞
        {debt_details} - –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏
        {discount} - —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏
        """
        info_label = QLabel(variables_info)
        info_label.setStyleSheet("color: #666;")
        layout.addWidget(info_label)

        # –ö–Ω–æ–ø–∫–∏
        buttons = QHBoxLayout()
        save_btn = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        save_btn.clicked.connect(self.accept)
        cancel_btn = QPushButton("–û—Ç–º–µ–Ω–∞")
        cancel_btn.clicked.connect(self.reject)
        buttons.addWidget(save_btn)
        buttons.addWidget(cancel_btn)
        layout.addLayout(buttons)

    def get_template_data(self):
        return {
            'name': self.name_input.text(),
            'text': self.text_edit.toPlainText()
        }
class LoyaltySystem(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.session = init_database()
        self.message_templates = self.load_templates()
        self.tabs = None
        from core.database_manager import DatabaseManager
        self.db_manager = DatabaseManager()
        self.initUI()

    def initUI(self):
        self.setWindowTitle("üíé –°–∏—Å—Ç–µ–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏")
        self.setGeometry(100, 100, 1200, 800)

        layout = QVBoxLayout(self)

        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.tabs = QTabWidget()

        # –í–∫–ª–∞–¥–∫–∞ "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã"
        loyal_tab = self.createLoyalClientsTab()
        self.tabs.addTab(loyal_tab, "üëë –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã")

        # –í–∫–ª–∞–¥–∫–∞ "–î–æ–ª–∂–Ω–∏–∫–∏"
        debtors_tab = self.createDebtorsTab()
        self.tabs.addTab(debtors_tab, "‚ö†Ô∏è –î–æ–ª–∂–Ω–∏–∫–∏")
        # –ù–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞ "–°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω–∏–∫–∏"
        grouped_debtors_tab = self.createGroupedDebtorsTab()
        self.tabs.addTab(grouped_debtors_tab, "üìä –°–≤–æ–¥–∫–∞ –ø–æ –¥–æ–ª–∂–Ω–∏–∫–∞–º")

        # –í–∫–ª–∞–¥–∫–∞ "–†–∞—Å—Å—ã–ª–∫–∞"
        mailing_tab = self.createMailingTab()
        self.tabs.addTab(mailing_tab, "üì® –†–∞—Å—Å—ã–ª–∫–∞")

        layout.addWidget(self.tabs)

    def add_new_template(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
        dialog = NewTemplateDialog(self)
        if dialog.exec_() == QDialog.Accepted:
            template_data = dialog.get_template_data()

            if not template_data['name'] or not template_data['text']:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")
                return

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω
            self.message_templates[template_data['name']] = template_data['text']

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–±–ª–æ–Ω—ã
            try:
                with open('message_templates.json', 'w', encoding='utf-8') as f:
                    json.dump(self.message_templates, f, ensure_ascii=False, indent=4)

                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∫–æ–º–±–æ–±–æ–∫—Å—ã –≤ —Ç–∞–±–ª–∏—Ü–µ
                self.update_template_combos()

                QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞: {str(e)}")

    def update_template_combos(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–±–æ–±–æ–∫—Å–æ–≤ —Å —à–∞–±–ª–æ–Ω–∞–º–∏"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–±–æ–±–æ–∫—Å—ã –≤–æ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–∫–∞—Ö
        for tab_idx in range(self.tabs.count()):
            tab = self.tabs.widget(tab_idx)
            if hasattr(tab, 'findChildren'):
                for combo in tab.findChildren(QComboBox):
                    current_text = combo.currentText()
                    combo.clear()
                    combo.addItems(self.message_templates.keys())
                    # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤—ã–±–æ—Ä
                    index = combo.findText(current_text)
                    if index >= 0:
                        combo.setCurrentIndex(index)

    def createGroupedDebtorsTab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ–ª–∂–Ω–∏–∫–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —É—á–µ—Ç–æ–º —Å–∫–∏–¥–æ–∫"""
        widget = QWidget()
        layout = QVBoxLayout(widget)

        # –¢–∞–±–ª–∏—Ü–∞ –¥–æ–ª–∂–Ω–∏–∫–æ–≤
        table = QTableWidget()
        table.setColumnCount(6)
        table.setHorizontalHeaderLabels([
            "–í—ã–±—Ä–∞—Ç—å", "–§–ò–û –∫–ª–∏–µ–Ω—Ç–∞", "–û–±—â–∞—è —Å—É–º–º–∞ –¥–æ–ª–≥–∞",
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤", "–¢–µ–ª–µ—Ñ–æ–Ω", "–î–µ–π—Å—Ç–≤–∏—è"
        ])

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤
        table.horizontalHeader().setSectionResizeMode(0, QHeaderView.Fixed)
        table.setColumnWidth(0, 70)
        table.horizontalHeader().setSectionResizeMode(1, QHeaderView.Stretch)
        table.setColumnWidth(2, 150)
        table.setColumnWidth(3, 150)
        table.setColumnWidth(4, 150)
        table.setColumnWidth(5, 400)

        # –°–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–∞–µ–º—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
        excluded_statuses = ['–û—Ç–º–µ–Ω–µ–Ω', '–û—Ç–∫–∞–∑']

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
        all_orders_count = (
            self.session.query(
                Order.fio,
                func.count(Order.id).label('total_orders')
            )
            .filter(~Order.status.in_(excluded_statuses))
            .group_by(Order.fio)
            .all()
        )

        orders_count_dict = {order.fio: order.total_orders for order in all_orders_count}

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –¥–æ–ª–≥–∞–º–∏
        orders_with_debt = (
            self.session.query(
                Order.id,
                Order.fio,
                Order.phone,
                Order.cost,
                Order.paid_amount,
                Order.discount,
                Order.status
            )
            .filter(
                ~Order.status.in_(excluded_statuses)
            )
            .all()
        )

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        grouped_debtors = {}
        for order in orders_with_debt:
            if order.fio not in grouped_debtors:
                grouped_debtors[order.fio] = {
                    'fio': order.fio,
                    'phone': order.phone,
                    'total_debt': 0,
                    'orders_count': orders_count_dict.get(order.fio, 0)
                }

            # –†–∞—Å—á–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏
            actual_cost = order.cost
            if order.discount and order.discount != "–ù–µ —É–∫–∞–∑–∞–Ω–æ" and order.discount != "0%":
                try:
                    discount_percent = float(order.discount.strip('%'))
                    actual_cost = order.cost * (1 - discount_percent / 100)
                except (ValueError, AttributeError):
                    pass

            # –†–∞—Å—á–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –¥–æ–ª–≥–∞
            remaining_debt = max(0, actual_cost - order.paid_amount)
            grouped_debtors[order.fio]['total_debt'] += remaining_debt

        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ–ª–∂–Ω–∏–∫–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, —É –∫–æ–≥–æ –µ—Å—Ç—å –¥–æ–ª–≥)
        grouped_debtors = {
            fio: data for fio, data in grouped_debtors.items()
            if data['total_debt'] > 0
        }

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—É–º–º–µ –¥–æ–ª–≥–∞
        grouped_debtors = sorted(
            grouped_debtors.values(),
            key=lambda x: x['total_debt'],
            reverse=True
        )

        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        table.setRowCount(len(grouped_debtors))
        for i, debtor in enumerate(grouped_debtors):
            # –ß–µ–∫–±–æ–∫—Å
            checkbox = QTableWidgetItem()
            checkbox.setFlags(Qt.ItemIsUserCheckable | Qt.ItemIsEnabled)
            checkbox.setCheckState(Qt.Unchecked)
            table.setItem(i, 0, checkbox)

            # –§–ò–û
            table.setItem(i, 1, QTableWidgetItem(debtor['fio']))

            # –û–±—â–∞—è —Å—É–º–º–∞ –¥–æ–ª–≥–∞
            debt_item = QTableWidgetItem(f"{debtor['total_debt']:,.2f} ‚ÇΩ")
            debt_item.setTextAlignment(Qt.AlignRight | Qt.AlignVCenter)
            debt_item.setForeground(QColor("#f44336"))
            table.setItem(i, 2, debt_item)

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
            orders_item = QTableWidgetItem(str(debtor['orders_count']))
            orders_item.setTextAlignment(Qt.AlignCenter)
            table.setItem(i, 3, orders_item)

            # –¢–µ–ª–µ—Ñ–æ–Ω
            phone = self.session.query(Order.phone).filter(
                Order.fio == debtor['fio'],
                Order.phone.isnot(None),
                Order.phone != ''
            ).first()

            phone_number = phone[0] if phone else "–ù–µ —É–∫–∞–∑–∞–Ω"
            phone_item = QTableWidgetItem(phone_number)
            phone_item.setTextAlignment(Qt.AlignCenter)
            table.setItem(i, 4, phone_item)

            # –î–µ–π—Å—Ç–≤–∏—è
            class DebtorInfo:
                def __init__(self, fio, total_debt, total_orders, phone):
                    self.fio = fio
                    self.total_debt = total_debt
                    self.total_orders = total_orders
                    self.phone = phone

            debtor_obj = DebtorInfo(
                fio=debtor['fio'],
                total_debt=debtor['total_debt'],
                total_orders=debtor['orders_count'],
                phone=phone_number if phone_number != "–ù–µ —É–∫–∞–∑–∞–Ω" else None
            )

            action_widget = TemplateActionWidget(
                templates=list(self.message_templates.keys()),
                callback=lambda template, d=debtor_obj: self.send_grouped_debt_message(d, template),
                add_template_callback=self.add_new_template
            )
            table.setCellWidget(i, 5, action_widget)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –º–∞—Å—Å–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        mass_actions = QHBoxLayout()

        template_combo = QComboBox()
        template_combo.addItems(self.message_templates.keys())
        template_combo.setMinimumWidth(200)
        mass_actions.addWidget(QLabel("–®–∞–±–ª–æ–Ω –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏:"))
        mass_actions.addWidget(template_combo)

        mass_send_btn = QPushButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–º")
        mass_send_btn.clicked.connect(lambda: self.send_mass_messages(table, template_combo.currentText()))
        mass_actions.addWidget(mass_send_btn)

        select_all_btn = QPushButton("‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ")
        select_none_btn = QPushButton("‚ùå –°–Ω—è—Ç—å –≤—ã–±–æ—Ä")
        select_all_btn.clicked.connect(lambda: self.toggle_all_selections(table, True))
        select_none_btn.clicked.connect(lambda: self.toggle_all_selections(table, False))
        mass_actions.addWidget(select_all_btn)
        mass_actions.addWidget(select_none_btn)

        layout.addLayout(mass_actions)
        layout.addWidget(table)

        return widget


    def toggle_all_selections(self, table, select_all):
        """–í—ã–±–æ—Ä –∏–ª–∏ —Å–Ω—è—Ç–∏–µ –≤—ã–±–æ—Ä–∞ —Å–æ –≤—Å–µ—Ö —á–µ–∫–±–æ–∫—Å–æ–≤"""
        for row in range(table.rowCount()):
            item = table.item(row, 0)
            if item:
                item.setCheckState(Qt.Checked if select_all else Qt.Unchecked)

    def send_mass_messages(self, table, template_name):
        """–ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–º –¥–æ–ª–∂–Ω–∏–∫–∞–º"""
        selected_rows = []
        processed_fios = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        success_count = 0

        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        for row in range(table.rowCount()):
            if table.item(row, 0).checkState() == Qt.Checked:
                try:
                    class Debtor:
                        def __init__(self, fio, total_debt, total_orders, phone, discount=None):
                            self.fio = fio
                            self.total_debt = total_debt
                            self.total_orders = total_orders
                            self.phone = phone
                            self.discount = discount

                    fio = table.item(row, 1).text()

                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                    if fio in processed_fios:
                        continue

                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
                    client_orders = (
                        self.session.query(Order)
                        .filter(
                            Order.fio == fio,
                            ~Order.status.in_(['–û—Ç–º–µ–Ω–µ–Ω', '–û—Ç–∫–∞–∑'])
                        )
                        .all()
                    )

                    total_amount = 0
                    total_debt = 0

                    for order in client_orders:
                        actual_cost = order.cost
                        if order.discount and order.discount != "–ù–µ —É–∫–∞–∑–∞–Ω–æ" and order.discount != "0%":
                            try:
                                discount_percent = float(order.discount.strip('%'))
                                actual_cost = order.cost * (1 - discount_percent / 100)
                            except (ValueError, AttributeError):
                                pass

                        total_amount += actual_cost
                        remaining = max(0, actual_cost - (order.paid_amount or 0))
                        total_debt += remaining

                    total_orders = len(client_orders)
                    phone = table.item(row, 4).text()
                    calculated_discount = self.calculate_discount(total_orders, total_amount)

                    debtor = Debtor(
                        fio=fio,
                        total_debt=total_debt,
                        total_orders=total_orders,
                        phone=phone,
                        discount=calculated_discount
                    )
                    selected_rows.append(debtor)
                    processed_fios.add(fio)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ

                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ {row}: {e}")
                    continue

        if not selected_rows:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è!")
            return

        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—É—á–∞—Ç–µ–ª—é –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        for debtor in selected_rows:
            try:
                preview = QMessageBox()
                preview.setIcon(QMessageBox.Information)
                preview.setWindowTitle("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è")
                preview.setText(
                    f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {debtor.fio}?\n"
                    f"–¢–µ–ª–µ—Ñ–æ–Ω: {debtor.phone}\n"
                    f"–°—É–º–º–∞ –¥–æ–ª–≥–∞: {debtor.total_debt:,.2f} —Ä—É–±.\n"
                    f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å–∫–∏–¥–∫–∞: {debtor.discount}%"
                )
                preview.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
                preview.setDetailedText(self.get_message_text(debtor, template_name))

                if preview.exec_() == QMessageBox.Yes:
                    self.send_whatsapp_message(debtor.phone, self.get_message_text(debtor, template_name))
                    success_count += 1

            except Exception as e:
                QMessageBox.critical(
                    self,
                    "–û—à–∏–±–∫–∞",
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {debtor.fio}: {str(e)}"
                )

        # –í –∫–æ–Ω—Ü–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if success_count > 0:
            QMessageBox.information(
                self,
                "–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏",
                f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {success_count} –∏–∑ {len(selected_rows)}"
            )
    def get_message_text(self, debtor, template_name):
        """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        template = self.message_templates.get(template_name)
        if not template:
            raise ValueError("–®–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω!")

        message = str(template)
        replacements = {
            "{client}": str(debtor.fio),
            "{order_count}": str(debtor.total_orders),
            "{discount}": f"{debtor.discount}%",
            "{debt_message}": f"–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏: {debtor.total_debt:,.2f} —Ä—É–±.",
            "{debt_details}": f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {debtor.total_orders}"
        }

        for old, new in replacements.items():
            if old in message:
                message = message.replace(old, new)

        return message

    def send_grouped_debt_message(self, debtor, template_name):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –¥–æ–ª–∂–Ω–∏–∫—É"""
        try:
            if not hasattr(debtor, 'phone') or not debtor.phone or debtor.phone == "–ù–µ —É–∫–∞–∑–∞–Ω":
                QMessageBox.warning(
                    self,
                    "–û—à–∏–±–∫–∞",
                    f"–£ –∫–ª–∏–µ–Ω—Ç–∞ {debtor.fio} –Ω–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞! "
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –∫–∞—Ä—Ç–æ—á–∫—É –∫–ª–∏–µ–Ω—Ç–∞."
                )
                return

            excluded_statuses = ['–û—Ç–º–µ–Ω–µ–Ω', '–û—Ç–∫–∞–∑']

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–∞
            client_orders = (
                self.session.query(Order)
                .filter(
                    Order.fio == debtor.fio,
                    ~Order.status.in_(excluded_statuses)
                )
                .all()
            )

            if not client_orders:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–∞!")
                return

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–æ–∫
            total_amount = 0
            total_debt = 0

            for order in client_orders:
                actual_cost = order.cost
                if order.discount and order.discount != "–ù–µ —É–∫–∞–∑–∞–Ω–æ" and order.discount != "0%":
                    try:
                        discount_percent = float(order.discount.strip('%'))
                        actual_cost = order.cost * (1 - discount_percent / 100)
                    except (ValueError, AttributeError):
                        pass

                total_amount += actual_cost
                # –†–∞—Å—á–µ—Ç –¥–æ–ª–≥–∞ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏
                remaining = max(0, actual_cost - (order.paid_amount or 0))
                total_debt += remaining

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é —Å–∫–∏–¥–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤ –∏ –æ–±—â–µ–π —Å—É–º–º—ã
            recommended_discount = self.calculate_discount(len(client_orders), total_amount)

            # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω
            template = self.message_templates.get(template_name)
            if not template:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–®–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return

            message = str(template)

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∑–∞–º–µ–Ω—ã
            replacements = {
                "{client}": str(debtor.fio),
                "{order_count}": str(len(client_orders)),
                "{discount}": f"{recommended_discount}%",  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é —Å–∫–∏–¥–∫—É
                "{debt_message}": f"–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏: {total_debt:,.2f} —Ä—É–±.",
                "{debt_details}": (
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ —Å –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å—é: "
                    f"{len([o for o in client_orders if o.remaining_amount > 0])}"
                )
            }

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–º–µ–Ω—É
            for old, new in replacements.items():
                if old in message:
                    message = message.replace(old, new)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
            preview = QMessageBox()
            preview.setIcon(QMessageBox.Information)
            preview.setWindowTitle("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è")
            preview.setText(
                f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {debtor.fio}?\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {debtor.phone}\n"
                f"–°—É–º–º–∞ –¥–æ–ª–≥–∞: {total_debt:,.2f} —Ä—É–±.\n"
                f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å–∫–∏–¥–∫–∞: {recommended_discount}%"
            )
            preview.setDetailedText(message)
            preview.setStandardButtons(QMessageBox.Yes | QMessageBox.No)

            if preview.exec_() == QMessageBox.Yes:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                self.send_whatsapp_message(debtor.phone, message)
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {debtor.fio} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
    def createLoyalClientsTab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
        widget = QWidget()
        layout = QVBoxLayout(widget)

        # –¢–∞–±–ª–∏—Ü–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
        table = QTableWidget()
        table.setColumnCount(5)
        table.setHorizontalHeaderLabels([
            "–§–ò–û –∫–ª–∏–µ–Ω—Ç–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤",
            "–û–±—â–∞—è —Å—É–º–º–∞", "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å–∫–∏–¥–∫–∞", "–î–µ–π—Å—Ç–≤–∏—è"
        ])
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤
        table.horizontalHeader().setSectionResizeMode(0, QHeaderView.Stretch)
        table.setColumnWidth(1, 150)
        table.setColumnWidth(2, 150)
        table.setColumnWidth(3, 150)
        table.setColumnWidth(4, 400)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
        table.verticalHeader().setDefaultSectionSize(70)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö
        clients_data = (
            self.session.query(
                Order.fio,
                Order.phone,  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                func.count(Order.id).label('order_count'),
                func.sum(Order.cost).label('total_amount')
            )
            .group_by(Order.fio, Order.phone)  # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–∞–∫–∂–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
            .having(func.count(Order.id) >= 2)
            .order_by(desc('order_count'))
            .all()
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–∞–±–ª–∏—Ü—ã
        table.setRowCount(len(clients_data))
        table.horizontalHeader().setSectionResizeMode(0, QHeaderView.Stretch)
        for i in range(1, 4):
            table.setColumnWidth(i, 120)
        table.setColumnWidth(4, 150)

        for i, client in enumerate(clients_data):
            # –§–ò–û
            table.setItem(i, 0, QTableWidgetItem(client.fio))

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
            order_count_item = QTableWidgetItem(str(client.order_count))
            order_count_item.setTextAlignment(Qt.AlignCenter)
            table.setItem(i, 1, order_count_item)

            # –û–±—â–∞—è —Å—É–º–º–∞
            amount_item = QTableWidgetItem(f"{client.total_amount:,.2f} ‚ÇΩ")
            amount_item.setTextAlignment(Qt.AlignRight | Qt.AlignVCenter)
            table.setItem(i, 2, amount_item)

            # –†–∞—Å—á–µ—Ç —Å–∫–∏–¥–∫–∏
            discount = self.calculate_discount(client.order_count, client.total_amount)
            discount_item = QTableWidgetItem(f"{discount}%")
            discount_item.setTextAlignment(Qt.AlignCenter)
            table.setItem(i, 3, discount_item)

            # –ö–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
            button_widget = QWidget()
            button_layout = QHBoxLayout(button_widget)
            button_layout.setContentsMargins(2, 2, 2, 2)
            button_layout.setSpacing(4)

            send_btn = ActionButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", "üíå")
            send_btn.clicked.connect(lambda checked, fio=client.fio, disc=discount:
                                     self.send_loyalty_message(fio, disc))
            button_layout.addWidget(send_btn)

            table.setCellWidget(i, 4, button_widget)

        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã
        table.setStyleSheet("""
            QTableWidget {
                background-color: white;
                border: 1px solid #ddd;
                border-radius: 6px;
                gridline-color: #f0f0f0;
            }
            QTableWidget::item {
                padding: 8;
            }
            QHeaderView::section {
                background-color: #f8f9fa;
                padding: 8px;
                border: none;
                border-bottom: 2px solid #2196F3;
                font-weight: bold;
            }
            QTableWidget::item:selected {
                background-color: #e3f2fd;
                color: black;
            }
        """)

        layout.addWidget(table)
        return widget

    def calculate_discount(self, order_count, total_amount):
        """–†–∞—Å—á–µ—Ç —Å–∫–∏–¥–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤ –∏ —Å—É–º–º—ã"""
        if order_count >= 10 or total_amount >= 25000:
            return 30
        elif order_count >= 5 or total_amount >= 10000:
            return 20
        elif order_count >= 3 or total_amount >= 8000:
            return 10
        return 0

    def createDebtorsTab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –¥–æ–ª–∂–Ω–∏–∫–æ–≤ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ä–∞—Å—á–µ—Ç–æ–º –¥–æ–ª–≥–æ–≤"""
        widget = QWidget()
        layout = QVBoxLayout(widget)

        # –¢–∞–±–ª–∏—Ü–∞ –¥–æ–ª–∂–Ω–∏–∫–æ–≤
        table = QTableWidget()
        table.setColumnCount(6)
        table.setHorizontalHeaderLabels([
            "–§–ò–û", "–¢–µ–ª–µ—Ñ–æ–Ω", "–°—É–º–º–∞ –¥–æ–ª–≥–∞",
            "–°—Ä–æ–∫ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏", "–°—Ç–∞—Ç—É—Å", "–î–µ–π—Å—Ç–≤–∏—è"
        ])

        # –í–∫–ª—é—á–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
        table.setSortingEnabled(True)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤
        table.horizontalHeader().setSectionResizeMode(0, QHeaderView.Stretch)
        table.setColumnWidth(1, 150)
        table.setColumnWidth(2, 150)
        table.setColumnWidth(3, 150)
        table.setColumnWidth(4, 120)
        table.setColumnWidth(5, 400)
        table.verticalHeader().setDefaultSectionSize(70)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–æ–ª–∂–Ω–∏–∫–∞—Ö —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–æ–∫ –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        excluded_statuses = ['–û—Ç–º–µ–Ω–µ–Ω', '–û—Ç–∫–∞–∑']
        debtors = (
            self.session.query(Order)
            .filter(
                ~Order.status.in_(excluded_statuses)  # –ò—Å–∫–ª—é—á–∞–µ–º –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
            )
            .all()
        )

        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–ª–∂–Ω–∏–∫–æ–≤
        actual_debtors = []
        for order in debtors:
            # –†–∞—Å—á–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏
            actual_cost = order.cost
            if order.discount and order.discount != "–ù–µ —É–∫–∞–∑–∞–Ω–æ" and order.discount != "0%":
                try:
                    discount_percent = float(order.discount.strip('%'))
                    actual_cost = order.cost * (1 - discount_percent / 100)
                except (ValueError, AttributeError):
                    pass

            # –†–∞—Å—á–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –¥–æ–ª–≥–∞ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏
            actual_debt = max(0, actual_cost - (order.paid_amount or 0))

            if actual_debt > 0:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –¥–æ–ª–≥
                actual_debtors.append({
                    'order': order,
                    'actual_debt': actual_debt
                })

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—É–º–º–µ –¥–æ–ª–≥–∞
        actual_debtors.sort(key=lambda x: x['actual_debt'], reverse=True)

        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        table.setRowCount(len(actual_debtors))
        for i, debtor_data in enumerate(actual_debtors):
            debtor = debtor_data['order']
            actual_debt = debtor_data['actual_debt']

            # –§–ò–û
            table.setItem(i, 0, QTableWidgetItem(debtor.fio))

            # –¢–µ–ª–µ—Ñ–æ–Ω
            phone_item = QTableWidgetItem(debtor.phone if debtor.phone else "–ù–µ —É–∫–∞–∑–∞–Ω")
            phone_item.setTextAlignment(Qt.AlignCenter)
            table.setItem(i, 1, phone_item)

            # –°—É–º–º–∞ –¥–æ–ª–≥–∞ (—Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏)
            debt_item = QTableWidgetItem(f"{actual_debt:,.2f} ‚ÇΩ")
            debt_item.setTextAlignment(Qt.AlignRight | Qt.AlignVCenter)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            debt_item.setData(Qt.UserRole, actual_debt)
            table.setItem(i, 2, debt_item)

            # –°—Ä–æ–∫ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Å—Ç–∞—Ç—É—Å
            if debtor.created_date:
                days_overdue = (datetime.now().date() - debtor.created_date).days
                days_item = QTableWidgetItem(f"{days_overdue} –¥–Ω.")
                days_item.setTextAlignment(Qt.AlignCenter)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                days_item.setData(Qt.UserRole, days_overdue)
                table.setItem(i, 3, days_item)

                if days_overdue > 30:
                    status = "‚ùó –ö—Ä–∏—Ç–∏—á–Ω–æ"
                    status_color = "#f44336"
                elif days_overdue > 14:
                    status = "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ"
                    status_color = "#ff9800"
                else:
                    status = "‚ÑπÔ∏è –ù–æ—Ä–º–∞"
                    status_color = "#4caf50"

                status_item = QTableWidgetItem(status)
                status_item.setForeground(QColor(status_color))
                status_item.setTextAlignment(Qt.AlignCenter)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                status_item.setData(Qt.UserRole, days_overdue)
                table.setItem(i, 4, status_item)

            # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            button_widget = QWidget()
            button_layout = QHBoxLayout(button_widget)
            button_layout.setContentsMargins(2, 2, 2, 2)
            button_layout.setSpacing(4)

            remind_btn = ActionButton("–ù–∞–ø–æ–º–Ω–∏—Ç—å", "‚ö†Ô∏è")
            remind_btn.clicked.connect(lambda checked, d=debtor: self.send_debt_reminder(d))
            button_layout.addWidget(remind_btn)

            table.setCellWidget(i, 5, button_widget)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        table.horizontalHeader().sectionClicked.connect(
            lambda index: self.handle_sort(table, index)
        )

        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã
        table.setStyleSheet("""
            QTableWidget {
                background-color: white;
                border: 1px solid #ddd;
                border-radius: 6px;
                gridline-color: #f0f0f0;
            }
            QTableWidget::item {
                padding: 5px;
            }
            QHeaderView::section {
                background-color: #f8f9fa;
                padding: 8px;
                border: none;
                border-bottom: 2px solid #2196F3;
                font-weight: bold;
                cursor: pointer;
            }
            QHeaderView::section:hover {
                background-color: #e3f2fd;
            }
            QTableWidget::item:selected {
                background-color: #e3f2fd;
                color: black;
            }
        """)

        layout.addWidget(table)
        return widget

    def handle_sort(self, table, column_index):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã"""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        header = table.horizontalHeader()
        if header.sortIndicatorSection() == column_index:
            # –ï—Å–ª–∏ —Ç–∞ –∂–µ –∫–æ–ª–æ–Ω–∫–∞, –º–µ–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            order = Qt.DescendingOrder if header.sortIndicatorOrder() == Qt.AscendingOrder else Qt.AscendingOrder
        else:
            # –ù–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é
            order = Qt.DescendingOrder

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
        table.sortItems(column_index, order)


    def createMailingTab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        widget = QWidget()
        layout = QVBoxLayout(widget)

        # –í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞
        template_group = QGroupBox("–®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π")
        template_layout = QVBoxLayout()

        self.template_combo = QComboBox()
        self.template_combo.addItems([
            "–°–∫–∏–¥–∫–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º",
            "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
            "–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç—É",
            "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–æ–ª–≥–µ"
        ])
        self.template_combo.currentTextChanged.connect(self.load_template)
        template_layout.addWidget(self.template_combo)

        # –†–µ–¥–∞–∫—Ç–æ—Ä —à–∞–±–ª–æ–Ω–∞
        self.template_editor = QTextEdit()
        template_layout.addWidget(self.template_editor)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        variables_label = QLabel("""
            –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:
            {client} - –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞
            {order_count} - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
            {debt_message} - —Å—É–º–º–∞ –¥–æ–ª–≥–∞
            {debt_details} - –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏
            {discount} - —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏
        """)
        template_layout.addWidget(variables_label)

        template_group.setLayout(template_layout)
        layout.addWidget(template_group)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QHBoxLayout()

        save_btn = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω")
        save_btn.clicked.connect(self.save_template)
        buttons_layout.addWidget(save_btn)

        preview_btn = QPushButton("üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä")
        preview_btn.clicked.connect(self.preview_message)
        buttons_layout.addWidget(preview_btn)

        layout.addLayout(buttons_layout)

        return widget

    def load_templates(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            with open('message_templates.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —à–∞–±–ª–æ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            return {
                "–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç—É": """–£–≤–∞–∂–∞–µ–º—ã–π {client}!

–ú—ã –æ—á–µ–Ω—å —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å—Ä–µ–¥–∏ –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤! –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è –≤—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏ {order_count} —Ä–∞–∑, –∏ –º—ã –∏—Å–∫—Ä–µ–Ω–Ω–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã –≤–∞–º –∑–∞ –¥–æ–≤–µ—Ä–∏–µ.

–í –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞—à–µ–π –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏, –º—ã —Ö–æ—Ç–∏–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º —Å–∫–∏–¥–∫—É {discount} –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑!

–¢–∞–∫–∂–µ —Ö–æ—Ç–µ–ª–∏ –±—ã –Ω–∞–ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:
{debt_message}
{debt_details}

–ú—ã —Ü–µ–Ω–∏–º –Ω–∞—à–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ –∏ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å –≤–∞–º!

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–û–û–û MPSP
—Ç–µ–ª: +79066322571""",

                "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–æ–ª–≥–µ": """–£–≤–∞–∂–∞–µ–º—ã–π {client}!

–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–ø–ª–∞—Ç—ã:
{debt_message}

–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø–æ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–º –∑–∞–∫–∞–∑–∞–º:
{debt_details}

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–û–û–û MPSP
—Ç–µ–ª: +79066322571"""
            }
    def send_whatsapp_message(self, phone, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ WhatsApp"""
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone = re.sub(r'[^\d]', '', phone)
        if phone.startswith('8'):
            phone = '7' + phone[1:]
        elif not phone.startswith('7'):
            phone = '7' + phone

        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è WhatsApp
        url = f"https://wa.me/{phone}?text={quote(message)}"
        QDesktopServices.openUrl(QUrl(url))

    def load_template(self, template_name):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä"""
        if template_name in self.message_templates:
            self.template_editor.setText(self.message_templates[template_name])
        else:
            self.template_editor.clear()

    def save_template(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
        current_template = self.template_combo.currentText()
        template_text = self.template_editor.toPlainText()

        if not template_text.strip():
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–®–∞–±–ª–æ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            return

        self.message_templates[current_template] = template_text

        try:
            with open('message_templates.json', 'w', encoding='utf-8') as f:
                json.dump(self.message_templates, f, ensure_ascii=False, indent=4)
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞: {str(e)}")

    def preview_message(self):
        """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        template = self.template_editor.toPlainText()

        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        test_data = {
            'client': '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á',
            'order_count': '5',
            'debt_message': '5000 —Ä—É–±.',
            'debt_details': '–°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã: 7 –¥–Ω–µ–π',
            'discount': '20'
        }

        try:
            preview_text = template.format(**test_data)

            preview_dialog = QDialog(self)
            preview_dialog.setWindowTitle("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è")
            preview_dialog.setMinimumWidth(400)

            layout = QVBoxLayout(preview_dialog)

            # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            text_edit = QTextEdit()
            text_edit.setPlainText(preview_text)
            text_edit.setReadOnly(True)
            layout.addWidget(text_edit)

            # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
            close_btn = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
            close_btn.clicked.connect(preview_dialog.close)
            layout.addWidget(close_btn)

            preview_dialog.exec_()

        except KeyError as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –≤ —à–∞–±–ª–æ–Ω–µ: {str(e)}")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")

    def send_loyalty_message(self, client_name, discount, phone=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç—É"""
        try:
            # –ï—Å–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –∏–∑ –±–∞–∑—ã
            if not phone:
                client_data = (
                    self.session.query(
                        Order.phone
                    )
                    .filter(Order.fio == client_name)
                    .order_by(Order.id.desc())  # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–æ–º–µ—Ä
                    .first()
                )
                phone = client_data.phone if client_data else None

            if not phone:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞",
                                    f"–£ –∫–ª–∏–µ–Ω—Ç–∞ {client_name} –Ω–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!")
                return

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–æ–ª–≥–∞
            excluded_statuses = ['–û—Ç–º–µ–Ω–µ–Ω', '–û—Ç–∫–∞–∑']
            client_orders = (
                self.session.query(Order)
                .filter(
                    Order.fio == client_name,
                    ~Order.status.in_(excluded_statuses)
                )
                .all()
            )

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –∏ –¥–æ–ª–≥ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–æ–∫
            total_amount = 0
            total_debt = 0

            for order in client_orders:
                actual_cost = order.cost
                if order.discount and order.discount != "–ù–µ —É–∫–∞–∑–∞–Ω–æ" and order.discount != "0%":
                    try:
                        discount_percent = float(order.discount.strip('%'))
                        actual_cost = order.cost * (1 - discount_percent / 100)
                    except (ValueError, AttributeError):
                        pass

                total_amount += actual_cost
                remaining = max(0, actual_cost - (order.paid_amount or 0))
                total_debt += remaining

            # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è
            template_name = "–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç—É"
            template = self.message_templates.get(template_name)

            if not template:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–®–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return

            message = str(template)

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–º–µ–Ω—ã
            replacements = {
                "{client}": client_name,
                "{order_count}": str(len(client_orders)),
                "{discount}": f"{discount}%",
                "{debt_message}": f"–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏: {total_debt:,.2f} —Ä—É–±.",
                "{debt_details}": (
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ —Å –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å—é: "
                    f"{len([o for o in client_orders if o.remaining_amount > 0])}"
                )
            }

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–º–µ–Ω—ã –≤ —à–∞–±–ª–æ–Ω–µ
            for old, new in replacements.items():
                message = message.replace(old, new)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
            preview = QMessageBox()
            preview.setIcon(QMessageBox.Information)
            preview.setWindowTitle("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è")
            preview.setText(
                f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_name}?\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
            )
            preview.setDetailedText(message)
            preview.setStandardButtons(QMessageBox.Yes | QMessageBox.No)

            if preview.exec_() == QMessageBox.Yes:
                formatted_phone = self.format_phone_number(phone)
                self.send_whatsapp_message(formatted_phone, message)
                QMessageBox.information(self, "–£—Å–ø–µ—Ö",
                                        f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {client_name} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞",
                                 f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")

    def send_debt_reminder(self, debtor):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–æ–ª–≥–µ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–æ–∫"""
        try:
            if not debtor.phone:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–£ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!")
                return

            excluded_statuses = ['–û—Ç–º–µ–Ω–µ–Ω', '–û—Ç–∫–∞–∑']

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–∞
            client_orders = (
                self.session.query(Order)
                .filter(
                    Order.fio == debtor.fio,
                    ~Order.status.in_(excluded_statuses)
                )
                .all()
            )

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –∏ –¥–æ–ª–≥ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–æ–∫
            total_amount = 0
            total_debt = 0
            orders_with_debt = 0

            for order in client_orders:
                # –†–∞—Å—á–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏
                actual_cost = order.cost
                if order.discount and order.discount != "–ù–µ —É–∫–∞–∑–∞–Ω–æ" and order.discount != "0%":
                    try:
                        discount_percent = float(order.discount.strip('%'))
                        actual_cost = order.cost * (1 - discount_percent / 100)
                    except (ValueError, AttributeError):
                        pass

                total_amount += actual_cost
                # –†–∞—Å—á–µ—Ç –¥–æ–ª–≥–∞ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏
                remaining = max(0, actual_cost - (order.paid_amount or 0))
                if remaining > 0:
                    orders_with_debt += 1
                    total_debt += remaining

            if total_debt <= 0:
                QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                                        "–£ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–æ–∫!")
                return

            days_overdue = (datetime.now().date() - debtor.created_date).days if hasattr(debtor, 'created_date') else 0

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            template = self.message_templates.get("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–æ–ª–≥–µ")
            if not template:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–®–∞–±–ª–æ–Ω –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–º–µ–Ω—ã
            message = template.format(
                client=debtor.fio,
                debt_message=f"–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏: {total_debt:,.2f} —Ä—É–±.",
                debt_details=(
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ —Å –¥–æ–ª–≥–æ–º: {orders_with_debt}\n"
                    f"–°—Ä–æ–∫ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏: {days_overdue} –¥–Ω–µ–π"
                )
            )

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
            preview = QMessageBox()
            preview.setIcon(QMessageBox.Information)
            preview.setWindowTitle("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è")
            preview.setText(
                f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {debtor.fio}?\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {debtor.phone}\n"
                f"–°—É–º–º–∞ –¥–æ–ª–≥–∞ (—Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–æ–∫): {total_debt:,.2f} —Ä—É–±."
            )
            preview.setDetailedText(message)
            preview.setStandardButtons(QMessageBox.Yes | QMessageBox.No)

            if preview.exec_() == QMessageBox.Yes:
                self.send_whatsapp_message(debtor.phone, message)
                QMessageBox.information(self, "–£—Å–ø–µ—Ö",
                                        f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {debtor.fio} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞",
                                 f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {str(e)}")


    def format_phone_number(self, phone):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        phone = re.sub(r'[^\d]', '', phone)
        if phone.startswith('8'):
            phone = '7' + phone[1:]
        elif not phone.startswith('7'):
            phone = '7' + phone
        return phone


class ActionButton(QPushButton):
    """–ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ"""

    def __init__(self, text, icon=None, parent=None):
        super().__init__(text, parent)
        self.setStyleSheet("""
            QPushButton {
                background-color: #2196F3;
                color: white;
                border: none;
                padding: 5px 10px;
                border-radius: 4px;
                font-size: 12px;
                min-height: 25px;
                min-width: 100px;
                text-align: center;
            }
            QPushButton:hover {
                background-color: #1976D2;
            }
            QPushButton:pressed {
                background-color: #0D47A1;
            }
        """)
        if icon:
            self.setText(f"{icon} {text}")


