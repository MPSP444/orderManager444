from datetime import datetime, timedelta, date

from PyQt5.QtWidgets import (QListView, QStyledItemDelegate, QVBoxLayout,
                             QWidget, QLabel, QFrame, QHBoxLayout, QDialog, QSizePolicy, QComboBox)
from PyQt5.QtCore import (QAbstractListModel, Qt, QSize, QModelIndex,
                          pyqtSignal, QPoint, QMimeData, QTimer)
from PyQt5.QtGui import QDrag, QPainter, QRegion, QPixmap, QContextMenuEvent

from core import DatabaseManager, Order
from .order_card import OrderCard
from PyQt5.QtWidgets import QApplication
from PyQt5.QtCore import Qt, QEvent
from PyQt5.QtWidgets import (QStyledItemDelegate, QApplication)
from PyQt5.QtCore import Qt, QSize, QEvent
from PyQt5.QtGui import QDrag, QPixmap

from PyQt5.QtCore import QAbstractListModel, Qt, QMimeData
from PyQt5.QtGui import QDrag
from PyQt5.QtCore import QEvent

from ui.message_utils import show_error, show_warning
from ui.windows.payment_window import PaymentWindow
from PyQt5.QtWidgets import QToolTip
from PyQt5.QtCore import Qt, QEvent
from PyQt5.QtWidgets import QToolTip, QStyle, QStyleOptionViewItem
from PyQt5.QtCore import Qt, QEvent
from ui.message_utils import show_error
import os
import subprocess
from PyQt5.QtCore import QSettings


class OrdersModel(QAbstractListModel):
    def __init__(self, orders=None):
        super().__init__()
        self._orders = orders or []

    def data(self, index, role=Qt.DisplayRole):
        if not index.isValid():
            return None

        if role == Qt.UserRole and 0 <= index.row() < len(self._orders):
            return self._orders[index.row()]

        return None

    def rowCount(self, index):
        return len(self._orders)

    def flags(self, index):
        default_flags = super().flags(index)
        if index.isValid():
            return default_flags | Qt.ItemIsDragEnabled | Qt.ItemIsDropEnabled
        return default_flags | Qt.ItemIsDropEnabled

    def supportedDropActions(self):
        return Qt.MoveAction | Qt.CopyAction

    def canDropMimeData(self, data, action, row, column, parent):
        if not data.hasText():
            return False
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ id –∑–∞–∫–∞–∑–∞
            int(data.text())
            return True
        except ValueError:
            return False

    def dropMimeData(self, data, action, row, column, parent):
        if not self.canDropMimeData(data, action, row, column, parent):
            return False

        if action == Qt.IgnoreAction:
            return True

        return True  # –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –∫–æ–ª–æ–Ω–∫–µ

    def supportedDragActions(self):
        return Qt.MoveAction

    def mimeTypes(self):
        return ['text/plain']

    def mimeData(self, indexes):
        if not indexes:
            return None

        mime_data = QMimeData()
        if len(indexes) > 0:
            index = indexes[0]
            if index.isValid() and index.row() < len(self._orders):
                order_data = self._orders[index.row()]
                mime_data.setText(str(order_data['id']))
        return mime_data

    def setOrders(self, orders):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤"""
        self.beginResetModel()
        self._orders = orders
        self.endResetModel()

    def getOrder(self, row):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É"""
        if 0 <= row < len(self._orders):
            return self._orders[row]
        return None

    def removeOrder(self, row):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É"""
        if 0 <= row < len(self._orders):
            self.beginRemoveRows(self.createIndex(0, 0), row, row)
            del self._orders[row]
            self.endRemoveRows()
            return True
        return False

    def addOrder(self, order):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
        self.beginInsertRows(self.createIndex(0, 0), len(self._orders), len(self._orders))
        self._orders.append(order)
        self.endInsertRows()

    def clear(self):
        """–û—á–∏—Å—Ç–∫–∞ –º–æ–¥–µ–ª–∏"""
        self.beginResetModel()
        self._orders = []
        self.endResetModel()

    def updateOrder(self, order_id, new_data):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞"""
        for i, order in enumerate(self._orders):
            if order['id'] == order_id:
                self._orders[i].update(new_data)
                self.dataChanged.emit(
                    self.index(i, 0),
                    self.index(i, 0),
                    [Qt.UserRole]
                )
                return True
        return False


class OrderCardDelegate(QStyledItemDelegate):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.card_size = QSize(315, 225)
        self.margin = QSize(8, 8)
        self.drag_start_position = None
        self.current_tooltip_index = None

    def createEditor(self, parent, option, index):
        return None  # –û—Ç–∫–ª—é—á–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

    def helpEvent(self, event, view, option, index):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏"""
        if not event or not view or not index.isValid():
            return False

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        order_data = index.data(Qt.UserRole)
        if not order_data:
            try:
                with DatabaseManager().session_scope() as session:
                    order_id = index.data(Qt.DisplayRole)
                    if order_id:
                        order = session.query(Order).get(order_id)
                        if order:
                            order_data = order.to_dict()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞: {e}")
                return False

        if not order_data:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –º—ã—à—å –Ω–∞–¥ —ç–ª–µ–º–µ–Ω—Ç–æ–º
        if not option.rect.contains(event.pos()):
            return False

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
        created_date = order_data.get('created_date')
        payment_date = order_data.get('payment_date')
        discount_start = order_data.get('discount_start_date')
        discount_end = order_data.get('discount_end_date')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è
            if isinstance(created_date, str):
                created_date_str = created_date
            elif created_date:
                if isinstance(created_date, datetime):
                    created_date_str = created_date.strftime("%d.%m.%Y %H:%M")
                else:
                    created_date_str = str(created_date)
            else:
                created_date_str = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –æ–ø–ª–∞—Ç—ã
            if isinstance(payment_date, str):
                payment_date_str = payment_date
            elif payment_date:
                if isinstance(payment_date, datetime):
                    payment_date_str = payment_date.strftime("%d.%m.%Y %H:%M")
                else:
                    payment_date_str = str(payment_date)
            else:
                payment_date_str = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç —Å–∫–∏–¥–∫–∏
            if discount_start:
                if isinstance(discount_start, str):
                    discount_start_str = discount_start
                elif isinstance(discount_start, datetime):
                    discount_start_str = discount_start.strftime("%d.%m.%Y %H:%M")
                else:
                    discount_start_str = str(discount_start)
            else:
                discount_start_str = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"

            if discount_end:
                if isinstance(discount_end, str):
                    discount_end_str = discount_end
                elif isinstance(discount_end, datetime):
                    discount_end_str = discount_end.strftime("%d.%m.%Y %H:%M")
                else:
                    discount_end_str = str(discount_end)
            else:
                discount_end_str = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞—Ç: {e}")
            created_date_str = str(created_date) if created_date else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            payment_date_str = str(payment_date) if payment_date else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            discount_start_str = str(discount_start) if discount_start else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            discount_end_str = str(discount_end) if discount_end else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"

        # –§–æ—Ä–º–∏—Ä—É–µ–º HTML –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
        tooltip_text = f"""
        <div style='background-color: white; 
                    padding: 10px; 
                    border: 1px solid #ccc; 
                    border-radius: 4px;
                    min-width: 200px;
                    font-family: "Segoe UI", Arial, sans-serif;'>
            <p style='margin: 4px 0;'><b>üìã –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> #{order_data.get('id', '–ù/–î')}</p>
            <p style='margin: 4px 0;'><b>üë§ –§–ò–û:</b> {order_data.get('fio', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</p>
            <p style='margin: 4px 0;'><b>üë• –ì—Ä—É–ø–ø–∞:</b> {order_data.get('group', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}</p>
            <p style='margin: 4px 0;'><b>üîë –õ–æ–≥–∏–Ω:</b> {order_data.get('login', '–ù–µ —É–∫–∞–∑–∞–Ω')}</p>
            <p style='margin: 4px 0;'><b>üåê –°–∞–π—Ç:</b> {order_data.get('website', '–ù–µ —É–∫–∞–∑–∞–Ω')}</p>
            <p style='margin: 4px 0;'><b>üìù –¢–µ–º–∞:</b> {order_data.get('theme', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}</p>
            <p style='margin: 4px 0;'><b>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:</b> {order_data.get('comment', '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤')}</p>
            <p style='margin: 4px 0;'><b>üìû –¢–µ–ª–µ—Ñ–æ–Ω:</b> {order_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}</p>
            <p style='margin: 4px 0;'><b>üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:</b> {order_data.get('teacher_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}</p>
            <p style='margin: 4px 0;'><b>üìß Email –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:</b> {order_data.get('teacher_email', '–ù–µ —É–∫–∞–∑–∞–Ω')}</p>
            <p style='margin: 4px 0;'><b>üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {created_date_str}</p>
            <p style='margin: 4px 0;'><b>üí∞ –î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã:</b> {payment_date_str}</p>
            <p style='margin: 4px 0;'><b>‚è∞ –ù–∞—á–∞–ª–æ —Å–∫–∏–¥–∫–∏:</b> {discount_start_str}</p>
            <p style='margin: 4px 0;'><b>‚åõ –û–∫–æ–Ω—á–∞–Ω–∏–µ —Å–∫–∏–¥–∫–∏:</b> {discount_end_str}</p>
        </div>
        """

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        QToolTip.showText(event.globalPos(), tooltip_text, view, option.rect)
        return True
    def paint(self, painter, option, index):
        order_data = index.data(Qt.UserRole)
        if not order_data:
            return

        painter.save()

        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
        card = OrderCard(order_data)
        card.resize(self.card_size)

        # –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
        painter.translate(option.rect.topLeft())

        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏–æ–Ω–∞
        region = QRegion(0, 0, self.card_size.width(), self.card_size.height())
        card.render(painter, sourceRegion=region)

        painter.restore()

    def sizeHint(self, option, index):
        return self.card_size + self.margin

    def editorEvent(self, event, model, option, index):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è"""
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        order_data = model.data(index, Qt.UserRole)
        if not order_data:
            return False

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∞–≤–æ–≥–æ –∫–ª–∏–∫–∞ - –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        if (event.type() == QEvent.MouseButtonPress and
                event.button() == Qt.RightButton):
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é
            temp_card = OrderCard(order_data, parent=self.parent())
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ–±—ã—Ç–∏—è
            context_event = QContextMenuEvent(
                QContextMenuEvent.Mouse,
                event.pos(),
                event.globalPos()
            )
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
            temp_card.contextMenuEvent(context_event)
            return True

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        elif (event.type() == QEvent.MouseButtonPress and
              event.button() == Qt.LeftButton):
            self.drag_start_position = event.pos()
            return True

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        elif (event.type() == QEvent.MouseMove and
              event.buttons() & Qt.LeftButton and
              self.drag_start_position is not None):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
            distance = (event.pos() - self.drag_start_position).manhattanLength()
            if distance >= QApplication.startDragDistance():
                drag = QDrag(self.parent())
                mime_data = QMimeData()
                mime_data.setText(str(order_data['id']))
                drag.setMimeData(mime_data)

                # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
                pixmap = self.create_drag_preview(order_data)
                drag.setPixmap(pixmap)
                drag.setHotSpot(event.pos() - option.rect.topLeft())

                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
                drag.exec_(Qt.MoveAction)
                self.drag_start_position = None
                return True

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ —Å Control
        elif (event.type() == QEvent.MouseButtonDblClick and
              event.button() == Qt.LeftButton and
              event.modifiers() & Qt.ControlModifier):
            try:
                self.open_client_folder(order_data['fio'])
                return True
            except Exception as e:
                show_error(self.parent(), "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–ø–∫–∏: {str(e)}")
                return False

        return super().editorEvent(event, model, option, index)

    def create_drag_preview(self, order_data):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è"""
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        temp_card = OrderCard(order_data)
        temp_card.resize(self.card_size)

        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        pixmap = QPixmap(self.card_size)
        pixmap.fill(Qt.transparent)

        # –†–∏—Å—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
        painter = QPainter(pixmap)
        painter.setOpacity(0.7)
        temp_card.render(painter)
        painter.end()

        return pixmap

    def open_client_folder(self, client_fio):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–ø–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
        import os
        import subprocess

        try:
            # –°–æ–∑–¥–∞—ë–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –∫–ª–∏–µ–Ω—Ç–∞
            base_path = os.path.expanduser('D:\\Users\\mgurbanmuradov\\Documents\\–û–±—â–∞—è')
            client_folder = os.path.join(base_path, client_fio)

            # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs(client_folder, exist_ok=True)

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–ø–∫—É
            if os.name == 'nt':  # Windows
                os.startfile(client_folder)
            else:  # Linux/Mac
                subprocess.run(['xdg-open', client_folder])

        except Exception as e:
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É –∫–ª–∏–µ–Ω—Ç–∞: {str(e)}")

    def createDragPixmap(self, order_data):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è"""
        temp_card = OrderCard(order_data)
        temp_card.resize(self.card_size)

        pixmap = QPixmap(self.card_size)
        pixmap.fill(Qt.transparent)

        # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–µ–≤—å—é
        painter = QPainter(pixmap)
        painter.setOpacity(0.7)
        temp_card.render(painter)
        painter.end()

        return pixmap


class VirtualizedKanbanColumn(QFrame):
    status_changed = pyqtSignal(int, str, str)
    COLUMN_WIDTH = 340

    SORT_OPTIONS = [
        ("–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é", None),
        ("–ü–æ —Å–∫–∏–¥–∫–µ ‚Üë", "discount_asc"),
        ("–ü–æ —Å–∫–∏–¥–∫–µ ‚Üì", "discount_desc"),
        ("–ü–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è ‚Üë", "date_asc"),
        ("–ü–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è ‚Üì", "date_desc"),
        ("–ü–æ —Å—É–º–º–µ ‚Üë", "amount_asc"),
        ("–ü–æ —Å—É–º–º–µ ‚Üì", "amount_desc"),
        ("–ü–æ —Å—Ä–æ–∫—É ‚Üë", "deadline_asc"),
        ("–ü–æ —Å—Ä–æ–∫—É ‚Üì", "deadline_desc"),
        ("–ü–æ —É—Å–ª—É–≥–µ –ê-–Ø", "service_asc"),
        ("–ü–æ —É—Å–ª—É–≥–µ –Ø-–ê", "service_desc"),
        ("–ü–æ –≥—Ä—É–ø–ø–µ –ê-–Ø", "group_asc"),
        ("–ü–æ –≥—Ä—É–ø–ø–µ –Ø-–ê", "group_desc"),
        ("–ü–æ –æ—Å—Ç–∞—Ç–∫—É ‚Üë", "remaining_asc"),
        ("–ü–æ –æ—Å—Ç–∞—Ç–∫—É ‚Üì", "remaining_desc"),
        ("–ü–æ –¥–∞—Ç–µ –æ–ø–ª–∞—Ç—ã ‚Üë", "payment_date_asc"),
        ("–ü–æ –¥–∞—Ç–µ –æ–ø–ª–∞—Ç—ã ‚Üì", "payment_date_desc"),
    ]
    COLUMN_STYLES = {
        '–ù–æ–≤—ã–π': {
            'bg': '#FFFFFF',
            'header_bg': '#E3F2FD',
            'border': '#2196F3',
            'count_bg': '#1976D2',
            'title_color': '#1565C0'
        },
        '–í —Ä–∞–±–æ—Ç–µ': {
            'bg': '#FFFFFF',
            'header_bg': '#FFF3E0',
            'border': '#FF9800',
            'count_bg': '#F57C00',
            'title_color': '#E65100'
        },
        '–ü–µ—Ä–µ–¥–µ–ª–∫–∞': {
            'bg': '#FFFFFF',
            'header_bg': '#F3E5F5',
            'border': '#9C27B0',
            'count_bg': '#7B1FA2',
            'title_color': '#6A1B9A'
        },
        '–í –æ–∂–∏–¥–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã': {
            'bg': '#FFFFFF',
            'header_bg': '#FFEBEE',
            'border': '#F44336',
            'count_bg': '#D32F2F',
            'title_color': '#C62828'
        },
        '–í—ã–ø–æ–ª–Ω–µ–Ω': {
            'bg': '#FFFFFF',
            'header_bg': '#E8F5E9',
            'border': '#4CAF50',
            'count_bg': '#388E3C',
            'title_color': '#2E7D32'
        },
        '–û—Ç–∫–∞–∑': {
            'bg': '#FFFFFF',
            'header_bg': '#ECEFF1',
            'border': '#B0BEC5',
            'count_bg': '#78909C',
            'title_color': '#546E7A'
        }
    }

    # –°—Ç–∏–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã
    WAITING_PERIOD_STYLES = {
        'normal': {  # –¥–æ 30 –¥–Ω–µ–π
            'bg': '#FFEBEE',
            'border': '#F44336',
            'text': '#C62828'
        },
        'medium': {  # 30-180 –¥–Ω–µ–π
            'bg': '#FFE0B2',
            'border': '#FF7043',
            'text': '#D84315'
        },
        'long': {  # –±–æ–ª–µ–µ 180 –¥–Ω–µ–π
            'bg': '#FFCDD2',
            'border': '#E53935',
            'text': '#B71C1C'
        }
    }
    def __init__(self, title, status, parent=None):
        super().__init__(parent)
        self.title = title
        self.status = status
        self.db_manager = DatabaseManager()
        self.settings = QSettings('MPSP', 'KanbanApp')
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        self.current_sort = self.settings.value(f'sort_order_{self.status}', None)

        self.setAcceptDrops(True)  # –í–∫–ª—é—á–∞–µ–º –ø—Ä–∏–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ–π –∫–æ–ª–æ–Ω–∫–∏

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
        self.base_style = {
            'bg': '#FFFFFF',
            'header_bg': '#FAFAFA',
            'border': '#CCCCCC',
            'count_bg': '#999999',
            'title_color': '#2A2A2A',
            'title_font': '"Georgia", serif',
            'title_size': '18px',
            'title_weight': '600',
            'amount_bg': '#F8F8F8'
        }

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
        status_styles = {
            '–ù–æ–≤—ã–π': {
                'border': '#90CAF9',
                'count_bg': '#1976D2',
                'header_bg': '#E3F2FD'
            },
            '–í —Ä–∞–±–æ—Ç–µ': {
                'border': '#FFB74D',
                'count_bg': '#F57C00',
                'header_bg': '#FFF8E1'
            },
            '–í –æ–∂–∏–¥–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã': {
                'border': '#EF9A9A',
                'count_bg': '#D32F2F',
                'header_bg': '#FFEBEE'
            },
            '–í—ã–ø–æ–ª–Ω–µ–Ω': {
                'border': '#A5D6A7',
                'count_bg': '#388E3C',
                'header_bg': '#E8F5E9'
            },
            '–û—Ç–∫–∞–∑': {
                'border': '#B0BEC5',
                'count_bg': '#616161',
                'header_bg': '#ECEFF1'
            }
        }

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π —Å—Ç–∏–ª—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        if status in status_styles:
            self.base_style.update(status_styles[status])

        self.setup_ui()

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º ListView
        self.list_view.setAcceptDrops(False)  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–∏–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –¥–ª—è ListView
        self.list_view.viewport().setAcceptDrops(False)
        self.list_view.setDropIndicatorShown(False)
        self.list_view.setDragEnabled(True)  # –û—Å—Ç–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞—á–∞—Ç—å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ

    def dragEnterEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏"""
        if event.mimeData().hasText():
            try:
                order_id = int(event.mimeData().text())
                with self.db_manager.session_scope() as session:
                    order = session.query(Order).get(order_id)
                    if order and order.status != self.status:
                        self.setStyleSheet(f"""
                            QFrame {{
                                background-color: {self.base_style['header_bg']};
                                border: 2px dashed {self.base_style['border']};
                                border-radius: 8px;
                                margin: 0px;
                                min-width: {self.COLUMN_WIDTH}px;
                                max-width: {self.COLUMN_WIDTH}px;
                                padding: 0px;
                            }}

                            QWidget#header {{
                                background-color: #F9FAFB;
                                border: none;
                                border-top-left-radius: 14px;
                                border-top-right-radius: 14px;
                                padding: 5px;
                                min-width: {self.COLUMN_WIDTH - 8}px;
                                max-width: {self.COLUMN_WIDTH - 8}px;
                            }}

                            QLabel#title {{
                                color: #374151;
                                font-size: 16px;
                                font-family: "Segoe UI", "Arial", sans-serif;
                                font-weight: 600;
                                letter-spacing: 0.05em;
                                min-width: 200px;
                                max-width: 200px;
                            }}

                            QLabel#counter {{
                                background-color: {self.base_style['count_bg']};
                                color: white;
                                font-size: 14px;
                                font-weight: 500;
                                border-radius: 4px;
                                min-width: 40px;
                                max-width: 40px;
                                min-height: 20px;
                                max-height: 20px;
                                qproperty-alignment: AlignCenter;
                                margin: 2px;
                            }}

                            QLabel#amount {{
                                color: #6B7280;
                                font-size: 14px;
                                font-weight: 400;
                                margin-top: 2px;
                                padding-left: 2px;
                                min-width: {self.COLUMN_WIDTH - 40}px;
                                max-width: {self.COLUMN_WIDTH - 40}px;
                            }}

                            QLabel#underline {{
                                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                                            stop:0 transparent,
                                            stop:0.4 transparent,
                                            stop:0.5 {self.base_style['border']},
                                            stop:0.6 transparent,
                                            stop:1 transparent);
                                min-height: 3px;
                                max-height: 3px;
                                min-width: {self.COLUMN_WIDTH - 40}px;
                                max-width: {self.COLUMN_WIDTH - 40}px;
                                margin-top: 1px;
                            }}
                        """)
                        event.accept()
                        return
            except (ValueError, Exception) as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ dragEnter: {e}")
        event.ignore()

    def dragMoveEvent(self, event):
        """–†–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–∞–¥ –≤—Å–µ–π –∫–æ–ª–æ–Ω–∫–æ–π"""
        if event.mimeData().hasText():
            event.accept()
        else:
            event.ignore()

    def dragLeaveEvent(self, event):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π —Å—Ç–∏–ª—å –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∑–æ–Ω—ã"""
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π —Å—Ç–∏–ª—å –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
        self.setStyleSheet(f"""
            QFrame {{
                background-color: {self.base_style['bg']};
                border: 2px solid {self.base_style['border']};
                border-radius: 8px;
                margin: 0px;
                min-width: {self.COLUMN_WIDTH}px;
                max-width: {self.COLUMN_WIDTH}px;
                padding: 0px;
            }}

            QWidget#header {{
                background-color: #F9FAFB;
                border: none;
                border-top-left-radius: 14px;
                border-top-right-radius: 14px;
                padding: 5px;
                min-width: {self.COLUMN_WIDTH - 8}px;
                max-width: {self.COLUMN_WIDTH - 8}px;
            }}

            QLabel#title {{
                color: #374151;
                font-size: 16px;
                font-family: "Segoe UI", "Arial", sans-serif;
                font-weight: 600;
                letter-spacing: 0.05em;
                min-width: 200px;
                max-width: 200px;
            }}

            QLabel#counter {{
                background-color: {self.base_style['count_bg']};
                color: white;
                font-size: 14px;
                font-weight: 500;
                border-radius: 4px;
                min-width: 40px;
                max-width: 40px;
                min-height: 20px;
                max-height: 20px;
                qproperty-alignment: AlignCenter;
                margin: 2px;
            }}

            QLabel#amount {{
                color: #6B7280;
                font-size: 14px;
                font-weight: 400;
                margin-top: 2px;
                padding-left: 2px;
                min-width: {self.COLUMN_WIDTH - 40}px;
                max-width: {self.COLUMN_WIDTH - 40}px;
            }}

            QLabel#underline {{
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                            stop:0 transparent,
                            stop:0.4 transparent,
                            stop:0.5 {self.base_style['border']},
                            stop:0.6 transparent,
                            stop:1 transparent);
                min-height: 3px;
                max-height: 3px;
                min-width: {self.COLUMN_WIDTH - 40}px;
                max-width: {self.COLUMN_WIDTH - 40}px;
                margin-top: 1px;
            }}
        """)

    def dropEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±—Ä–æ—Å–∞ –∫–∞—Ä—Ç–æ—á–∫–∏"""
        try:
            order_id = int(event.mimeData().text())

            with self.db_manager.session_scope() as session:
                order = session.query(Order).get(order_id)
                if not order:
                    event.ignore()
                    return

                old_status = order.status

                # –ï—Å–ª–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º –≤ —Ç—É –∂–µ –∫–æ–ª–æ–Ω–∫—É - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                if old_status == self.status:
                    event.ignore()
                    return

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ "–í—ã–ø–æ–ª–Ω–µ–Ω"
                if self.status == '–í—ã–ø–æ–ª–Ω–µ–Ω':
                    remaining = order.recalculate_remaining()
                    if remaining > 0:
                        payment_window = PaymentWindow(self, order)
                        result = payment_window.exec_()

                        if result != QDialog.Accepted:
                            event.ignore()
                            return

                        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂—É—é –∫–æ–ø–∏—é –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
                        order = session.query(Order).get(order_id)
                        if not order:
                            event.ignore()
                            return

                        remaining = order.recalculate_remaining()
                        if remaining > 0:
                            show_warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                                         "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ '–í—ã–ø–æ–ª–Ω–µ–Ω'. –û—Å—Ç–∞–ª–∏—Å—å –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Å—É–º–º—ã.")
                            event.ignore()
                            return

                # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
                order.status = self.status
                session.commit()

                event.accept()
                self.status_changed.emit(order_id, self.status, old_status)

                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫
                parent = self.parent()
                while parent and not hasattr(parent, 'loadOrders'):
                    parent = parent.parent()
                if parent:
                    parent.loadOrders()

        except ValueError:
            event.ignore()
        except Exception as e:
            show_error(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
            event.ignore()
        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å
            self.setStyleSheet(f"""
                QFrame {{
                    background-color: {self.base_style['bg']};
                    border: 2px solid {self.base_style['border']};
                    border-radius: 8px;
                    min-width: {self.COLUMN_WIDTH}px;
                    max-width: {self.COLUMN_WIDTH}px;
                }}
            """)

    def create_list_view(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –ø–ª–∞–≤–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π"""
        list_view = QListView()

        # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        list_view.setViewMode(QListView.ListMode)
        list_view.setSpacing(8)
        list_view.setUniformItemSizes(True)
        list_view.setSelectionMode(QListView.NoSelection)
        list_view.setContextMenuPolicy(Qt.CustomContextMenu)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        list_view.setDragEnabled(True)
        list_view.setAcceptDrops(True)
        list_view.setDragDropMode(QListView.DragDrop)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º—ã—à–∏
        list_view.setMouseTracking(True)
        list_view.viewport().setMouseTracking(True)
        list_view.setAttribute(Qt.WA_Hover, True)
        list_view.viewport().setAttribute(Qt.WA_Hover, True)
        list_view.setToolTipDuration(-1)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        list_view.setVerticalScrollMode(QListView.ScrollPerPixel)
        list_view.verticalScrollBar().setSingleStep(15)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        list_view.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        list_view.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        list_view.setProperty("scrollMode", "animated")
        list_view.setProperty("scrollStepFactor", 0.05)  # –ü–ª–∞–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
        list_view.setStyleSheet("""
            QListView {
                background-color: transparent;
                border: none;
                padding: 0px;
                outline: none;
            }

            QListView::item {
                background-color: transparent;
                padding: 0px;
                margin: 4px 0px;
            }

            QScrollBar:vertical {
                border: none;
                background: transparent;
                width: 8px;
                margin: 0px;
            }

            QScrollBar::handle:vertical {
                background: #a0a0a0;
                min-height: 30px;
                border-radius: 4px;
            }

            QScrollBar::handle:vertical:hover {
                background: #808080;
            }

            QScrollBar::add-line:vertical,
            QScrollBar::sub-line:vertical {
                height: 0px;
            }

            QScrollBar::add-page:vertical,
            QScrollBar::sub-page:vertical {
                background: none;
            }

            QScrollBar::up-arrow:vertical,
            QScrollBar::down-arrow:vertical {
                background: none;
            }
        """)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –¥–µ–ª–µ–≥–∞—Ç–∞
        self.delegate = OrderCardDelegate(list_view)
        list_view.setItemDelegate(self.delegate)
        self.model = OrdersModel()
        list_view.setModel(self.model)

        # –î–æ—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ç–∞–π–º–µ—Ä–∞
        list_view.scrollTimer = QTimer()
        list_view.scrollTimer.setInterval(16)  # ~60 FPS
        list_view.scrollTimer.timeout.connect(lambda: list_view.viewport().update())
        list_view.scrollTimer.start()

        return list_view

    def get_status_style(self, status):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"""
        status_styles = {
            '–ù–æ–≤—ã–π': {
                'border': '#90CAF9',
                'count_bg': '#1976D2',
                'header_bg': '#FAFAFA'
            },
            '–í —Ä–∞–±–æ—Ç–µ': {
                'border': '#FFB74D',
                'count_bg': '#F57C00',
                'header_bg': '#FFF8E1'
            },
            '–í –æ–∂–∏–¥–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã': {
                'border': '#EF9A9A',
                'count_bg': '#D32F2F',
                'header_bg': '#FFEBEE'
            },
            '–í—ã–ø–æ–ª–Ω–µ–Ω': {
                'border': '#A5D6A7',
                'count_bg': '#388E3C',
                'header_bg': '#E8F5E9'
            },
            '–û—Ç–∫–∞–∑': {
                'border': '#B0BEC5',
                'count_bg': '#616161',
                'header_bg': '#ECEFF1'
            }
        }
        return status_styles.get(status, {})

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∫–æ–ª–æ–Ω–∫–∏"""
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –∫–æ–ª–æ–Ω–∫–∏
        self.setStyleSheet(f"""
            QFrame {{
                background-color: {self.base_style['bg']};
                border: 2px solid {self.base_style['border']};
                border-radius: 8px;
                margin: 0px;
                min-width: 340px;
                max-width: 340px;
                padding: 0px;
            }}
        """)

        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(4, 4, 4, 4)
        main_layout.setSpacing(4)

        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        header = self.create_header()
        main_layout.addWidget(header)

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫
        self.list_view = self.create_list_view()
        main_layout.addWidget(self.list_view)

    def create_header(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∫–æ–ª–æ–Ω–∫–∏ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∫–æ–º–±–æ-–±–æ–∫—Å–∞"""
        header = QWidget()
        header.setObjectName("header")
        header.setFixedWidth(self.COLUMN_WIDTH - 8)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
        status_styles = {
            '–í –æ–∂–∏–¥–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã': {
                'bg': '#FFEBEE',  # –°–≤–µ—Ç–ª–æ-—Ä–æ–∑–æ–≤—ã–π —Ñ–æ–Ω
                'border': '#EF9A9A',
                'count_bg': '#D32F2F'
            },
            '–ù–æ–≤—ã–π': {
                'bg': '#E3F2FD',  # –°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π —Ñ–æ–Ω
                'border': '#90CAF9',
                'count_bg': '#1976D2'
            },
            '–í —Ä–∞–±–æ—Ç–µ': {
                'bg': '#FFF8E1',  # –°–≤–µ—Ç–ª–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π —Ñ–æ–Ω
                'border': '#FFB74D',
                'count_bg': '#F57C00'
            },
            '–í—ã–ø–æ–ª–Ω–µ–Ω': {
                'bg': '#E8F5E9',  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω
                'border': '#A5D6A7',
                'count_bg': '#388E3C'
            },
            '–û—Ç–∫–∞–∑': {
                'bg': '#ECEFF1',  # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω
                'border': '#B0BEC5',
                'count_bg': '#616161'
            }
        }

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        current_style = status_styles.get(self.status, status_styles['–û—Ç–∫–∞–∑'])
        bg_color = current_style['bg']
        status_color = current_style['count_bg']

        header.setStyleSheet(f"""
            QWidget#header {{
                background-color: {bg_color};
                border: none;
                border-top-left-radius: 14px;
                border-top-right-radius: 14px;
                padding: 5px;
                min-width: {self.COLUMN_WIDTH - 15}px;
                max-width: {self.COLUMN_WIDTH - 8}px;
            }}

            QLabel#title {{
                color: #374151;
                font-size: 17px;
                font-family: "Segoe UI", "Arial", sans-serif;
                font-weight: 650;
                border: none;
                letter-spacing: 0.05em;
                min-width: 220px;
                max-width: 220px;
                background: transparent;
            }}

            QLabel#counter {{
                background-color: {status_color};
                color: white;
                font-size: 16px;

                font-weight: 500;
                border-radius: 4px;
                min-width: 40px;
                max-width: 40px;
                min-height: 20px;
                max-height: 20px;
                qproperty-alignment: AlignCenter;
                margin: 2px;
            }}

            QComboBox {{
                background-color: white;
                border: 1px solid #E5E7EB;
                border-radius: 4px;
                padding: 2px 8px;
                min-width: 120px;
                max-width: 120px;
                font-size: 12px;
                color: #374151;
            }}

            QComboBox:hover {{
                border-color: {status_color};
            }}

            QLabel#amount {{
                color: #6B7280;
                font-size: 14px;
                border: none;
                font-weight: 400;
                margin-top: 2px;
                padding-left: 2px;
                min-width: {self.COLUMN_WIDTH - 40}px;
                max-width: {self.COLUMN_WIDTH - 40}px;
                background: transparent;
            }}

            QLabel#underline {{
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                            stop:0 transparent,
                            stop:0.4 transparent,
                            stop:0.5 {status_color},
                            stop:0.6 transparent,
                            stop:1 transparent);
                min-height: 3px;
                border: none;
                max-height: 3px;
                min-width: {self.COLUMN_WIDTH - 40}px;
                max-width: {self.COLUMN_WIDTH - 40}px;
                margin-top: 1px;
            }}
        """)

        # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –º–µ—Ç–æ–¥–∞ create_header –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...

        # Layout –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
        header_layout = QVBoxLayout(header)
        header_layout.setContentsMargins(15, 9, 15, 9)
        header_layout.setSpacing(0)

        # –í–µ—Ä—Ö–Ω—è—è —Å—Ç—Ä–æ–∫–∞ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
        top_row = QHBoxLayout()
        top_row.setContentsMargins(0, 0, 0, 0)
        top_row.setSpacing(8)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–ª–æ–Ω–∫–∏
        title_label = QLabel(self.title)
        title_label.setObjectName("title")
        title_label.setFixedWidth(200)

        # –°—á—ë—Ç—á–∏–∫
        self.counter_label = QLabel("0")
        self.counter_label.setObjectName("counter")
        self.counter_label.setFixedSize(40, 20)

        top_row.addWidget(title_label)
        top_row.addStretch()
        top_row.addWidget(self.counter_label)

        # –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —à–∏—Ä–∏–Ω–æ–π
        underline = QLabel()
        underline.setObjectName("underline")
        underline.setFixedWidth(self.COLUMN_WIDTH - 40)

        # –ù–∏–∂–Ω—è—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Å—É–º–º—ã/–æ—Å—Ç–∞—Ç–∫–∞ –∏ –∫–æ–º–±–æ-–±–æ–∫—Å–∞
        bottom_row = QHBoxLayout()
        bottom_row.setContentsMargins(0, 4, 0, 4)
        bottom_row.setSpacing(8)

        # –°—É–º–º–∞/–æ—Å—Ç–∞—Ç–æ–∫ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —à–∏—Ä–∏–Ω–æ–π
        self.amount_label = QLabel()
        self.amount_label.setObjectName("amount")

        # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–±–æ-–±–æ–∫—Å
        self.sort_combo = QComboBox()
        self.sort_combo.setFixedSize(120, 24)

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        for text, value in self.SORT_OPTIONS:
            self.sort_combo.addItem(text, value)
        self.sort_combo.currentIndexChanged.connect(self.on_sort_changed)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
        if self.current_sort:
            for i in range(self.sort_combo.count()):
                if self.sort_combo.itemData(i) == self.current_sort:
                    self.sort_combo.setCurrentIndex(i)
                    break
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç—ã –≤ –Ω–∏–∂–Ω—é—é —Å—Ç—Ä–æ–∫—É
        bottom_row.addWidget(self.amount_label)
        bottom_row.addStretch()
        bottom_row.addWidget(self.sort_combo)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ layout –∑–∞–≥–æ–ª–æ–≤–∫–∞
        header_layout.addLayout(top_row)
        header_layout.addWidget(underline)
        header_layout.addLayout(bottom_row)

        return header

    def on_sort_changed(self, index):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"""
        sort_value = self.sort_combo.currentData()
        if sort_value:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
            self.current_sort = sort_value
            self.settings.setValue(f'sort_order_{self.status}', sort_value)
            self.settings.sync()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self.sort_orders(sort_value)

    def sort_orders(self, sort_key):
        """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–∫–∞–∑–æ–≤"""
        if not hasattr(self, 'model') or not self.model._orders:
            return

        orders = self.model._orders.copy()

        def get_sort_value(order, key_prefix):
            try:
                if key_prefix == 'discount':
                    discount = order.get('discount', '0%')
                    if isinstance(discount, str):
                        return float(discount.strip('%') or 0)
                    return float(discount or 0)
                elif key_prefix == 'date':
                    return self.safe_convert_to_datetime(order.get('created_date'))
                elif key_prefix == 'amount':
                    return float(order.get('cost') or 0)
                elif key_prefix == 'deadline':
                    return str(order.get('deadline') or '')
                elif key_prefix == 'service':
                    return str(order.get('service') or '').lower()
                elif key_prefix == 'group':
                    return str(order.get('group') or '').lower()
                elif key_prefix == 'remaining':
                    return float(order.get('remaining_amount') or 0)
                elif key_prefix == 'payment_date':
                    return self.safe_convert_to_datetime(order.get('payment_date'))
                return ''
            except Exception:
                if key_prefix in ['discount', 'amount', 'remaining']:
                    return 0.0
                elif key_prefix in ['date', 'payment_date']:
                    return datetime.min
                return ''

        key_prefix = sort_key.rsplit('_', 1)[0]
        is_ascending = sort_key.endswith('_asc')

        orders.sort(
            key=lambda x: get_sort_value(x, key_prefix),
            reverse=not is_ascending
        )

        self.model.setOrders(orders)
        self.list_view.viewport().update()


    def update_orders(self, orders):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤"""
        try:
            self.setUpdatesEnabled(False)

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤
            orders_data = []
            now = datetime.now()

            for order in orders:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ order —Å–ª–æ–≤–∞—Ä–µ–º –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º Order
                if isinstance(order, dict):
                    order_dict = order
                else:
                    order_dict = {
                        'id': order.id,
                        'fio': order.fio,
                        'group': order.group,
                        'service': order.service,
                        'deadline': order.deadline,
                        'cost': order.cost,
                        'paid_amount': order.paid_amount,
                        'remaining_amount': order.remaining_amount,
                        'discount': order.discount,
                        'status': order.status,
                        'login': order.login,
                        'theme': order.theme,
                        'comment': order.comment,
                        'phone': order.phone,
                        'teacher_name': order.teacher_name,
                        'website': order.website,
                        'password': order.password,
                        'teacher_email': order.teacher_email,
                        'discount_end_date': order.discount_end_date if hasattr(order, 'discount_end_date') else None,
                        'discount_start_date': order.discount_start_date if hasattr(order,
                                                                                    'discount_start_date') else None,
                        'payment_date': order.payment_date if hasattr(order, 'payment_date') else None,
                        'created_date': order.created_date if hasattr(order, 'created_date') else None
                    }

                orders_data.append(order_dict)

            # –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª—å
            self.model.setOrders(orders_data)

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
            if self.current_sort:
                self.sort_orders(self.current_sort)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
            self.counter_label.setText(str(len(orders_data)))

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—É/–æ—Å—Ç–∞—Ç–æ–∫
            if self.status == '–í—ã–ø–æ–ª–Ω–µ–Ω':
                total = sum(order.get('paid_amount', 0) for order in orders_data)
                self.amount_label.setText(f"–û–ø–ª–∞—á–µ–Ω–æ: {total:,.0f} ‚ÇΩ")
            else:
                total = sum(order.get('remaining_amount', 0) for order in orders_data)
                self.amount_label.setText(f"–û—Å—Ç–∞—Ç–æ–∫: {total:,.0f} ‚ÇΩ")

            # –û–±–Ω–æ–≤–ª—è–µ–º layout
            self.list_view.doItemsLayout()

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")
        finally:
            self.setUpdatesEnabled(True)

    def clear_sort_settings(self):
        """–û—á–∏—Å—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"""
        self.settings.remove(f'sort_order_{self.status}')
        self.settings.sync()
        self.current_sort = None
        self.sort_combo.setCurrentIndex(0)

    def safe_convert_to_datetime(self, value):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ datetime"""
        if value is None:
            return datetime.min
        if isinstance(value, datetime):
            return value
        if isinstance(value, date):
            return datetime.combine(value, datetime.min.time())
        if isinstance(value, str):
            try:
                return datetime.strptime(value, '%Y-%m-%d')
            except ValueError:
                try:
                    return datetime.strptime(value, '%Y-%m-%d %H:%M:%S')
                except ValueError:
                    return datetime.min
        return datetime.min

    def clear(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤"""
        if hasattr(self, 'model'):
            self.model.clear()
        self.counter_label.setText("0")
        self.amount_label.setText("–û—Å—Ç–∞—Ç–æ–∫: 0 ‚ÇΩ")

    def listview_dragEnterEvent(self, event):
        if event.mimeData().hasText():
            event.accept()
        else:
            event.ignore()

    def listview_dragMoveEvent(self, event):
        if event.mimeData().hasText():
            event.accept()
        else:
            event.ignore()

    def listview_dropEvent(self, event):
        try:
            order_id = int(event.mimeData().text())

            with DatabaseManager().session_scope() as session:
                order = session.query(Order).get(order_id)
                if not order or order.status == self.status:
                    event.ignore()
                    return

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ "–í—ã–ø–æ–ª–Ω–µ–Ω"
                if self.status == '–í—ã–ø–æ–ª–Ω–µ–Ω':
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏
                    remaining = order.recalculate_remaining()

                    if remaining > 0:
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –æ–ø–ª–∞—Ç—ã
                        from ui.windows.payment_window import PaymentWindow
                        payment_window = PaymentWindow(self, order)
                        result = payment_window.exec_()

                        if result != QDialog.Accepted:
                            event.ignore()
                            return

                        # –ü–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
                        session.refresh(order)
                        remaining = order.recalculate_remaining()

                        if remaining > 0:
                            from ui.message_utils import show_warning
                            show_warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                                         "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ '–í—ã–ø–æ–ª–Ω–µ–Ω'. –û—Å—Ç–∞–ª–∏—Å—å –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Å—É–º–º—ã.")
                            event.ignore()
                            return

                # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã - –ø—Ä–∏–Ω–∏–º–∞–µ–º
                event.accept()
                self.status_changed.emit(order_id, self.status, self.old_status)

        except ValueError:
            event.ignore()
