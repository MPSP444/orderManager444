from PyQt5.QtWidgets import (QWidget, QHBoxLayout, QVBoxLayout,
                             QLabel, QScrollArea, QPushButton, QLineEdit, QDialog, QMenu, QAction)
from PyQt5.QtCore import Qt, pyqtSignal, QTimer
from PyQt5.QtGui import QColor

from core.database_manager import DatabaseManager
from .order_card import OrderCard  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç
from datetime import datetime, timedelta, date
from .virtualized_column import VirtualizedKanbanColumn
# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
from sqlalchemy import or_, and_, cast, String, func
from core.database import Order, init_database
from sqlalchemy import text, or_, cast, String
from sqlalchemy import func, or_, cast, String, text as sql_text

from ..message_utils import show_error
from ui.windows.reminder_dialog import ReminderDialog
from PyQt5.QtCore import QSettings
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QMenu, QAction


class NotificationButton(QPushButton):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setText("üîî")
        self.setStyleSheet("""
            QPushButton {
                padding: 8px 15px;
                border: none;
                border-radius: 20px;
                background: #2196F3;
                color: white;
                min-width: 45px;
            }
            QPushButton:hover {
                background: #1976D2;
            }
        """)
        self.notifications = []
        self.menu = QMenu(self)
        self.setMenu(self.menu)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.notification_count = QLabel("0", self)
        self.notification_count.setStyleSheet("""
            QLabel {
                background: red;
                color: white;
                border-radius: 10px;
                padding: 2px 5px;
                margin: 2px;
            }
        """)
        self.notification_count.hide()

    def add_notification(self, order_data):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –∑–∞–∫–∞–∑–∞
        if not any(n['id'] == order_data['id'] for n in self.notifications):
            self.notifications.append(order_data)

            # –°–æ–∑–¥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é
            action = QAction(f"–ó–∞–∫–∞–∑ #{order_data['id']} - {order_data['fio']}", self)
            action.triggered.connect(lambda: self.show_notification_dialog(order_data))
            self.menu.addAction(action)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
            self.notification_count.setText(str(len(self.notifications)))
            self.notification_count.show()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏
            if self.notifications:
                self.setStyleSheet("""
                    QPushButton {
                        padding: 8px 15px;
                        border: none;
                        border-radius: 20px;
                        background: #f44336;
                        color: white;
                    }
                    QPushButton:hover {
                        background: #d32f2f;
                    }
                """)

    def clear_notifications(self):
        self.notifications.clear()
        self.menu.clear()
        self.notification_count.hide()
        self.setStyleSheet(self._default_style)

    def show_notification_dialog(self, order_data):
        dialog = ReminderDialog(order_data, self)
        dialog.exec_()


class KanbanBoard(QWidget):
    """–ö–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏"""

    def __init__(self, parent=None):
        super().__init__(parent)
        self.db_manager = DatabaseManager()
        self.orders_cache = {}  # –ö—ç—à –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        self.cache_timestamp = None  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞
        self.cache_lifetime = timedelta(minutes=5)  # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞
        self.current_search_query = ""
        self.reminder_timer = QTimer(self)
        self.reminder_timer.timeout.connect(self.check_reminders)
        self.reminder_timer.start(300000)
        self.initUI()
        self.check_reminders()

    def initUI(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–æ—Å–∫–∏"""
        main_layout = QVBoxLayout(self)
        top_panel = QHBoxLayout()

        # –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText("üîç –ü–æ–∏—Å–∫ –ø–æ –∑–∞–∫–∞–∑–∞–º...")
        self.search_input.textChanged.connect(self.search_orders)
        self.search_input.setStyleSheet("""
            QLineEdit {
                padding: 8px 15px;
                border: 1px solid #ddd;
                border-radius: 20px;
                background: white;
                min-width: 300px;
            }
            QLineEdit:focus {
                border: 2px solid #2196F3;
            }
        """)
        top_panel.addWidget(self.search_input)
        top_panel.addStretch()

        mass_message_btn = QPushButton("üì± –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞")
        mass_message_btn.clicked.connect(self.show_mass_messaging)
        mass_message_btn.setStyleSheet("""
            QPushButton {
                padding: 8px 15px;
                border: none;
                border-radius: 20px;
                background: #2196F3;
                color: white;
            }
            QPushButton:hover {
                background: #1976D2;
            }
        """)
        top_panel.addWidget(mass_message_btn)
        self.notification_btn = NotificationButton(self)
        top_panel.addWidget(self.notification_btn)
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        refresh_btn = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
        refresh_btn.clicked.connect(self.loadOrders)
        refresh_btn.setStyleSheet("""
            QPushButton {
                padding: 8px 15px;
                border: none;
                border-radius: 20px;
                background: #2196F3;
                color: white;
            }
            QPushButton:hover {
                background: #1976D2;
            }
        """)
        top_panel.addWidget(refresh_btn)

        main_layout.addLayout(top_panel)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫
        columns_container = QWidget()
        self.columns_layout = QHBoxLayout(columns_container)
        self.columns_layout.setSpacing(10)
        self.columns_layout.setContentsMargins(0, 0, 0, 0)

        # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
        self.columns = {}
        columns_data = [
            ("üÜï –ù–æ–≤—ã–µ", "–ù–æ–≤—ã–π"),
            ("‚öôÔ∏è –í —Ä–∞–±–æ—Ç–µ", "–í —Ä–∞–±–æ—Ç–µ"),
            ("‚è≥ –û–∂–∏–¥–∞—é—Ç –æ–ø–ª–∞—Ç—ã", "–í –æ–∂–∏–¥–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã"),
            ("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω—ã", "–í—ã–ø–æ–ª–Ω–µ–Ω"),
            ("‚ùå –û—Ç–º–µ–Ω–µ–Ω—ã", "–û—Ç–∫–∞–∑")
        ]

        for title, status in columns_data:
            column = VirtualizedKanbanColumn(title, status)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∏—Ä—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
            column.status_changed.connect(self.on_status_changed)
            self.columns[status] = column
            self.columns_layout.addWidget(column)

        # –°–æ–∑–¥–∞–µ–º scroll area –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scroll = QScrollArea()
        scroll.setWidget(columns_container)
        scroll.setWidgetResizable(True)
        scroll.setHorizontalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        scroll.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        scroll.setStyleSheet("""
            QScrollArea {
                border: none;
                background-color: #f5f5f5;
            }
            QScrollBar:horizontal {
                border: none;
                background: #f0f0f0;
                height: 8px;
            }
            QScrollBar::handle:horizontal {
                background: #c0c0c0;
                min-width: 50px;
                border-radius: 4px;
            }
        """)

        main_layout.addWidget(scroll)
        self.loadOrders()

    def is_cache_valid(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∞"""
        if not self.cache_timestamp:
            return False
        return datetime.now() - self.cache_timestamp < self.cache_lifetime

    def show_mass_messaging(self):
        """–ü–æ–∫–∞–∑ –æ–∫–Ω–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        from ui.windows.mass_messaging import MassMessagingDialog
        dialog = MassMessagingDialog(self)
        dialog.exec_()

    def check_reminders(self):
        try:
            with self.db_manager.session_scope() as session:
                current_date = datetime.now()
                two_months_ago = current_date - timedelta(days=60)

                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã —Å—Ç–∞—Ä—à–µ 2 –º–µ—Å—è—Ü–µ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏ –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω—ã
                orders = session.query(Order).filter(
                    and_(
                        Order.created_date <= two_months_ago,
                        Order.status.in_(['–í –æ–∂–∏–¥–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã', '–í —Ä–∞–±–æ—Ç–µ', '–ù–æ–≤—ã–π']),
                        Order.remaining_amount > 0
                    )
                ).all()

                settings = QSettings('MPSP', 'OrderReminders')
                notification_button = self.notification_btn

                for order in orders:
                    client_key = f"client_{order.fio}"
                    if settings.value(f"{client_key}/reminders_disabled", False, type=bool):
                        continue

                    order_key = f"order_{order.id}"
                    next_reminder_str = settings.value(f"{order_key}/next_reminder")

                    if next_reminder_str:
                        next_reminder = datetime.strptime(next_reminder_str, '%Y-%m-%d %H:%M:%S')
                        if current_date < next_reminder:
                            continue

                    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏
                    if order.discount_end_date:
                        end_date = order.discount_end_date
                        if isinstance(end_date, str):
                            end_date = datetime.strptime(end_date, '%Y-%m-%d %H:%M:%S')
                        elif isinstance(end_date, date):
                            end_date = datetime.combine(end_date, datetime.min.time())

                        time_diff = end_date - current_date
                        total_seconds = int(time_diff.total_seconds())

                        if total_seconds > 0:
                            days = total_seconds // (24 * 3600)
                            remaining_seconds = total_seconds % (24 * 3600)
                            hours = remaining_seconds // 3600
                            minutes = (remaining_seconds % 3600) // 60

                            time_str = f"{days}–¥ {hours}—á {minutes}–º"
                        else:
                            time_str = "—Å—Ä–æ–∫ –∏—Å—Ç—ë–∫"

                    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    order_data = {
                        'id': order.id,
                        'fio': order.fio,
                        'service': order.service,
                        'created_date': order.created_date,
                        'remaining_amount': order.remaining_amount,
                        'phone': order.phone,
                        'status': order.status,
                        'time_remaining': time_str if 'time_str' in locals() else None
                    }

                    # –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    notification_button.add_notification(order_data)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")



    def show_reminder(self, order):
        """–ü–æ–∫–∞–∑ –æ–∫–Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–∫–∞–∑ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –¥–∏–∞–ª–æ–≥
            order_data = {
                'id': order.id,
                'fio': order.fio,
                'service': order.service,
                'created_date': order.created_date,
                'remaining_amount': order.remaining_amount,
                'phone': order.phone,
                'status': order.status
            }

            # –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
            dialog = ReminderDialog(order_data, self)
            dialog.exec_()

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
    def on_status_changed(self, order_id, new_status, old_status=None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
        try:
            self.setUpdatesEnabled(False)
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ —Å—Ç–∞—Ç—É—Å—ã
            affected_statuses = set()
            if old_status:
                affected_statuses.add(old_status)
            affected_statuses.add(new_status)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            with self.db_manager.session_scope() as session:
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ —Å–∫–∏–¥–∫—É
                order = session.query(Order).get(order_id)
                if order:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–∫–∏–¥–∫—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                    if new_status == '–í—ã–ø–æ–ª–Ω–µ–Ω':
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª–∞ –ª–∏ –æ–ø–ª–∞—Ç–∞ –≤ —Å—Ä–æ–∫
                        if order.payment_date and order.discount_end_date:
                            if order.payment_date <= order.discount_end_date.date():
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫–∏–¥–∫—É
                                pass
                            else:
                                # –û–±–Ω—É–ª—è–µ–º —Å–∫–∏–¥–∫—É –µ—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –ø–æ—Å–ª–µ —Å—Ä–æ–∫–∞
                                order.discount = "0%"
                                order.discount_start_date = None
                                order.discount_end_date = None
                    else:
                        # –î–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ —Å–∫–∏–¥–∫–∞
                        order.check_discount_expiration()

                    session.commit()

                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ –∫–æ–ª–æ–Ω–∫–∏
                for status in affected_statuses:
                    if status in self.columns:
                        orders = self.db_manager.get_orders_by_status([status])
                        self.columns[status].update_orders(orders)

        except Exception as e:
            show_error(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–æ–∫: {str(e)}")
        finally:
            self.setUpdatesEnabled(True)

    def update_cache(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞"""
        try:
            with self.db_manager.session_scope() as session:
                orders = session.query(Order).with_entities(
                    Order.id, Order.fio, Order.group, Order.service,
                    Order.deadline, Order.cost, Order.paid_amount,
                    Order.remaining_amount, Order.discount, Order.status
                ).order_by(Order.created_date.desc()).all()

                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
                self.orders_cache.clear()
                for order in orders:
                    if order.status not in self.orders_cache:
                        self.orders_cache[order.status] = []
                    self.orders_cache[order.status].append(order)

                self.cache_timestamp = datetime.now()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—ç—à–∞: {e}")

    def get_orders_for_status(self, status):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∞"""
        if not self.is_cache_valid():
            self.update_cache()
        return self.orders_cache.get(status, [])

    def loadOrders(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤ —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∏—Å–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–∫–∏–¥–æ–∫"""
        try:
            self.setUpdatesEnabled(False)

            # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if self.current_search_query:
                self.search_orders(self.current_search_query)
                return

            # –û—á–∏—â–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
            for column in self.columns.values():
                column.clear()

            with self.db_manager.session_scope() as session:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã
                all_orders = session.query(Order).all()
                now = datetime.now()

                for order in all_orders:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–∫–∏–¥–∫–∏
                        if order.discount and order.discount != "0%" and order.discount != "–ù–µ —É–∫–∞–∑–∞–Ω–æ":
                            if order.discount_end_date:
                                if isinstance(order.discount_end_date, date):
                                    end_date = datetime.combine(order.discount_end_date, datetime.min.time())
                                else:
                                    end_date = order.discount_end_date

                                # –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –æ–ø–ª–∞—Ç—ã
                                if order.status == '–í—ã–ø–æ–ª–Ω–µ–Ω' and order.payment_date:
                                    payment_date = order.payment_date
                                    if isinstance(payment_date, str):
                                        payment_date = datetime.strptime(payment_date, '%Y-%m-%d')
                                    elif isinstance(payment_date, date):
                                        payment_date = datetime.combine(payment_date, datetime.min.time())

                                    if payment_date > end_date:
                                        order.discount = "0%"
                                        order.discount_start_date = None
                                        order.discount_end_date = None
                                        session.commit()

                                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                                elif now > end_date:
                                    order.discount = "0%"
                                    order.discount_start_date = None
                                    order.discount_end_date = None
                                    session.commit()

                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã
                        if (order.status == '–í –æ–∂–∏–¥–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã' and
                                order.discount and
                                order.discount != "0%" and
                                order.discount != "–ù–µ —É–∫–∞–∑–∞–Ω–æ" and
                                not order.discount_start_date and
                                not order.discount_end_date):
                            order.discount_start_date = now
                            order.discount_end_date = now + timedelta(days=4)
                            session.commit()

                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–∫–∞–∑–∞ #{order.id}: {e}")

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                orders = session.query(Order).with_entities(
                    Order.id, Order.fio, Order.group, Order.service,
                    Order.deadline, Order.cost, Order.paid_amount,
                    Order.remaining_amount, Order.discount, Order.status,
                    Order.login, Order.theme, Order.comment, Order.phone,
                    Order.teacher_name, Order.website, Order.password,
                    Order.teacher_email, Order.discount_start_date,
                    Order.discount_end_date, Order.payment_date,
                    Order.created_date
                ).order_by(Order.created_date.desc()).all()

                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Å—Ä–æ—á–∫–µ
                orders_by_status = {}
                for order in orders:
                    order_dict = order._asdict()

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤ –∫–∞–∫—É—é –∫–æ–ª–æ–Ω–∫—É –ø–æ–º–µ—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑
                    display_status = order_dict['status']

                    # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "–ü–µ—Ä–µ–¥–µ–ª–∫–∞", –ø–æ–º–µ—â–∞–µ–º –≤ –∫–æ–ª–æ–Ω–∫—É "–í —Ä–∞–±–æ—Ç–µ"
                    if display_status == '–ü–µ—Ä–µ–¥–µ–ª–∫–∞':
                        display_status = '–í —Ä–∞–±–æ—Ç–µ'

                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–Ω—è—Ö –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ "–í –æ–∂–∏–¥–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã"
                    if order_dict['status'] == '–í –æ–∂–∏–¥–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã' and order_dict['created_date']:
                        created_date = order_dict['created_date']
                        if isinstance(created_date, date):
                            created_date = datetime.combine(created_date, datetime.min.time())
                        days_waiting = (now.date() - created_date.date()).days
                        order_dict['days_waiting'] = days_waiting

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–∫—É –∏ —Å—Ç–∞—Ç—É—Å —Å–∫–∏–¥–∫–∏
                    if order_dict['discount_end_date']:
                        end_date = order_dict['discount_end_date']
                        if isinstance(end_date, date):
                            end_date = datetime.combine(end_date, datetime.min.time())

                        if order_dict['status'] == '–í—ã–ø–æ–ª–Ω–µ–Ω' and order_dict['payment_date']:
                            payment_date = order_dict['payment_date']
                            if isinstance(payment_date, date):
                                payment_datetime = datetime.combine(payment_date, datetime.min.time())
                            else:
                                payment_datetime = payment_date
                            time_diff = end_date - payment_datetime
                        else:
                            time_diff = end_date - now

                        if time_diff.total_seconds() < 0:
                            order_dict['is_overdue'] = True
                            order_dict['overdue_days'] = abs(time_diff.days)
                            order_dict['overdue_hours'] = abs(time_diff.seconds // 3600)
                        else:
                            order_dict['is_overdue'] = False
                            order_dict['remaining_days'] = time_diff.days
                            order_dict['remaining_hours'] = time_diff.seconds // 3600

                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É
                    if display_status not in orders_by_status:
                        orders_by_status[display_status] = []
                    orders_by_status[display_status].append(order_dict)

                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏
                for status, column in self.columns.items():
                    if status in orders_by_status:
                        column.update_orders(orders_by_status[status])

        except Exception as e:
            show_error(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤: {str(e)}")
        finally:
            self.setUpdatesEnabled(True)
            self.update()

    def _get_button_style(self):
        """–°—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫"""
        return """
            QPushButton {
                padding: 8px 15px;
                border: none;
                border-radius: 20px;
                background: #2196F3;
                color: white;
            }
            QPushButton:hover {
                background: #1976D2;
            }
        """
    def update_specific_columns(self, order, old_status, new_status):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö –∫–æ–ª–æ–Ω–æ–∫"""
        try:
            self.setUpdatesEnabled(False)
            affected_statuses = {old_status, new_status}

            with self.db_manager.session_scope() as session:
                for status in affected_statuses:
                    if status in self.columns:
                        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
                        orders = session.query(Order).with_entities(
                            Order.id, Order.fio, Order.group, Order.service,
                            Order.deadline, Order.cost, Order.paid_amount,
                            Order.remaining_amount, Order.discount, Order.status
                        ).filter(
                            Order.status == status
                        ).order_by(Order.created_date.desc()).all()

                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–ª–æ–≤–∞—Ä–∏
                        orders_data = [order._asdict() for order in orders]

                        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É
                        self.columns[status].update_orders(orders_data)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–æ–∫: {e}")
        finally:
            self.setUpdatesEnabled(True)
            self.update()

    def clear_all_columns(self):
        """–û—á–∏—â–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫ –Ω–∞ –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–µ."""
        for column in self.columns.values():
            column.clear()

    def order_to_dict(order):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ–±—ä–µ–∫—Ç Order –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            "id": order.id,
            "fio": order.fio,
            "group": order.group,
            "service": order.service,
            "deadline": order.deadline,
            "cost": order.cost,
            "paid_amount": order.paid_amount,
            "remaining_amount": order.remaining_amount,
            "discount": order.discount,
            "status": order.status
        }

    def setupUpdateTimer(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
        self.update_timer = QTimer(self)
        self.update_timer.timeout.connect(lambda: self.loadOrders())
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
        self.update_timer.start(600000)

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏"""
        if hasattr(self, 'update_timer'):
            self.update_timer.stop()

    def search_orders(self, text_query):
        """–ü–æ–∏—Å–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Python-—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
        try:
            self.current_search_query = text_query.strip()
            with self.db_manager.session_scope() as session:
                if not text_query.strip():
                    self.loadOrders()
                    return

                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                all_orders = self.db_manager.get_orders_by_status()
                search_text = text_query.strip().lower()

                # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ Python
                filtered_orders = [
                    order for order in all_orders if
                    search_text in order['fio'].lower() or
                    search_text in str(order['id']) or
                    search_text in order['group'].lower() or
                    search_text in order['service'].lower()
                ]

                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –¥–ª—è –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∏
                orders_by_status = {}
                for order in filtered_orders:
                    if order['status'] not in orders_by_status:
                        orders_by_status[order['status']] = []
                    orders_by_status[order['status']].append(order)

                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∏
                for column in self.columns.values():
                    column.clear()

                for status, column in self.columns.items():
                    if status in orders_by_status:
                        column.update_orders(orders_by_status[status])

        except Exception as e:
            print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}')



